
INTERFACE z2ui5_if_types DEFERRED.
INTERFACE z2ui5_if_client DEFERRED.
INTERFACE z2ui5_if_app DEFERRED.
INTERFACE z2ui5_if_core_types DEFERRED.
INTERFACE z2ui5_if_ajson_types DEFERRED.
INTERFACE z2ui5_if_ajson_mapping DEFERRED.
INTERFACE z2ui5_if_ajson_filter DEFERRED.
INTERFACE z2ui5_if_ajson DEFERRED.


INTERFACE z2ui5_if_types LOAD.


CLASS z2ui5_cl_xml_view_cc DEFINITION DEFERRED.
CLASS z2ui5_cl_xml_view DEFINITION DEFERRED.
CLASS z2ui5_cl_http_handler DEFINITION DEFERRED.
CLASS z2ui5_cl_app_startup DEFINITION DEFERRED.
CLASS z2ui5_cl_app_hello_world DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_to_select DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_to_inform DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_to_confirm DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_textedit DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_table DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_pdf DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_messages DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_js_loader DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_itab_json_dl DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_input_val DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_html DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_get_range_m DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_get_range DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_file_ul DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_file_dl DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_error DEFINITION DEFERRED.
CLASS z2ui5_cl_pop_bal DEFINITION DEFERRED.
CLASS z2ui5_cl_app_view1_xml DEFINITION DEFERRED.
CLASS z2ui5_cl_app_view1_js DEFINITION DEFERRED.
CLASS z2ui5_cl_app_style_css DEFINITION DEFERRED.
CLASS z2ui5_cl_app_server_js DEFINITION DEFERRED.
CLASS z2ui5_cl_app_models_js DEFINITION DEFERRED.
CLASS z2ui5_cl_app_manifest_json DEFINITION DEFERRED.
CLASS z2ui5_cl_app_index_html DEFINITION DEFERRED.
CLASS z2ui5_cl_app_debugtool_xml DEFINITION DEFERRED.
CLASS z2ui5_cl_app_debugtool_js DEFINITION DEFERRED.
CLASS z2ui5_cl_app_component_js DEFINITION DEFERRED.
CLASS z2ui5_cl_app_app_xml DEFINITION DEFERRED.
CLASS z2ui5_cl_app_app_js DEFINITION DEFERRED.
CLASS z2ui5_cl_core_srv_util DEFINITION DEFERRED.
CLASS z2ui5_cl_core_srv_json DEFINITION DEFERRED.
CLASS z2ui5_cl_core_srv_event DEFINITION DEFERRED.
CLASS z2ui5_cl_core_srv_diss DEFINITION DEFERRED.
CLASS z2ui5_cl_core_srv_bind DEFINITION DEFERRED.
CLASS z2ui5_cl_core_srv_attri DEFINITION DEFERRED.
CLASS z2ui5_cl_core_handler DEFINITION DEFERRED.
CLASS z2ui5_cl_core_client DEFINITION DEFERRED.
CLASS z2ui5_cl_core_app DEFINITION DEFERRED.
CLASS z2ui5_cl_core_action DEFINITION DEFERRED.
CLASS z2ui5_cl_core_srv_draft DEFINITION DEFERRED.
CLASS z2ui5_cx_util_error DEFINITION DEFERRED.
CLASS z2ui5_cl_util_abap_http DEFINITION DEFERRED.
CLASS z2ui5_cl_util_abap DEFINITION DEFERRED.
CLASS z2ui5_cl_util DEFINITION DEFERRED.
CLASS z2ui5_cx_srt DEFINITION DEFERRED.
CLASS z2ui5_cl_srt_typedescr DEFINITION DEFERRED.
CLASS z2ui5_cl_srt_tabledescr DEFINITION DEFERRED.
CLASS z2ui5_cl_srt_structdescr DEFINITION DEFERRED.
CLASS z2ui5_cl_srt_refdescr DEFINITION DEFERRED.
CLASS z2ui5_cl_srt_objectdescr DEFINITION DEFERRED.
CLASS z2ui5_cl_srt_intfdescr DEFINITION DEFERRED.
CLASS z2ui5_cl_srt_elemdescr DEFINITION DEFERRED.
CLASS z2ui5_cl_srt_datadescr DEFINITION DEFERRED.
CLASS z2ui5_cl_srt_complexdescr DEFINITION DEFERRED.
CLASS z2ui5_cl_srt_classdescr DEFINITION DEFERRED.
CLASS z2ui5_cx_ajson_error DEFINITION DEFERRED.
CLASS z2ui5_cl_ajson_utilities DEFINITION DEFERRED.
CLASS z2ui5_cl_ajson_mapping DEFINITION DEFERRED.
CLASS z2ui5_cl_ajson_filter_lib DEFINITION DEFERRED.
CLASS z2ui5_cl_ajson DEFINITION DEFERRED.



CLASS z2ui5_cx_ajson_error DEFINITION
  INHERITING FROM cx_static_check
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES if_t100_message .

    TYPES:
      ty_rc TYPE c LENGTH 4 .

    CONSTANTS:
      BEGIN OF zcx_ajson_error,
        msgid TYPE symsgid VALUE '00',
        msgno TYPE symsgno VALUE '001',
        attr1 TYPE scx_attrname VALUE 'A1',
        attr2 TYPE scx_attrname VALUE 'A2',
        attr3 TYPE scx_attrname VALUE 'A3',
        attr4 TYPE scx_attrname VALUE 'A4',
      END OF zcx_ajson_error .
    DATA rc TYPE ty_rc READ-ONLY .
    DATA message TYPE string READ-ONLY .
    DATA location TYPE string READ-ONLY .
    DATA a1 TYPE symsgv READ-ONLY .
    DATA a2 TYPE symsgv READ-ONLY .
    DATA a3 TYPE symsgv READ-ONLY .
    DATA a4 TYPE symsgv READ-ONLY .

    METHODS constructor
      IMPORTING
        !textid   LIKE if_t100_message=>t100key OPTIONAL
        !previous LIKE previous OPTIONAL
        !rc       TYPE ty_rc OPTIONAL
        !message  TYPE string OPTIONAL
        !location TYPE string OPTIONAL
        !a1       TYPE symsgv OPTIONAL
        !a2       TYPE symsgv OPTIONAL
        !a3       TYPE symsgv OPTIONAL
        !a4       TYPE symsgv OPTIONAL .
    CLASS-METHODS raise
      IMPORTING
        !iv_msg      TYPE string
        !iv_location TYPE string OPTIONAL
        !is_node     TYPE any OPTIONAL
      RAISING
        z2ui5_cx_ajson_error .
    METHODS set_location
      IMPORTING
        !iv_location TYPE string OPTIONAL
        !is_node     TYPE any OPTIONAL
          PREFERRED PARAMETER iv_location .
  PROTECTED SECTION.
  PRIVATE SECTION.
    TYPES:
      BEGIN OF ty_message_parts,
        a1 LIKE a1,
        a2 LIKE a1,
        a3 LIKE a1,
        a4 LIKE a1,
      END OF ty_message_parts.
ENDCLASS.
"! <p class="shorttext synchronized" lang="en">Serializable RTTI any type</p>



INTERFACE z2ui5_if_ajson_types.

  TYPES:
    ty_node_type TYPE string.

  CONSTANTS:
    BEGIN OF node_type,
      boolean TYPE ty_node_type VALUE 'bool',
      string  TYPE ty_node_type VALUE 'str',
      number  TYPE ty_node_type VALUE 'num',
      null    TYPE ty_node_type VALUE 'null',
      array   TYPE ty_node_type VALUE 'array',
      object  TYPE ty_node_type VALUE 'object',
    END OF node_type.

  TYPES:
    BEGIN OF ty_node,
      path     TYPE string,
      name     TYPE string,
      type     TYPE ty_node_type,
      value    TYPE string,
      index    TYPE i,
      order    TYPE i,
      children TYPE i,
    END OF ty_node.
  TYPES:
    ty_nodes_tt TYPE STANDARD TABLE OF ty_node WITH KEY path name.
  TYPES:
    ty_nodes_ts TYPE SORTED TABLE OF ty_node
      WITH UNIQUE KEY path name
      WITH NON-UNIQUE SORTED KEY array_index COMPONENTS path index
      WITH NON-UNIQUE SORTED KEY item_order COMPONENTS path order.

  TYPES:
    BEGIN OF ty_path_name,
      path TYPE string,
      name TYPE string,
    END OF ty_path_name.

ENDINTERFACE.


INTERFACE z2ui5_if_ajson.

  CONSTANTS version TYPE string VALUE 'v1.1.10'.            "#EC NOTEXT
  CONSTANTS origin TYPE string VALUE 'https://github.com/sbcgua/ajson'. "#EC NOTEXT
  CONSTANTS license TYPE string VALUE 'MIT'.                "#EC NOTEXT

  TYPES:
    BEGIN OF ty_opts,
      read_only                  TYPE abap_bool,
      keep_item_order            TYPE abap_bool,
      format_datetime            TYPE abap_bool,
      to_abap_corresponding_only TYPE abap_bool,
    END OF ty_opts.

  " DATA

  DATA mt_json_tree TYPE z2ui5_if_ajson_types=>ty_nodes_ts READ-ONLY.

  " CLONING

  METHODS clone
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.
  METHODS filter
    IMPORTING
      ii_filter      TYPE REF TO z2ui5_if_ajson_filter
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.
  METHODS map
    IMPORTING
      ii_mapper      TYPE REF TO z2ui5_if_ajson_mapping
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.

  " METHODS

  METHODS freeze.
  METHODS keep_item_order
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson.
  METHODS format_datetime
    IMPORTING
      iv_use_iso     TYPE abap_bool DEFAULT abap_true
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson.
  METHODS to_abap_corresponding_only
    IMPORTING
      iv_enable      TYPE abap_bool DEFAULT abap_true
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson.
  METHODS opts
    RETURNING
      VALUE(rs_opts) TYPE ty_opts.

  " METHODS ex.reader

  METHODS is_empty
    RETURNING
      VALUE(rv_yes) TYPE abap_bool.

  METHODS exists
    IMPORTING
      iv_path          TYPE string
    RETURNING
      VALUE(rv_exists) TYPE abap_bool.

  METHODS members
    IMPORTING
      iv_path           TYPE string
    RETURNING
      VALUE(rt_members) TYPE string_table.

  METHODS get
    IMPORTING
      iv_path         TYPE string
    RETURNING
      VALUE(rv_value) TYPE string.

  METHODS get_node_type
    IMPORTING
      iv_path             TYPE string
    RETURNING
      VALUE(rv_node_type) TYPE z2ui5_if_ajson_types=>ty_node_type.

  METHODS get_boolean
    IMPORTING
      iv_path         TYPE string
    RETURNING
      VALUE(rv_value) TYPE abap_bool.

  METHODS get_integer
    IMPORTING
      iv_path         TYPE string
    RETURNING
      VALUE(rv_value) TYPE i.

  METHODS get_number
    IMPORTING
      iv_path         TYPE string
    RETURNING
      VALUE(rv_value) TYPE f.

  METHODS get_date
    IMPORTING
      iv_path         TYPE string
    RETURNING
      VALUE(rv_value) TYPE d.

  METHODS get_timestamp
    IMPORTING
      iv_path         TYPE string
    RETURNING
      VALUE(rv_value) TYPE timestamp.

  METHODS get_string
    IMPORTING
      iv_path         TYPE string
    RETURNING
      VALUE(rv_value) TYPE string.

  METHODS slice
    IMPORTING
      iv_path        TYPE string
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson.

  METHODS to_abap
    IMPORTING
      iv_corresponding TYPE abap_bool DEFAULT abap_false
    EXPORTING
      ev_container     TYPE any
    RAISING
      z2ui5_cx_ajson_error.

  METHODS array_to_string_table
    IMPORTING
      iv_path                TYPE string
    RETURNING
      VALUE(rt_string_table) TYPE string_table
    RAISING
      z2ui5_cx_ajson_error.

  " METHODS ex.writer

  METHODS clear
    RAISING
      z2ui5_cx_ajson_error.

  METHODS set
    IMPORTING
      iv_path         TYPE string
      iv_val          TYPE any
      iv_ignore_empty TYPE abap_bool DEFAULT abap_true
      iv_node_type    TYPE z2ui5_if_ajson_types=>ty_node_type OPTIONAL
    RETURNING
      VALUE(ri_json)  TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.

  METHODS setx
    IMPORTING
      iv_param       TYPE string
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.

  METHODS set_boolean
    IMPORTING
      iv_path        TYPE string
      iv_val         TYPE any
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.

  METHODS set_string
    IMPORTING
      iv_path        TYPE string
      iv_val         TYPE clike
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.

  METHODS set_integer
    IMPORTING
      iv_path        TYPE string
      iv_val         TYPE i
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.

  METHODS set_date
    IMPORTING
      iv_path        TYPE string
      iv_val         TYPE d
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.

  METHODS set_timestamp
    IMPORTING
      iv_path        TYPE string
      iv_val         TYPE timestamp
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.

  METHODS set_null
    IMPORTING
      iv_path        TYPE string
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.

  METHODS delete
    IMPORTING
      iv_path        TYPE string
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.

  METHODS touch_array
    IMPORTING
      iv_path        TYPE string
      iv_clear       TYPE abap_bool DEFAULT abap_false
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.

  METHODS push
    IMPORTING
      iv_path        TYPE string
      iv_val         TYPE any
    RETURNING
      VALUE(ri_json) TYPE REF TO z2ui5_if_ajson
    RAISING
      z2ui5_cx_ajson_error.

  METHODS stringify
    IMPORTING
      iv_indent      TYPE i DEFAULT 0
    RETURNING
      VALUE(rv_json) TYPE string
    RAISING
      z2ui5_cx_ajson_error.

ENDINTERFACE.

INTERFACE z2ui5_if_ajson_filter.

  TYPES ty_filter_tab TYPE STANDARD TABLE OF REF TO z2ui5_if_ajson_filter WITH KEY table_line.
  TYPES ty_visit_type TYPE i.

  CONSTANTS:
    BEGIN OF visit_type,
      value TYPE ty_visit_type VALUE 0,
      open  TYPE ty_visit_type VALUE 1,
      close TYPE ty_visit_type VALUE 2,
    END OF visit_type.

  METHODS keep_node
    IMPORTING
      is_node        TYPE z2ui5_if_ajson_types=>ty_node
      iv_visit       TYPE ty_visit_type DEFAULT visit_type-value
    RETURNING
      VALUE(rv_keep) TYPE abap_bool
    RAISING
      z2ui5_cx_ajson_error.

ENDINTERFACE.

INTERFACE z2ui5_if_ajson_mapping.

  TYPES:
    BEGIN OF ty_mapping_field, " deprecated, will be removed
      abap TYPE string,
      json TYPE string,
    END OF ty_mapping_field,
    ty_mapping_fields TYPE STANDARD TABLE OF ty_mapping_field
      WITH UNIQUE SORTED KEY abap COMPONENTS abap
      WITH UNIQUE SORTED KEY json COMPONENTS json.

  TYPES:
    BEGIN OF ty_rename,
      from TYPE string,
      to   TYPE string,
    END OF ty_rename,
    tty_rename_map TYPE STANDARD TABLE OF ty_rename
      WITH UNIQUE SORTED KEY by_name COMPONENTS from.

  TYPES:
    ty_table_of TYPE STANDARD TABLE OF REF TO z2ui5_if_ajson_mapping.

  METHODS to_abap " deprecated, will be removed
    IMPORTING
      !iv_path         TYPE string
      !iv_name         TYPE string
    RETURNING
      VALUE(rv_result) TYPE string.

  METHODS to_json " deprecated, will be removed
    IMPORTING
      !iv_path         TYPE string
      !iv_name         TYPE string
    RETURNING
      VALUE(rv_result) TYPE string.

  METHODS rename_node
    IMPORTING
      !is_node TYPE z2ui5_if_ajson_types=>ty_node
    CHANGING
      !cv_name TYPE z2ui5_if_ajson_types=>ty_node-name.

ENDINTERFACE.

INTERFACE z2ui5_if_app.
  INTERFACES if_serializable_object.

  CONSTANTS version TYPE string VALUE '1.138.0'.
  CONSTANTS origin  TYPE string VALUE 'https://github.com/abap2UI5/abap2UI5'.
  CONSTANTS author  TYPE string VALUE 'https://github.com/oblomov-dev'.
  CONSTANTS license TYPE string VALUE 'MIT'.

  DATA id_draft          TYPE string.
  DATA id_app            TYPE string.
  DATA check_initialized TYPE abap_bool.
  DATA check_sticky      TYPE abap_bool.

  METHODS main
    IMPORTING
      !client TYPE REF TO z2ui5_if_client.

ENDINTERFACE.



INTERFACE z2ui5_if_types.

  TYPES:
    BEGIN OF ty_s_name_value,
      n TYPE string,
      v TYPE string,
    END OF ty_s_name_value.
  TYPES ty_t_name_value TYPE STANDARD TABLE OF ty_s_name_value WITH EMPTY KEY.

  TYPES:
    BEGIN OF ty_s_http_config,
      src                     TYPE string,
      theme                   TYPE string,
      content_security_policy TYPE string,
      styles_css              TYPE string,
      title                   TYPE string,
      t_add_config            TYPE ty_t_name_value,
      custom_js               TYPE string,
    END OF ty_s_http_config.

  TYPES:
    BEGIN OF ty_s_draft,
      id                TYPE string,
      id_prev           TYPE string,
      id_prev_app       TYPE string,
      id_prev_app_stack TYPE string,
    END OF ty_s_draft.

  TYPES:
    BEGIN OF ty_s_config,
      origin           TYPE string,
      pathname         TYPE string,
      search           TYPE string,
      hash             TYPE string,
      t_startup_params TYPE ty_t_name_value,
    END OF ty_s_config.

  TYPES:
    BEGIN OF ty_s_get,
      event                  TYPE string,
      t_event_arg            TYPE string_table,
      check_launchpad_active TYPE abap_bool,
      check_on_navigated     TYPE abap_bool,
      viewname               TYPE string,
      s_draft                TYPE ty_s_draft,
      s_config               TYPE ty_s_config,
      t_comp_params          TYPE ty_t_name_value,
      r_event_data           TYPE REF TO data,
    END OF ty_s_get.

  TYPES:
    BEGIN OF ty_s_event_control,
      check_allow_multi_req TYPE abap_bool,
    END OF ty_s_event_control.

ENDINTERFACE.





INTERFACE z2ui5_if_core_types.

  CONSTANTS:
    BEGIN OF cs_ui5,
      event_backend_function  TYPE string VALUE `.eB`,
      event_frontend_function TYPE string VALUE `.eF`,
      two_way_model           TYPE string VALUE `XX`,
    END OF cs_ui5.

  CONSTANTS:
    BEGIN OF cs_bind_type,
      one_way  TYPE string VALUE `ONE_WAY`,
      two_way  TYPE string VALUE `TWO_WAY`,
      one_time TYPE string VALUE `ONE_TIME`,
    END OF cs_bind_type.

  TYPES:
    BEGIN OF ty_s_http_req,
      method TYPE string,
      body   TYPE string,
    END OF ty_s_http_req.

  TYPES:
    BEGIN OF ty_s_http_res,
      body          TYPE string,
      status_code   TYPE i,
      status_reason TYPE string,
      t_header      TYPE z2ui5_if_types=>ty_t_name_value,
      BEGIN OF s_stateful,
        active   TYPE i,
        switched TYPE abap_bool,
      END OF s_stateful,
    END OF ty_s_http_res.

  TYPES:
    BEGIN OF ty_s_bind_config,
      path_only            TYPE abap_bool,
      view                 TYPE string,
      custom_mapper        TYPE REF TO z2ui5_if_ajson_mapping,
      custom_mapper_back   TYPE REF TO z2ui5_if_ajson_mapping,
      custom_filter        TYPE REF TO z2ui5_if_ajson_filter,
      custom_filter_back   TYPE REF TO z2ui5_if_ajson_filter,
      tab                  TYPE REF TO data,
      tab_index            TYPE i,
      switch_default_model TYPE abap_bool,
    END OF ty_s_bind_config.

  TYPES:
    BEGIN OF ty_s_attri,
      name               TYPE string,
      name_client        TYPE string,
      bind_type          TYPE string,
      srtti_data         TYPE string,
      check_dissolved    TYPE abap_bool,
      view               TYPE string,
      json_bind_local    TYPE REF TO z2ui5_if_ajson,
      custom_filter      TYPE REF TO z2ui5_if_ajson_filter,
      custom_filter_back TYPE REF TO z2ui5_if_ajson_filter,
      custom_mapper      TYPE REF TO z2ui5_if_ajson_mapping,
      custom_mapper_back TYPE REF TO z2ui5_if_ajson_mapping,
      r_ref              TYPE REF TO data,
      o_typedescr        TYPE REF TO cl_abap_typedescr,
    END OF ty_s_attri.
  TYPES ty_t_attri TYPE SORTED TABLE OF ty_s_attri WITH UNIQUE KEY name.

  TYPES:
    BEGIN OF ty_s_next_frontend,
      BEGIN OF s_view,
        xml                       TYPE string,
        switchDefaultModelAnnoURI TYPE string,
        switch_default_model_path TYPE string,
        check_destroy             TYPE abap_bool,
        check_update_model        TYPE abap_bool,
      END OF s_view,
      BEGIN OF s_view_nest,
        xml                TYPE string,
        id                 TYPE string,
        method_insert      TYPE string,
        method_destroy     TYPE string,
        check_destroy      TYPE abap_bool,
        check_update_model TYPE abap_bool,
      END OF s_view_nest,
      BEGIN OF s_view_nest2,
        xml                TYPE string,
        id                 TYPE string,
        method_insert      TYPE string,
        method_destroy     TYPE string,
        check_destroy      TYPE abap_bool,
        check_update_model TYPE abap_bool,
      END OF s_view_nest2,
      BEGIN OF s_popup,
        xml                TYPE string,
        id                 TYPE string,
        check_destroy      TYPE abap_bool,
        check_update_model TYPE abap_bool,
      END OF s_popup,
      BEGIN OF s_popover,
        xml                TYPE string,
        id                 TYPE string,
        open_by_id         TYPE string,
        check_destroy      TYPE abap_bool,
        check_update_model TYPE abap_bool,
      END OF s_popover,
      BEGIN OF s_msg_box,
        type              TYPE string,
        text              TYPE string,
        title             TYPE string,
        styleclass        TYPE string,
        onclose           TYPE string,
        actions           TYPE string_table,
        emphasizedaction  TYPE string,
        initialfocus      TYPE string,
        textdirection     TYPE string,
        icon              TYPE string,
        details           TYPE string,
        closeonnavigation TYPE string,
      END OF s_msg_box,
      BEGIN OF s_msg_toast,
        class                    TYPE string,
        text                     TYPE string,
        duration                 TYPE string,
        width                    TYPE string,
        my                       TYPE string,
        at                       TYPE string,
        of                       TYPE string,
        offset                   TYPE string,
        collision                TYPE string,
        onclose                  TYPE string,
        autoclose                TYPE string,
        animationtimingfunction  TYPE string,
        animationduration        TYPE string,
        closeonbrowsernavigation TYPE string,
      END OF s_msg_toast,
      BEGIN OF s_follow_up_action,
        custom_js TYPE string_table,
      END OF s_follow_up_action,
*      handler_attrs TYPE ty_s_http_handler_attributes,
      set_app_state_active TYPE abap_bool,
      set_push_state       TYPE string,
      set_nav_back         TYPE abap_bool,
      s_stateful           TYPE ty_s_http_res-s_stateful,
    END OF ty_s_next_frontend.

  TYPES:
    BEGIN OF ty_s_next,
      o_app_call  TYPE REF TO z2ui5_if_app,
      o_app_leave TYPE REF TO z2ui5_if_app,
      s_set       TYPE ty_s_next_frontend,
      r_data      TYPE REF TO data,
    END OF ty_s_next.

  TYPES:
    BEGIN OF ty_s_response,
      BEGIN OF s_front,
        params    TYPE ty_s_next_frontend,
        id        TYPE string,
        app_start TYPE string,
        app       TYPE string,
      END OF s_front,
      model TYPE string,
    END OF ty_s_response.

  TYPES:
    BEGIN OF ty_s_request,
      o_model TYPE REF TO z2ui5_if_ajson,
      BEGIN OF s_front,
        id          TYPE string,
        view        TYPE string,
        t_event_arg TYPE string_table,
        event       TYPE string,
        o_comp_data TYPE REF TO z2ui5_if_ajson,
        origin      TYPE string,
        pathname    TYPE string,
        search      TYPE string,
        hash        TYPE string,
      END OF s_front,
      BEGIN OF s_control,
        check_launchpad TYPE abap_bool,
        app_start       TYPE string,
        app_start_draft TYPE string,
      END OF s_control,
    END OF ty_s_request.

  TYPES:
    BEGIN OF ty_s_draft,
      id                TYPE string,
      id_prev           TYPE string,
      id_prev_app       TYPE string,
      id_prev_app_stack TYPE string,
      app               TYPE REF TO z2ui5_if_app,
    END OF ty_s_draft.

  TYPES:
    BEGIN OF ty_s_config,
      origin           TYPE string,
      pathname         TYPE string,
      search           TYPE string,
      t_startup_params TYPE z2ui5_if_types=>ty_t_name_value,
    END OF ty_s_config.

  TYPES:
    BEGIN OF ty_s_actual,
      event              TYPE string,
      t_event_arg        TYPE string_table,
      check_on_navigated TYPE abap_bool,
      view               TYPE string,
      s_draft            TYPE ty_s_draft,
      s_config           TYPE ty_s_config,
      r_data             TYPE REF TO data,
    END OF ty_s_actual.

  TYPES ty_s_db TYPE z2ui5_t_99.

ENDINTERFACE.




INTERFACE z2ui5_if_client.

  CONSTANTS:
    BEGIN OF cs_event,
      popup_close               TYPE string VALUE `POPUP_CLOSE`,
      open_new_tab              TYPE string VALUE `OPEN_NEW_TAB`,
      popover_close             TYPE string VALUE `POPOVER_CLOSE`,
      location_reload           TYPE string VALUE `LOCATION_RELOAD`,
      nav_container_to          TYPE string VALUE `NAV_CONTAINER_TO`,
      nest_nav_container_to     TYPE string VALUE `NEST_NAV_CONTAINER_TO`,
      nest2_nav_container_to    TYPE string VALUE `NEST2_NAV_CONTAINER_TO`,
      cross_app_nav_to_ext      TYPE string VALUE `CROSS_APP_NAV_TO_EXT`,
      cross_app_nav_to_prev_app TYPE string VALUE `CROSS_APP_NAV_TO_PREV_APP`,
      popup_nav_container_to    TYPE string VALUE `POPUP_NAV_CONTAINER_TO`,
      popover_nav_container_to  TYPE string VALUE `POPOVER_NAV_CONTAINER_TO`,
      download_b64_file         TYPE string VALUE `DOWNLOAD_B64_FILE`,
      set_size_limit            TYPE string VALUE `SET_SIZE_LIMIT`,
      set_odata_model           TYPE string VALUE `SET_ODATA_MODEL`,
      urlhelper                 TYPE string VALUE `URLHELPER`,
      history_back              TYPE string VALUE `HISTORY_BACK`,
      clipboard_app_state       TYPE string VALUE `CLIPBOARD_APP_STATE`,
    END OF cs_event.

  CONSTANTS:
    BEGIN OF cs_view,
      main    TYPE string VALUE `MAIN`,
      nested  TYPE string VALUE `NEST`,
      nested2 TYPE string VALUE `NEST2`,
      popup   TYPE string VALUE `POPUP`,
      popover TYPE string VALUE `POPOVER`,
    END OF cs_view.

  METHODS view_destroy.

  METHODS view_display
    IMPORTING
      val                           TYPE clike
      switch_default_model_anno_uri TYPE string OPTIONAL
      switch_default_model_path     TYPE string OPTIONAL.

  METHODS view_model_update.

  METHODS set_session_stateful
    IMPORTING
      val TYPE abap_bool DEFAULT abap_true.

  METHODS set_app_state_active
    IMPORTING
      val TYPE abap_bool DEFAULT abap_true.

  METHODS set_push_state
    IMPORTING
      val TYPE string OPTIONAL.

  METHODS set_nav_back
    IMPORTING
      val TYPE abap_bool DEFAULT abap_true.

  METHODS nest_view_display
    IMPORTING
      val            TYPE clike
      !id            TYPE clike
      method_insert  TYPE clike
      method_destroy TYPE clike OPTIONAL.

  METHODS nest_view_destroy.
  METHODS nest_view_model_update.

  METHODS nest2_view_display
    IMPORTING
      val            TYPE clike
      !id            TYPE clike
      method_insert  TYPE clike
      method_destroy TYPE clike OPTIONAL.

  METHODS nest2_view_destroy.
  METHODS nest2_view_model_update.

  METHODS popup_display
    IMPORTING
      val TYPE clike.

  METHODS popup_model_update.

  METHODS popup_destroy.

  METHODS popover_model_update.

  METHODS popover_display
    IMPORTING
      !xml  TYPE clike
      by_id TYPE clike.

  METHODS popover_destroy.

  METHODS get
    RETURNING
      VALUE(result) TYPE z2ui5_if_types=>ty_s_get.

  METHODS get_event_arg
    IMPORTING
      v             TYPE i DEFAULT 1
    RETURNING
      VALUE(result) TYPE string.

  METHODS get_app
    IMPORTING
      !id           TYPE clike OPTIONAL
    RETURNING
      VALUE(result) TYPE REF TO z2ui5_if_app.

  METHODS nav_app_leave
    IMPORTING
      VALUE(app)    TYPE REF TO z2ui5_if_app OPTIONAL
    RETURNING
      VALUE(result) TYPE string.

  METHODS nav_app_call
    IMPORTING
      app           TYPE REF TO z2ui5_if_app
    RETURNING
      VALUE(result) TYPE string.

  METHODS message_box_display
    IMPORTING
      !text             TYPE any
      !type             TYPE clike        DEFAULT `information`
      !title            TYPE clike        OPTIONAL
      styleclass        TYPE clike        OPTIONAL
      onclose           TYPE clike        OPTIONAL
      actions           TYPE string_table OPTIONAL
      emphasizedaction  TYPE clike        OPTIONAL
      initialfocus      TYPE clike        OPTIONAL
      textdirection     TYPE clike        OPTIONAL
      !icon             TYPE clike        OPTIONAL
      details           TYPE clike        OPTIONAL
      closeonnavigation TYPE abap_bool    DEFAULT abap_true.

  METHODS message_toast_display
    IMPORTING
      !text                    TYPE clike
      !duration                TYPE clike     OPTIONAL
      !width                   TYPE clike     OPTIONAL
      my                       TYPE clike     OPTIONAL
      !at                      TYPE clike     OPTIONAL
      !of                      TYPE clike     OPTIONAL
      !offset                  TYPE clike     OPTIONAL
      collision                TYPE clike     OPTIONAL
      onclose                  TYPE clike     DEFAULT ``
      autoclose                TYPE abap_bool DEFAULT abap_true
      animationtimingfunction  TYPE clike     OPTIONAL
      animationduration        TYPE clike     OPTIONAL
      closeonbrowsernavigation TYPE abap_bool DEFAULT abap_true
      !class                   TYPE clike     OPTIONAL.

  METHODS _event
    IMPORTING
      val           TYPE clike                              OPTIONAL
      t_arg         TYPE string_table                       OPTIONAL
      s_ctrl        TYPE z2ui5_if_types=>ty_s_event_control OPTIONAL
      r_data        TYPE data                               OPTIONAL
        PREFERRED PARAMETER val
    RETURNING
      VALUE(result) TYPE string.

  METHODS _event_client
    IMPORTING
      val           TYPE clike
      t_arg         TYPE string_table OPTIONAL
    RETURNING
      VALUE(result) TYPE string.

  METHODS _bind
    IMPORTING
      val                  TYPE data
      !path                TYPE abap_bool                     DEFAULT abap_false
      custom_mapper        TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL
      custom_filter        TYPE REF TO z2ui5_if_ajson_filter  OPTIONAL
      !tab                 TYPE data                          OPTIONAL
      tab_index            TYPE i                             OPTIONAL
      switch_Default_Model TYPE abap_bool DEFAULT abap_false
    RETURNING
      VALUE(result)        TYPE string.

  METHODS _bind_edit
    IMPORTING
      val                  TYPE data
      !path                TYPE abap_bool                     DEFAULT abap_false
      view                 TYPE string                        DEFAULT z2ui5_if_client=>cs_view-main
      custom_mapper        TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL
      custom_mapper_back   TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL
      custom_filter        TYPE REF TO z2ui5_if_ajson_filter  OPTIONAL
      custom_filter_back   TYPE REF TO z2ui5_if_ajson_filter  OPTIONAL
      !tab                 TYPE data                          OPTIONAL
      tab_index            TYPE i                             OPTIONAL
      switch_default_model TYPE abap_bool DEFAULT abap_false
    RETURNING
      VALUE(result)        TYPE string.

  METHODS _bind_local
    IMPORTING
      val                  TYPE data
      !path                TYPE abap_bool                     DEFAULT abap_false
      custom_mapper        TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL
      custom_filter        TYPE REF TO z2ui5_if_ajson_filter  OPTIONAL
      switch_default_Model TYPE abap_bool DEFAULT abap_false
    RETURNING
      VALUE(result)        TYPE string.

  METHODS follow_up_action
    IMPORTING
      val TYPE string.

  METHODS check_on_init
    RETURNING
      VALUE(result) TYPE abap_bool.

  METHODS check_app_prev_stack
    RETURNING
      VALUE(result) TYPE abap_bool.

  METHODS check_on_navigated
    RETURNING
      VALUE(result) TYPE abap_bool.

  METHODS get_app_prev
    RETURNING
      VALUE(result) TYPE REF TO z2ui5_if_app.

ENDINTERFACE.


CLASS z2ui5_cl_ajson DEFINITION
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES z2ui5_if_ajson .

    ALIASES:
      is_empty FOR z2ui5_if_ajson~is_empty,
      exists FOR z2ui5_if_ajson~exists,
      members FOR z2ui5_if_ajson~members,
      get FOR z2ui5_if_ajson~get,
      get_boolean FOR z2ui5_if_ajson~get_boolean,
      get_integer FOR z2ui5_if_ajson~get_integer,
      get_number FOR z2ui5_if_ajson~get_number,
      get_date FOR z2ui5_if_ajson~get_date,
      get_timestamp FOR z2ui5_if_ajson~get_timestamp,
      get_string FOR z2ui5_if_ajson~get_string,
      slice FOR z2ui5_if_ajson~slice,
      to_abap FOR z2ui5_if_ajson~to_abap,
      array_to_string_table FOR z2ui5_if_ajson~array_to_string_table.

    ALIASES:
      clear FOR z2ui5_if_ajson~clear,
      set FOR z2ui5_if_ajson~set,
      setx FOR z2ui5_if_ajson~setx,
      set_boolean FOR z2ui5_if_ajson~set_boolean,
      set_string FOR z2ui5_if_ajson~set_string,
      set_integer FOR z2ui5_if_ajson~set_integer,
      set_date FOR z2ui5_if_ajson~set_date,
      set_timestamp FOR z2ui5_if_ajson~set_timestamp,
      set_null FOR z2ui5_if_ajson~set_null,
      delete FOR z2ui5_if_ajson~delete,
      touch_array FOR z2ui5_if_ajson~touch_array,
      push FOR z2ui5_if_ajson~push,
      stringify FOR z2ui5_if_ajson~stringify.

    ALIASES:
      clone FOR z2ui5_if_ajson~clone,
      filter FOR z2ui5_if_ajson~filter,
      map FOR z2ui5_if_ajson~map.

    ALIASES:
      mt_json_tree FOR z2ui5_if_ajson~mt_json_tree,
      keep_item_order FOR z2ui5_if_ajson~keep_item_order,
      format_datetime FOR z2ui5_if_ajson~format_datetime,
      to_abap_corresponding_only FOR z2ui5_if_ajson~to_abap_corresponding_only,
      freeze FOR z2ui5_if_ajson~freeze.

    CLASS-METHODS parse
      IMPORTING
        !iv_json            TYPE any
        !iv_freeze          TYPE abap_bool DEFAULT abap_false
        !ii_custom_mapping  TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL
        !iv_keep_item_order TYPE abap_bool DEFAULT abap_false
      RETURNING
        VALUE(ro_instance)  TYPE REF TO z2ui5_cl_ajson
      RAISING
        z2ui5_cx_ajson_error .

    CLASS-METHODS create_empty " Might be deprecated, prefer using new( ) or create object
      IMPORTING
        !ii_custom_mapping            TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL
        iv_keep_item_order            TYPE abap_bool DEFAULT abap_false
        iv_format_datetime            TYPE abap_bool DEFAULT abap_true
        iv_to_abap_corresponding_only TYPE abap_bool DEFAULT abap_false
      RETURNING
        VALUE(ro_instance)            TYPE REF TO z2ui5_cl_ajson.

    " Experimental ! May change
    CLASS-METHODS create_from " TODO, rename to 'from' ?
      IMPORTING
        !ii_source_json    TYPE REF TO z2ui5_if_ajson
        !ii_filter         TYPE REF TO z2ui5_if_ajson_filter OPTIONAL " Might be deprecated, use filter() instead
        !ii_mapper         TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL " Might be deprecated, use map() instead
      RETURNING
        VALUE(ro_instance) TYPE REF TO z2ui5_cl_ajson
      RAISING
        z2ui5_cx_ajson_error .

    METHODS constructor
      IMPORTING
        iv_keep_item_order            TYPE abap_bool DEFAULT abap_false
        iv_format_datetime            TYPE abap_bool DEFAULT abap_true
        iv_to_abap_corresponding_only TYPE abap_bool DEFAULT abap_false.
    CLASS-METHODS new
      IMPORTING
        iv_keep_item_order            TYPE abap_bool DEFAULT abap_false
        iv_format_datetime            TYPE abap_bool DEFAULT abap_true
        iv_to_abap_corresponding_only TYPE abap_bool DEFAULT abap_false
      RETURNING
        VALUE(ro_instance)            TYPE REF TO z2ui5_cl_ajson.

  PROTECTED SECTION.

  PRIVATE SECTION.

    CLASS-DATA go_float_regex TYPE REF TO cl_abap_regex.

    DATA ms_opts TYPE z2ui5_if_ajson=>ty_opts.
    DATA mi_custom_mapping TYPE REF TO z2ui5_if_ajson_mapping. " DEPRECATED, will be removed

    METHODS get_item
      IMPORTING
        iv_path        TYPE string
      RETURNING
        VALUE(rv_item) TYPE REF TO z2ui5_if_ajson_types=>ty_node.
    METHODS prove_path_exists
      IMPORTING
        iv_path            TYPE string
      RETURNING
        VALUE(rr_end_node) TYPE REF TO z2ui5_if_ajson_types=>ty_node
      RAISING
        z2ui5_cx_ajson_error.
    METHODS delete_subtree
      IMPORTING
        iv_path            TYPE string
        iv_name            TYPE string
        ir_parent          TYPE REF TO z2ui5_if_ajson_types=>ty_node OPTIONAL
      RETURNING
        VALUE(rs_top_node) TYPE z2ui5_if_ajson_types=>ty_node.
    METHODS read_only_watchdog
      RAISING
        z2ui5_cx_ajson_error.
ENDCLASS.
CLASS z2ui5_cl_ajson_filter_lib DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS create_empty_filter
      RETURNING
        VALUE(ri_filter) TYPE REF TO z2ui5_if_ajson_filter
      RAISING
        z2ui5_cx_ajson_error .
    CLASS-METHODS create_path_filter
      IMPORTING
        !it_skip_paths     TYPE string_table OPTIONAL
        !iv_skip_paths     TYPE string OPTIONAL
        !iv_pattern_search TYPE abap_bool DEFAULT abap_false
      RETURNING
        VALUE(ri_filter)   TYPE REF TO z2ui5_if_ajson_filter
      RAISING
        z2ui5_cx_ajson_error .
    CLASS-METHODS create_and_filter
      IMPORTING
        !it_filters      TYPE z2ui5_if_ajson_filter=>ty_filter_tab
      RETURNING
        VALUE(ri_filter) TYPE REF TO z2ui5_if_ajson_filter
      RAISING
        z2ui5_cx_ajson_error .

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS kHGwlQWxBzogSXFKnfTxWRsLzEdjUi DEFINITION DEFERRED.
CLASS kHGwlQWxBzogSXFKnfTxrCLylKulMM DEFINITION DEFERRED.
CLASS kHGwlQWxBzogSXFKnfTxoAlevhaDMg DEFINITION DEFERRED.
CLASS kHGwlQWxBzogSXFKnfTxYWDnXPYsQA DEFINITION DEFERRED.
CLASS kHGwlQWxBzogSXFKnfTxIaLFAtEmIg DEFINITION DEFERRED.
CLASS kHGwlQWxBzogSXFKnfTxayhtkOTSGN DEFINITION DEFERRED.
CLASS kHGwlQWxBzogSXFKnfTxcwrelrEIET DEFINITION DEFERRED.
CLASS kHGwlQWxBzogSXFKnfTxTFhfUGDgXz DEFINITION DEFERRED.
* renamed: z2ui5_cl_ajson_mapping :: lcl_mapping_fields
CLASS kHGwlQWxBzogSXFKnfTxTFhfUGDgXz DEFINITION.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_ajson_mapping.

    METHODS constructor
      IMPORTING
        it_mapping_fields TYPE z2ui5_if_ajson_mapping~ty_mapping_fields OPTIONAL.

  PROTECTED SECTION.

  PRIVATE SECTION.
    DATA mt_mapping_fields TYPE z2ui5_if_ajson_mapping~ty_mapping_fields.

ENDCLASS.

* renamed: z2ui5_cl_ajson_mapping :: lcl_rename
CLASS kHGwlQWxBzogSXFKnfTxcwrelrEIET DEFINITION.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_ajson_mapping.

    METHODS constructor
      IMPORTING
        it_rename_map TYPE z2ui5_if_ajson_mapping~tty_rename_map
        iv_rename_by  TYPE i.

  PROTECTED SECTION.

  PRIVATE SECTION.
    DATA mt_rename_map TYPE z2ui5_if_ajson_mapping~tty_rename_map.
    DATA mv_rename_by TYPE i.

ENDCLASS.

* renamed: z2ui5_cl_ajson_mapping :: lcl_mapping_to_upper
CLASS kHGwlQWxBzogSXFKnfTxayhtkOTSGN DEFINITION.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_ajson_mapping.

    METHODS constructor
      IMPORTING
        it_mapping_fields TYPE z2ui5_if_ajson_mapping~ty_mapping_fields OPTIONAL.

  PROTECTED SECTION.

  PRIVATE SECTION.
    DATA mi_mapping_fields TYPE REF TO z2ui5_if_ajson_mapping.

ENDCLASS.
* renamed: z2ui5_cl_ajson_mapping :: lcl_mapping_to_lower
CLASS kHGwlQWxBzogSXFKnfTxIaLFAtEmIg DEFINITION.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_ajson_mapping.

    METHODS constructor
      IMPORTING
        it_mapping_fields TYPE z2ui5_if_ajson_mapping~ty_mapping_fields OPTIONAL.

  PROTECTED SECTION.

  PRIVATE SECTION.
    DATA mi_mapping_fields TYPE REF TO z2ui5_if_ajson_mapping.

ENDCLASS.
* renamed: z2ui5_cl_ajson_mapping :: lcl_mapping_camel
CLASS kHGwlQWxBzogSXFKnfTxYWDnXPYsQA DEFINITION.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_ajson_mapping.

    METHODS constructor
      IMPORTING
        it_mapping_fields   TYPE z2ui5_if_ajson_mapping~ty_mapping_fields OPTIONAL
        iv_first_json_upper TYPE abap_bool DEFAULT abap_true.

  PROTECTED SECTION.

  PRIVATE SECTION.
    DATA mv_first_json_upper TYPE abap_bool.
    DATA mi_mapping_fields TYPE REF TO z2ui5_if_ajson_mapping.

ENDCLASS.

* renamed: z2ui5_cl_ajson_mapping :: lcl_compound_mapper
CLASS kHGwlQWxBzogSXFKnfTxoAlevhaDMg DEFINITION.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_ajson_mapping.

    METHODS constructor
      IMPORTING
        it_queue TYPE z2ui5_if_ajson_mapping=>ty_table_of.

  PROTECTED SECTION.

  PRIVATE SECTION.
    DATA mt_queue TYPE z2ui5_if_ajson_mapping=>ty_table_of.

ENDCLASS.

* renamed: z2ui5_cl_ajson_mapping :: lcl_to_snake
CLASS kHGwlQWxBzogSXFKnfTxrCLylKulMM DEFINITION.
  PUBLIC SECTION.
    INTERFACES z2ui5_if_ajson_mapping.
ENDCLASS.

* renamed: z2ui5_cl_ajson_mapping :: lcl_to_camel
CLASS kHGwlQWxBzogSXFKnfTxWRsLzEdjUi DEFINITION.
  PUBLIC SECTION.
    INTERFACES z2ui5_if_ajson_mapping.
    METHODS constructor
      IMPORTING
        iv_first_json_upper TYPE abap_bool.
  PRIVATE SECTION.
    DATA mv_first_json_upper TYPE abap_bool.
ENDCLASS.

CLASS z2ui5_cl_ajson_mapping DEFINITION
  FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    CONSTANTS:
      BEGIN OF rename_by,
        attr_name TYPE i VALUE 0,
        full_path TYPE i VALUE 1,
        pattern   TYPE i VALUE 2,
        " regex type i value 3, " TODO add if needed in future
      END OF rename_by.

    CLASS-METHODS create_camel_case " DEPRECATED
      IMPORTING
        it_mapping_fields   TYPE z2ui5_if_ajson_mapping=>ty_mapping_fields OPTIONAL
        iv_first_json_upper TYPE abap_bool DEFAULT abap_true
      RETURNING
        VALUE(ri_mapping)   TYPE REF TO z2ui5_if_ajson_mapping.

    CLASS-METHODS create_upper_case
      IMPORTING
        it_mapping_fields TYPE z2ui5_if_ajson_mapping=>ty_mapping_fields OPTIONAL
      RETURNING
        VALUE(ri_mapping) TYPE REF TO z2ui5_if_ajson_mapping.

    CLASS-METHODS create_lower_case
      IMPORTING
        it_mapping_fields TYPE z2ui5_if_ajson_mapping=>ty_mapping_fields OPTIONAL
      RETURNING
        VALUE(ri_mapping) TYPE REF TO z2ui5_if_ajson_mapping.

    CLASS-METHODS create_field_mapping " DEPRECATED
      IMPORTING
        it_mapping_fields TYPE z2ui5_if_ajson_mapping=>ty_mapping_fields
      RETURNING
        VALUE(ri_mapping) TYPE REF TO z2ui5_if_ajson_mapping.

    CLASS-METHODS create_rename
      IMPORTING
        it_rename_map     TYPE z2ui5_if_ajson_mapping=>tty_rename_map
        iv_rename_by      TYPE i DEFAULT rename_by-attr_name
      RETURNING
        VALUE(ri_mapping) TYPE REF TO z2ui5_if_ajson_mapping.

    CLASS-METHODS create_compound_mapper
      IMPORTING
        ii_mapper1        TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL
        ii_mapper2        TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL
        ii_mapper3        TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL
        it_more           TYPE z2ui5_if_ajson_mapping=>ty_table_of OPTIONAL
      RETURNING
        VALUE(ri_mapping) TYPE REF TO z2ui5_if_ajson_mapping.

    CLASS-METHODS create_to_snake_case
      RETURNING
        VALUE(ri_mapping) TYPE REF TO z2ui5_if_ajson_mapping.

    CLASS-METHODS create_to_camel_case
      IMPORTING
        iv_first_json_upper TYPE abap_bool DEFAULT abap_false
      RETURNING
        VALUE(ri_mapping)   TYPE REF TO z2ui5_if_ajson_mapping.

  PROTECTED SECTION.

  PRIVATE SECTION.

ENDCLASS.
CLASS z2ui5_cl_ajson_utilities DEFINITION
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS new
      RETURNING
        VALUE(ro_instance) TYPE REF TO z2ui5_cl_ajson_utilities.
    METHODS diff
      IMPORTING
        !iv_json_a            TYPE string OPTIONAL
        !iv_json_b            TYPE string OPTIONAL
        !io_json_a            TYPE REF TO z2ui5_if_ajson OPTIONAL
        !io_json_b            TYPE REF TO z2ui5_if_ajson OPTIONAL
        !iv_keep_empty_arrays TYPE abap_bool DEFAULT abap_false
      EXPORTING
        !eo_insert            TYPE REF TO z2ui5_if_ajson
        !eo_delete            TYPE REF TO z2ui5_if_ajson
        !eo_change            TYPE REF TO z2ui5_if_ajson
      RAISING
        z2ui5_cx_ajson_error .
    METHODS merge
      IMPORTING
        !iv_json_a            TYPE string OPTIONAL
        !iv_json_b            TYPE string OPTIONAL
        !io_json_a            TYPE REF TO z2ui5_if_ajson OPTIONAL
        !io_json_b            TYPE REF TO z2ui5_if_ajson OPTIONAL
        !iv_keep_empty_arrays TYPE abap_bool DEFAULT abap_false
      RETURNING
        VALUE(ro_json)        TYPE REF TO z2ui5_if_ajson
      RAISING
        z2ui5_cx_ajson_error .
    METHODS sort
      IMPORTING
        !iv_json         TYPE string OPTIONAL
        !io_json         TYPE REF TO z2ui5_if_ajson OPTIONAL
      RETURNING
        VALUE(rv_sorted) TYPE string
      RAISING
        z2ui5_cx_ajson_error .
    METHODS is_equal
      IMPORTING
        !iv_json_a    TYPE string OPTIONAL
        !iv_json_b    TYPE string OPTIONAL
        !ii_json_a    TYPE REF TO z2ui5_if_ajson OPTIONAL
        !ii_json_b    TYPE REF TO z2ui5_if_ajson OPTIONAL
      RETURNING
        VALUE(rv_yes) TYPE abap_bool
      RAISING
        z2ui5_cx_ajson_error .

  PROTECTED SECTION.

  PRIVATE SECTION.

    DATA mo_json_a TYPE REF TO z2ui5_if_ajson .
    DATA mo_json_b TYPE REF TO z2ui5_if_ajson .
    DATA mo_insert TYPE REF TO z2ui5_if_ajson .
    DATA mo_delete TYPE REF TO z2ui5_if_ajson .
    DATA mo_change TYPE REF TO z2ui5_if_ajson .

    METHODS normalize_input
      IMPORTING
        !iv_json       TYPE string OPTIONAL
        !io_json       TYPE REF TO z2ui5_if_ajson OPTIONAL
      RETURNING
        VALUE(ro_json) TYPE REF TO z2ui5_if_ajson
      RAISING
        z2ui5_cx_ajson_error .
    METHODS diff_a_b
      IMPORTING
        !iv_path TYPE string
      RAISING
        z2ui5_cx_ajson_error .
    METHODS diff_b_a
      IMPORTING
        !iv_path  TYPE string
        !iv_array TYPE abap_bool DEFAULT abap_false
      RAISING
        z2ui5_cx_ajson_error .
    METHODS delete_empty_nodes
      IMPORTING
        !io_json              TYPE REF TO z2ui5_if_ajson
        !iv_keep_empty_arrays TYPE abap_bool
      RAISING
        z2ui5_cx_ajson_error .
ENDCLASS.

CLASS z2ui5_cl_srt_typedescr DEFINITION
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES if_serializable_object.

    DATA absolute_name    LIKE cl_abap_typedescr=>absolute_name READ-ONLY.
    DATA type_kind        LIKE cl_abap_typedescr=>type_kind     READ-ONLY.
    DATA length           LIKE cl_abap_typedescr=>length        READ-ONLY.
    DATA decimals         LIKE cl_abap_typedescr=>decimals      READ-ONLY.
    DATA kind             LIKE cl_abap_typedescr=>kind          READ-ONLY.
    "! True if it's an object type which doesn't implement the interface IF_SERIALIZABLE_OBJECT
    DATA not_serializable TYPE abap_bool                        READ-ONLY.
    DATA is_ddic_type     TYPE abap_bool                        READ-ONLY.
    "! True if the absolute name is %_T...
    DATA technical_type   TYPE abap_bool                        READ-ONLY.

    METHODS constructor
      IMPORTING
        !rtti TYPE REF TO cl_abap_typedescr.
    METHODS get_rtti
      RETURNING
        VALUE(rtti) TYPE REF TO cl_abap_typedescr.
    CLASS-METHODS create_by_rtti
      IMPORTING
        !rtti        TYPE REF TO cl_abap_typedescr
      RETURNING
        VALUE(srtti) TYPE REF TO z2ui5_cl_srt_typedescr.
    CLASS-METHODS create_by_data_object
      IMPORTING
        !data_object TYPE any
      RETURNING
        VALUE(srtti) TYPE REF TO z2ui5_cl_srt_typedescr.
  PROTECTED SECTION.
  PRIVATE SECTION.

ENDCLASS.
"! <p class="shorttext synchronized" lang="en">Serializable RTTI data object</p>
CLASS z2ui5_cl_srt_datadescr DEFINITION
  INHERITING FROM z2ui5_cl_srt_typedescr
  CREATE PUBLIC .

  PUBLIC SECTION.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
"! <p class="shorttext synchronized" lang="en">Serializable RTTI complex type</p>
CLASS z2ui5_cl_srt_complexdescr DEFINITION
  INHERITING FROM z2ui5_cl_srt_datadescr
  CREATE PUBLIC .

  PUBLIC SECTION.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
"! <p class="shorttext synchronized" lang="en">Serializable RTTI elementary type</p>
CLASS z2ui5_cl_srt_elemdescr DEFINITION
  INHERITING FROM z2ui5_cl_srt_datadescr
  CREATE PUBLIC.

  PUBLIC SECTION.

    DATA edit_mask     LIKE cl_abap_elemdescr=>edit_mask.
    DATA help_id       LIKE cl_abap_elemdescr=>help_id.
    DATA output_length LIKE cl_abap_elemdescr=>output_length.

    METHODS constructor
      IMPORTING
        !rtti TYPE REF TO cl_abap_elemdescr.

    METHODS get_rtti
        REDEFINITION.
  PROTECTED SECTION.
    METHODS get_rtti_by_type_kind
      IMPORTING
        i_type_kind LIKE cl_abap_typedescr=>type_kind
      RETURNING
        VALUE(rtti) TYPE REF TO cl_abap_typedescr.
  PRIVATE SECTION.
ENDCLASS.
"! <p class="shorttext synchronized" lang="en">Serializable RTTI object type</p>
CLASS z2ui5_cl_srt_objectdescr DEFINITION
  INHERITING FROM z2ui5_cl_srt_typedescr
  CREATE PUBLIC .

  PUBLIC SECTION.

    DATA interfaces LIKE cl_abap_objectdescr=>interfaces .
    DATA types LIKE cl_abap_objectdescr=>types .
    DATA attributes LIKE cl_abap_objectdescr=>attributes .
    DATA methods LIKE cl_abap_objectdescr=>methods .
    DATA events LIKE cl_abap_objectdescr=>events .

    METHODS constructor
      IMPORTING
        !rtti TYPE REF TO cl_abap_objectdescr .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
"! <p class="shorttext synchronized" lang="en">Serializable RTTI class</p>
CLASS z2ui5_cl_srt_classdescr DEFINITION
  INHERITING FROM z2ui5_cl_srt_objectdescr
  CREATE PUBLIC.

  PUBLIC SECTION.

    DATA class_kind        LIKE cl_abap_classdescr=>class_kind.
    DATA create_visibility LIKE cl_abap_classdescr=>create_visibility.

    METHODS constructor
      IMPORTING
        !rtti TYPE REF TO cl_abap_classdescr.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
"! <p class="shorttext synchronized" lang="en">Serializable RTTI interface</p>
CLASS z2ui5_cl_srt_intfdescr DEFINITION
  INHERITING FROM z2ui5_cl_srt_objectdescr
  CREATE PUBLIC.

  PUBLIC SECTION.

    DATA intf_kind LIKE cl_abap_intfdescr=>intf_kind.

    METHODS constructor
      IMPORTING
        !rtti TYPE REF TO cl_abap_intfdescr.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
"! <p class="shorttext synchronized" lang="en">Serializable RTTI reference</p>
CLASS z2ui5_cl_srt_refdescr DEFINITION
  INHERITING FROM z2ui5_cl_srt_datadescr
  CREATE PUBLIC.

  PUBLIC SECTION.

    DATA referenced_type TYPE REF TO z2ui5_cl_srt_typedescr.

    METHODS constructor
      IMPORTING
        !rtti TYPE REF TO cl_abap_refdescr.

    METHODS get_rtti
        REDEFINITION.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
"! <p class="shorttext synchronized" lang="en">Serializable RTTI structure</p>
CLASS z2ui5_cl_srt_structdescr DEFINITION
  INHERITING FROM z2ui5_cl_srt_complexdescr
  CREATE PUBLIC.

  PUBLIC SECTION.

    TYPES:
      BEGIN OF sabap_componentdescr,
        name       TYPE string,
        type       TYPE REF TO z2ui5_cl_srt_datadescr,
        as_include TYPE abap_bool,
        suffix     TYPE string,
      END OF sabap_componentdescr.
    TYPES sabap_component_tab TYPE STANDARD TABLE OF sabap_componentdescr WITH DEFAULT KEY.

    DATA struct_kind LIKE cl_abap_structdescr=>struct_kind READ-ONLY.
    DATA components  TYPE sabap_component_tab              READ-ONLY.
    DATA has_include LIKE cl_abap_structdescr=>has_include READ-ONLY.

    METHODS constructor
      IMPORTING
        !rtti TYPE REF TO cl_abap_structdescr.

    METHODS get_rtti
        REDEFINITION.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
"! <p class="shorttext synchronized" lang="en">Serializable RTTI table</p>
CLASS z2ui5_cl_srt_tabledescr DEFINITION
  INHERITING FROM z2ui5_cl_srt_complexdescr
  CREATE PUBLIC.

  PUBLIC SECTION.

    DATA key            LIKE cl_abap_tabledescr=>key.
    DATA initial_size   LIKE cl_abap_tabledescr=>initial_size.
    DATA key_defkind    LIKE cl_abap_tabledescr=>key_defkind.
    DATA has_unique_key LIKE cl_abap_tabledescr=>has_unique_key.
    DATA table_kind     LIKE cl_abap_tabledescr=>table_kind.
    DATA line_type      TYPE REF TO z2ui5_cl_srt_datadescr.

    METHODS constructor
      IMPORTING
        !rtti TYPE REF TO cl_abap_tabledescr.

    METHODS get_rtti
        REDEFINITION.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cx_srt DEFINITION
  INHERITING FROM cx_no_check
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES if_t100_message .

    METHODS constructor
      IMPORTING
        !textid   LIKE if_t100_message=>t100key OPTIONAL
        !previous LIKE previous OPTIONAL .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_util_abap DEFINITION
  CREATE PUBLIC.

  PUBLIC SECTION.

    " abap-api - Serving a Release & Version Independent ABAP Layer
    " version: '0.0.1'.
    " origin: https://github.com/oblomov-dev/abap-api
    " author: https://github.com/oblomov-dev
    " license: MIT.

    TYPES:
      BEGIN OF ty_s_fix_val,
        low   TYPE string,
        high  TYPE string,
        descr TYPE string,
      END OF ty_s_fix_val.
    TYPES ty_t_fix_val TYPE STANDARD TABLE OF ty_s_fix_val WITH DEFAULT KEY.

    TYPES:
      BEGIN OF ty_s_dfies,
        tabname     TYPE c LENGTH 30,
        fieldname   TYPE c LENGTH 30,
        langu       TYPE string,
        position    TYPE n LENGTH 4,
        offset      TYPE n LENGTH 6,
        domname     TYPE c LENGTH 30,
        rollname    TYPE c LENGTH 30,
        checktable  TYPE c LENGTH 30,
        leng        TYPE n LENGTH 6,
        intlen      TYPE n LENGTH 6,
        outputlen   TYPE n LENGTH 6,
        decimals    TYPE n LENGTH 6,
        datatype    TYPE c LENGTH 4,
        inttype     TYPE c LENGTH 1,
        reftable    TYPE c LENGTH 30,
        reffield    TYPE c LENGTH 30,
        precfield   TYPE c LENGTH 30,
        authorid    TYPE c LENGTH 3,
        memoryid    TYPE c LENGTH 20,
        logflag     TYPE c LENGTH 1,
        mask        TYPE c LENGTH 20,
        masklen     TYPE n LENGTH 4,
        convexit    TYPE c LENGTH 5,
        headlen     TYPE n LENGTH 2,
        scrlen1     TYPE n LENGTH 2,
        scrlen2     TYPE n LENGTH 2,
        scrlen3     TYPE n LENGTH 2,
        fieldtext   TYPE c LENGTH 60,
        reptext     TYPE c LENGTH 55,
        scrtext_s   TYPE c LENGTH 10,
        scrtext_m   TYPE c LENGTH 20,
        scrtext_l   TYPE c LENGTH 40,
        keyflag     TYPE c LENGTH 1,
        lowercase   TYPE c LENGTH 1,
        mac         TYPE c LENGTH 1,
        genkey      TYPE c LENGTH 1,
        noforkey    TYPE c LENGTH 1,
        valexi      TYPE c LENGTH 1,
        noauthch    TYPE c LENGTH 1,
        sign        TYPE c LENGTH 1,
        dynpfld     TYPE c LENGTH 1,
        f4availabl  TYPE c LENGTH 1,
        comptype    TYPE c LENGTH 1,
        lfieldname  TYPE c LENGTH 132,
        ltrflddis   TYPE c LENGTH 1,
        bidictrlc   TYPE c LENGTH 1,
        outputstyle TYPE n LENGTH 2,
        nohistory   TYPE c LENGTH 1,
        ampmformat  TYPE c LENGTH 1,
      END OF ty_s_dfies,
      ty_t_dfies TYPE STANDARD TABLE OF ty_s_dfies WITH DEFAULT KEY.

    TYPES:
      BEGIN OF ty_s_data_element_text,
        header TYPE string,
        short  TYPE string,
        medium TYPE string,
        long   TYPE string,
      END OF ty_s_data_element_text.

    TYPES:
      BEGIN OF ty_s_class_descr,
        classname   TYPE string,
        description TYPE string,
      END OF ty_s_class_descr.
    TYPES ty_t_classes TYPE STANDARD TABLE OF ty_s_class_descr WITH NON-UNIQUE DEFAULT KEY.

    CLASS-METHODS context_check_abap_cloud
      RETURNING
        VALUE(result) TYPE abap_bool.

    CLASS-METHODS source_get_method
      IMPORTING
        iv_classname  TYPE clike
        iv_methodname TYPE clike
      RETURNING
        VALUE(result) TYPE string_table.

    CLASS-METHODS uuid_get_c32
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS uuid_get_c22
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS rtti_get_data_element_texts
      IMPORTING
        i_data_element_name TYPE string
      RETURNING
        VALUE(result)       TYPE ty_s_data_element_text.

    CLASS-METHODS conv_decode_x_base64
      IMPORTING
        val           TYPE string
      RETURNING
        VALUE(result) TYPE xstring.

    CLASS-METHODS conv_encode_x_base64
      IMPORTING
        val           TYPE xstring
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS conv_get_string_by_xstring
      IMPORTING
        val           TYPE xstring
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS conv_get_xstring_by_string
      IMPORTING
        val           TYPE string
      RETURNING
        VALUE(result) TYPE xstring.

    CLASS-METHODS rtti_get_classes_impl_intf
      IMPORTING
        val           TYPE clike
      RETURNING
        VALUE(result) TYPE ty_t_classes.

    CLASS-METHODS rtti_get_t_dfies_by_table_name
      IMPORTING
        table_name    TYPE string
      RETURNING
        VALUE(result) TYPE ty_t_dfies.

    CLASS-METHODS rtti_get_t_fixvalues
      IMPORTING
        elemdescr     TYPE REF TO cl_abap_elemdescr
        langu         TYPE clike
      RETURNING
        VALUE(result) TYPE ty_t_fix_val.

  PROTECTED SECTION.

    CLASS-METHODS rtti_get_class_descr_on_cloud
      IMPORTING
        i_classname   TYPE clike
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS rtti_get_t_attri_on_prem
      IMPORTING
        tabname       TYPE string
      RETURNING
        VALUE(result) TYPE ty_t_dfies.

    CLASS-METHODS rtti_get_t_attri_on_cloud
      IMPORTING
        tabname       TYPE string
      RETURNING
        VALUE(result) TYPE ty_t_dfies ##NEEDED.

  PRIVATE SECTION.

ENDCLASS.
CLASS z2ui5_cl_util DEFINITION
  INHERITING FROM z2ui5_cl_util_abap
  CREATE PUBLIC.

  PUBLIC SECTION.

    " abap-toolkit - Utility Functions for ABAP Cloud & Standard ABAP
    " version: '0.0.1'.
    " origin: https://github.com/oblomov-dev/abap-toolkit
    " author: https://github.com/oblomov-dev
    " license: MIT.

    TYPES:
      BEGIN OF ty_s_name_value,
        n TYPE string,
        v TYPE string,
      END OF ty_s_name_value.
    TYPES ty_t_name_value TYPE STANDARD TABLE OF ty_s_name_value WITH EMPTY KEY.

    TYPES:
      BEGIN OF ty_s_token,
        key      TYPE string,
        text     TYPE string,
        visible  TYPE abap_bool,
        selkz    TYPE abap_bool,
        editable TYPE abap_bool,
      END OF ty_s_token.
    TYPES ty_t_token TYPE STANDARD TABLE OF ty_s_token WITH EMPTY KEY.

    TYPES:
      BEGIN OF ty_s_range,
        sign   TYPE c LENGTH 1,
        option TYPE c LENGTH 2,
        low    TYPE string,
        high   TYPE string,
      END OF ty_s_range.
    TYPES ty_t_range TYPE STANDARD TABLE OF ty_s_range WITH EMPTY KEY.

    TYPES:
      BEGIN OF ty_s_filter_multi,
        name            TYPE string,
        t_range         TYPE ty_t_range,
        t_token         TYPE ty_t_token,
        t_token_added   TYPE ty_t_token,
        t_token_removed TYPE ty_t_token,
      END OF ty_s_filter_multi.
    TYPES ty_t_filter_multi TYPE STANDARD TABLE OF ty_s_filter_multi WITH EMPTY KEY.

    TYPES:
      BEGIN OF ty_s_sql,
        tabname        TYPE string,
        check_autoload TYPE abap_bool,
        layout_name    TYPE string,
        layout_id      TYPE string,
        count          TYPE i,
        t_ref          TYPE REF TO data,
        where          TYPE string,
        t_filter       TYPE ty_t_filter_multi,
      END OF ty_s_sql.

    TYPES:
      BEGIN OF ty_s_msg,
        text       TYPE string,
        id         TYPE string,
        no         TYPE string,
        type       TYPE string,
        v1         TYPE string,
        v2         TYPE string,
        v3         TYPE string,
        v4         TYPE string,
        timestampl TYPE timestampl,
      END OF ty_s_msg,
      ty_t_msg TYPE STANDARD TABLE OF ty_s_msg WITH EMPTY KEY.

    CLASS-METHODS ui5_get_msg_type
      IMPORTING
        val           TYPE clike
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS msg_get
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE ty_t_msg.

    CLASS-METHODS rtti_get_t_attri_by_include
      IMPORTING
        !type         TYPE REF TO cl_abap_datadescr
      RETURNING
        VALUE(result) TYPE abap_component_tab.

    CLASS-METHODS rtti_get_t_ddic_fixed_values
      IMPORTING
        rollname      TYPE clike
        langu         TYPE clike DEFAULT sy-langu
      RETURNING
        VALUE(result) TYPE z2ui5_cl_util_abap=>ty_t_fix_val ##NEEDED.

    CLASS-METHODS source_get_method2
      IMPORTING
        iv_classname  TYPE clike
        iv_methodname TYPE clike
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS check_bound_a_not_inital
      IMPORTING
        val           TYPE REF TO data
      RETURNING
        VALUE(result) TYPE abap_bool.

    CLASS-METHODS check_unassign_inital
      IMPORTING
        val           TYPE REF TO data
      RETURNING
        VALUE(result) TYPE abap_bool.

    CLASS-METHODS unassign_object
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE REF TO object.

    CLASS-METHODS unassign_data
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE REF TO data.

    CLASS-METHODS conv_get_as_data_ref
      IMPORTING
        val           TYPE data
      RETURNING
        VALUE(result) TYPE REF TO data.

    CLASS-METHODS source_method_to_file
      IMPORTING
        it_source     TYPE string_table
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS itab_get_itab_by_csv
      IMPORTING
        val           TYPE string
      RETURNING
        VALUE(result) TYPE REF TO data.

    CLASS-METHODS itab_get_csv_by_itab
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS filter_itab
      IMPORTING
        !filter TYPE ty_t_filter_multi
      CHANGING
        val     TYPE STANDARD TABLE.

    CLASS-METHODS filter_get_multi_by_data
      IMPORTING
        val           TYPE data
      RETURNING
        VALUE(result) TYPE ty_t_filter_multi.

    CLASS-METHODS filter_get_data_by_multi
      IMPORTING
        val           TYPE ty_t_filter_multi
      RETURNING
        VALUE(result) TYPE ty_t_filter_multi.

    CLASS-METHODS filter_get_sql_where
      IMPORTING
        val           TYPE  z2ui5_cl_util=>ty_t_filter_multi
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS filter_get_sql_by_sql_string
      IMPORTING
        val           TYPE clike
      RETURNING
        VALUE(result) TYPE ty_s_sql.

    CLASS-METHODS url_param_get
      IMPORTING
        val           TYPE string
        url           TYPE string
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS url_param_create_url
      IMPORTING
        t_params      TYPE ty_t_name_value
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS url_param_set
      IMPORTING
        url           TYPE string
        !name         TYPE string
        !value        TYPE string
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS rtti_get_classname_by_ref
      IMPORTING
        !in           TYPE REF TO object
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS rtti_get_intfname_by_ref
      IMPORTING
        !in           TYPE any
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS x_get_last_t100
      IMPORTING
        val           TYPE REF TO cx_root
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS x_check_raise
      IMPORTING
        v     TYPE clike DEFAULT `CX_SY_SUBRC`
        !when TYPE xfeld.

    CLASS-METHODS x_raise
      IMPORTING
        v TYPE clike DEFAULT `CX_SY_SUBRC`
          PREFERRED PARAMETER v.

    CLASS-METHODS context_get_user_tech
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS json_stringify
      IMPORTING
        !any          TYPE any
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS xml_parse
      IMPORTING
        !xml TYPE clike
      EXPORTING
        !any TYPE any.

    CLASS-METHODS xml_stringify
      IMPORTING
        !any          TYPE any
      RETURNING
        VALUE(result) TYPE string
      RAISING
        cx_xslt_serialization_error.

    CLASS-METHODS boolean_check_by_data
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE abap_bool.

    CLASS-METHODS boolean_abap_2_json
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS json_parse
      IMPORTING
        val   TYPE any
      CHANGING
        !data TYPE any.

    CLASS-METHODS c_trim_upper
      IMPORTING
        val           TYPE clike
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS xml_srtti_stringify
      IMPORTING
        !data         TYPE any
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS xml_srtti_parse
      IMPORTING
        rtti_data     TYPE clike
      RETURNING
        VALUE(result) TYPE REF TO data.

    CLASS-METHODS time_get_timestampl
      RETURNING
        VALUE(result) TYPE timestampl.

    CLASS-METHODS time_substract_seconds
      IMPORTING
        !time         TYPE timestampl
        !seconds      TYPE i
      RETURNING
        VALUE(result) TYPE timestampl.

    CLASS-METHODS c_trim
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS c_trim_lower
      IMPORTING
        val           TYPE clike
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS url_param_get_tab
      IMPORTING
        i_val            TYPE clike
      RETURNING
        VALUE(rt_params) TYPE ty_t_name_value.

    CLASS-METHODS rtti_get_t_attri_by_oref
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE abap_attrdescr_tab.

    CLASS-METHODS rtti_get_t_attri_by_any
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE cl_abap_structdescr=>component_table.

    CLASS-METHODS rtti_get_t_attri_by_table_name
      IMPORTING
        table_name    TYPE any
      RETURNING
        VALUE(result) TYPE cl_abap_structdescr=>component_table.

    CLASS-METHODS rtti_get_type_name
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS rtti_check_class_exists
      IMPORTING
        val           TYPE clike
      RETURNING
        VALUE(result) TYPE abap_bool.

    CLASS-METHODS rtti_check_type_kind_dref
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE abap_bool.

    CLASS-METHODS rtti_get_type_kind
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS rtti_check_ref_data
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE abap_bool.

    CLASS-METHODS boolean_check_by_name
      IMPORTING
        val           TYPE string
      RETURNING
        VALUE(result) TYPE abap_bool.

    CLASS-METHODS filter_update_tokens
      IMPORTING
        val           TYPE ty_t_filter_multi
        !name         TYPE string
      RETURNING
        VALUE(result) TYPE ty_t_filter_multi.

    CLASS-METHODS filter_get_range_t_by_token_t
      IMPORTING
        val           TYPE ty_t_token
      RETURNING
        VALUE(result) TYPE ty_t_range.

    CLASS-METHODS filter_get_range_by_token
      IMPORTING
        VALUE(value)  TYPE string
      RETURNING
        VALUE(result) TYPE ty_s_range.

    CLASS-METHODS filter_get_token_t_by_range_t
      IMPORTING
        val           TYPE ANY TABLE
      RETURNING
        VALUE(result) TYPE ty_t_token ##NEEDED.

    CLASS-METHODS filter_get_token_range_mapping
      RETURNING
        VALUE(result) TYPE ty_t_name_value.

    CLASS-METHODS itab_corresponding
      IMPORTING
        val  TYPE STANDARD TABLE
      CHANGING
        !tab TYPE STANDARD TABLE.

    CLASS-METHODS itab_filter_by_val
      IMPORTING
        val  TYPE clike
      CHANGING
        !tab TYPE STANDARD TABLE.

    CLASS-METHODS itab_filter_by_t_range
      IMPORTING
        val  TYPE ty_t_filter_multi
      CHANGING
        !tab TYPE STANDARD TABLE.

    CLASS-METHODS time_get_time_by_stampl
      IMPORTING
        val           TYPE timestampl
      RETURNING
        VALUE(result) TYPE t.

    CLASS-METHODS time_get_date_by_stampl
      IMPORTING
        val           TYPE timestampl
      RETURNING
        VALUE(result) TYPE d.

    CLASS-METHODS conv_copy_ref_data
      IMPORTING
        !from         TYPE any
      RETURNING
        VALUE(result) TYPE REF TO data.

    CLASS-METHODS source_get_file_types
      RETURNING
        VALUE(result) TYPE string_table.

    CLASS-METHODS rtti_tab_get_relative_name
      IMPORTING
        !table        TYPE any
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS rtti_check_clike
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE abap_bool.

  PROTECTED SECTION.

  PRIVATE SECTION.

ENDCLASS.
CLASS z2ui5_cl_util_abap_http DEFINITION.

  PUBLIC SECTION.

    CLASS-METHODS factory
      IMPORTING
        server        TYPE REF TO object
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_util_abap_http.

    CLASS-METHODS factory_cloud
      IMPORTING
        req           TYPE REF TO object
        res           TYPE REF TO object
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_util_abap_http.

    METHODS get_header_field
      IMPORTING
        val           TYPE clike
      RETURNING
        VALUE(result) TYPE string.

    METHODS get_cdata
      RETURNING
        VALUE(result) TYPE string.

    METHODS get_method
      RETURNING
        VALUE(result) TYPE string.

    METHODS set_cdata
      IMPORTING
        val TYPE clike.

    METHODS set_status
      IMPORTING
        !code  TYPE i
        reason TYPE clike.

    METHODS set_session_stateful
      IMPORTING
        val TYPE i.

    METHODS get_response_cookie
      IMPORTING
        val           TYPE clike
      RETURNING
        VALUE(result) TYPE string.

    METHODS delete_response_cookie
      IMPORTING
        val TYPE clike.

    METHODS set_header_field
      IMPORTING
        !n TYPE clike
        v  TYPE clike.

    DATA mo_server_onprem  TYPE REF TO object.
    DATA mo_request_cloud  TYPE REF TO object.
    DATA mo_response_cloud TYPE REF TO object.

  PROTECTED SECTION.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cx_util_error DEFINITION
  INHERITING FROM cx_no_check FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    DATA:
      BEGIN OF ms_error,
        x_root TYPE REF TO cx_root,
        uuid   TYPE string,
        text   TYPE string,
      END OF ms_error.

    METHODS constructor
      IMPORTING
        val       TYPE any            OPTIONAL
        !previous TYPE REF TO cx_root OPTIONAL
          PREFERRED PARAMETER val.

    METHODS if_message~get_text REDEFINITION.

  PROTECTED SECTION.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_core_srv_draft DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    METHODS count_entries
      RETURNING
        VALUE(result) TYPE i.

    METHODS create
      IMPORTING
        draft     TYPE z2ui5_if_types=>ty_s_draft
        model_xml TYPE clike.

    METHODS read_draft
      IMPORTING
        !id           TYPE clike
      RETURNING
        VALUE(result) TYPE z2ui5_if_core_types=>ty_s_db.

    METHODS read_info
      IMPORTING
        !id           TYPE clike
      RETURNING
        VALUE(result) TYPE z2ui5_if_types=>ty_s_draft.

    METHODS cleanup.

  PROTECTED SECTION.

    METHODS read
      IMPORTING
        !id            TYPE clike
        check_load_app TYPE abap_bool DEFAULT abap_true
      RETURNING
        VALUE(result)  TYPE z2ui5_if_core_types=>ty_s_db.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_core_action DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    DATA mo_http_post TYPE REF TO z2ui5_cl_core_handler.
    DATA mo_app       TYPE REF TO z2ui5_cl_core_app.

    DATA ms_actual    TYPE z2ui5_if_core_types=>ty_s_actual.
    DATA ms_next      TYPE z2ui5_if_core_types=>ty_s_next.

    METHODS factory_system_startup
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_core_action.

    METHODS factory_first_start
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_core_action.

    METHODS factory_by_frontend
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_core_action.

    METHODS factory_stack_leave
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_core_action.

    METHODS factory_stack_call
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_core_action.

    METHODS constructor
      IMPORTING
        val TYPE REF TO z2ui5_cl_core_handler.

  PROTECTED SECTION.
    METHODS prepare_app_stack
      IMPORTING
        val           TYPE z2ui5_if_core_types=>ty_s_next-o_app_leave
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_core_action.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_core_app DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES if_serializable_object.

    DATA mt_attri TYPE REF TO z2ui5_if_core_types=>ty_t_attri.
    DATA mo_app   TYPE REF TO object.
    DATA ms_draft TYPE z2ui5_if_types=>ty_s_get-s_draft.

    METHODS model_json_stringify
      RETURNING
        VALUE(result) TYPE string.

    METHODS model_json_parse
      IMPORTING
        iv_view  TYPE clike
        io_model TYPE REF TO z2ui5_if_ajson.

    METHODS all_xml_stringify
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS all_xml_parse
      IMPORTING
        !xml          TYPE clike
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_core_app.

    CLASS-METHODS db_load
      IMPORTING
        !id           TYPE clike
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_core_app.

    CLASS-METHODS db_load_by_app
      IMPORTING
        app           TYPE REF TO z2ui5_if_app
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_core_app.

    METHODS constructor.
    METHODS db_save.

  PROTECTED SECTION.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_core_client DEFINITION
  CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_client.

    DATA mo_action TYPE REF TO z2ui5_cl_core_action.

    METHODS constructor
      IMPORTING
        action TYPE REF TO z2ui5_cl_core_action.

  PROTECTED SECTION.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_core_handler DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    DATA mo_action       TYPE REF TO z2ui5_cl_core_action.
    DATA mv_request_json TYPE string.
    DATA ms_request      TYPE z2ui5_if_core_types=>ty_s_request.
    DATA ms_response     TYPE z2ui5_if_core_types=>ty_s_response.
    DATA mv_response     TYPE string.

    METHODS constructor
      IMPORTING
        val TYPE string.

    METHODS main
      RETURNING
        VALUE(result) TYPE z2ui5_if_core_types=>ty_s_http_res.

  PROTECTED SECTION.

    METHODS main_begin.

    METHODS main_process
      RETURNING
        VALUE(check_go_client) TYPE abap_bool.

    METHODS main_end.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_core_srv_attri DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    METHODS constructor
      IMPORTING
        attri TYPE REF TO z2ui5_if_core_types=>ty_t_attri
        app   TYPE REF TO object.

    METHODS attri_refs_update.
    METHODS attri_before_save.
    METHODS attri_after_load.

    METHODS attri_get_val_ref
      IMPORTING
        iv_path       TYPE clike
      RETURNING
        VALUE(result) TYPE REF TO data.

    METHODS attri_search_a_dissolve
      IMPORTING
        val           TYPE REF TO data
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_if_core_types=>ty_s_attri.

  PROTECTED SECTION.

    DATA mt_attri TYPE REF TO z2ui5_if_core_types=>ty_t_attri.
    DATA mo_app   TYPE REF TO object.

    METHODS attri_search
      IMPORTING
        val           TYPE REF TO data
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_if_core_types=>ty_s_attri.

  PRIVATE SECTION.
ENDCLASS.

CLASS z2ui5_cl_core_srv_bind DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    DATA mo_app    TYPE REF TO z2ui5_cl_core_app.
    DATA mr_attri  TYPE REF TO z2ui5_if_core_types=>ty_s_attri.
    DATA ms_config TYPE z2ui5_if_core_types=>ty_s_bind_config.
    DATA mv_type   TYPE string.

    METHODS constructor
      IMPORTING
        app TYPE REF TO z2ui5_cl_core_app.

    METHODS main_local
      IMPORTING
        val           TYPE data
        config        TYPE z2ui5_if_core_types=>ty_s_bind_config OPTIONAL
      RETURNING
        VALUE(result) TYPE string.

    METHODS main
      IMPORTING
        val           TYPE REF TO data
        !type         TYPE string
        config        TYPE z2ui5_if_core_types=>ty_s_bind_config OPTIONAL
      RETURNING
        VALUE(result) TYPE string.

    METHODS main_cell
      IMPORTING
        val           TYPE data
        !type         TYPE string
        config        TYPE z2ui5_if_core_types=>ty_s_bind_config OPTIONAL
      RETURNING
        VALUE(result) TYPE string.

    METHODS clear
      IMPORTING
        val TYPE string.

    METHODS bind_tab_cell
      IMPORTING
        iv_name       TYPE string
        i_val         TYPE data
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.

    METHODS get_client_name
      RETURNING
        VALUE(result) TYPE string.

    METHODS update_model_attri.
    METHODS check_raise_existing.
    METHODS check_raise_new.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_core_srv_diss DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    METHODS constructor
      IMPORTING
        attri TYPE REF TO z2ui5_if_core_types=>ty_t_attri
        app   TYPE REF TO object.

    METHODS main.

  PROTECTED SECTION.

    DATA mt_attri TYPE REF TO z2ui5_if_core_types=>ty_t_attri.
    DATA mo_app   TYPE REF TO object.

    METHODS main_run.
    METHODS main_init.

    METHODS diss_struc
      IMPORTING
        ir_attri      TYPE REF TO z2ui5_if_core_types=>ty_s_attri
      RETURNING
        VALUE(result) TYPE z2ui5_if_core_types=>ty_t_attri.

    METHODS diss_dref
      IMPORTING
        ir_attri      TYPE REF TO z2ui5_if_core_types=>ty_s_attri
      RETURNING
        VALUE(result) TYPE z2ui5_if_core_types=>ty_t_attri.

    METHODS diss_oref
      IMPORTING
        ir_attri      TYPE REF TO z2ui5_if_core_types=>ty_s_attri
      RETURNING
        VALUE(result) TYPE z2ui5_if_core_types=>ty_t_attri.

    METHODS create_new_entry
      IMPORTING
        !name         TYPE string
      RETURNING
        VALUE(result) TYPE z2ui5_if_core_types=>ty_s_attri.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_core_srv_event DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    METHODS get_event
      IMPORTING
        val           TYPE clike                              OPTIONAL
        t_arg         TYPE string_table                       OPTIONAL
        s_cnt         TYPE z2ui5_if_types=>ty_s_event_control OPTIONAL
          PREFERRED PARAMETER val
      RETURNING
        VALUE(result) TYPE string.

    METHODS get_event_client
      IMPORTING
        val           TYPE clike
        t_arg         TYPE string_table OPTIONAL
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.

    METHODS get_t_arg
      IMPORTING
        val           TYPE string_table
      RETURNING
        VALUE(result) TYPE string.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_core_srv_json DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_ajson_filter.

    METHODS request_json_to_abap
      IMPORTING
        val           TYPE string
      RETURNING
        VALUE(result) TYPE z2ui5_if_core_types=>ty_s_request.

    METHODS response_abap_to_json
      IMPORTING
        val           TYPE z2ui5_if_core_types=>ty_s_response
      RETURNING
        VALUE(result) TYPE string.

    METHODS model_front_to_back
      IMPORTING
        view    TYPE string
        t_attri TYPE REF TO z2ui5_if_core_types=>ty_t_attri
        model   TYPE REF TO z2ui5_if_ajson.

    METHODS model_back_to_front
      IMPORTING
        t_attri       TYPE REF TO z2ui5_if_core_types=>ty_t_attri
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_core_srv_util DEFINITION
  INHERITING FROM z2ui5_cl_util
  CREATE PUBLIC.

  PUBLIC SECTION.

    CLASS-METHODS app_get_url_source_code
      IMPORTING
        !client       TYPE REF TO z2ui5_if_client
      RETURNING
        VALUE(result) TYPE string.

    CLASS-METHODS app_get_url
      IMPORTING
        !client          TYPE REF TO z2ui5_if_client
        VALUE(classname) TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE string.

  PROTECTED SECTION.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_app_js DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS get
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_app_xml DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS get
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_component_js DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS get
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_debugtool_js DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS get
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_debugtool_xml DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS get
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_index_html DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS get
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_manifest_json DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS get
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_models_js DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS get
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_server_js DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS get
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_style_css DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS get
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_view1_js DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS get
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_view1_xml DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS get
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_bal DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_app.

    TYPES:
      BEGIN OF ty_s_msg,
        type       TYPE string,
        id         TYPE string,
        title      TYPE string,
        subtitle   TYPE string,
        number     TYPE string,
        time       TYPE string,
        date       TYPE string,
        message    TYPE string,
        message_v1 TYPE string,
        message_v2 TYPE string,
        message_v3 TYPE string,
        message_v4 TYPE string,
        group      TYPE string,
      END OF ty_s_msg.
    TYPES ty_t_msg TYPE STANDARD TABLE OF ty_s_msg WITH EMPTY KEY.

    DATA mt_msg TYPE ty_t_msg.

    CLASS-METHODS factory
      IMPORTING
        i_messages      TYPE any
        i_title         TYPE string DEFAULT `abap2UI5 - Business Application Log`
      RETURNING
        VALUE(r_result) TYPE REF TO z2ui5_cl_pop_bal.

  PROTECTED SECTION.
    DATA client            TYPE REF TO z2ui5_if_client.
    DATA title             TYPE string.
    DATA check_initialized TYPE abap_bool.

    METHODS view_display.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_error DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_app.

    CLASS-METHODS factory
      IMPORTING
        x_root          TYPE REF TO cx_root
      RETURNING
        VALUE(r_result) TYPE REF TO z2ui5_cl_pop_error.

  PROTECTED SECTION.
    DATA client            TYPE REF TO z2ui5_if_client.
    DATA error             TYPE REF TO cx_root.
    DATA check_initialized TYPE abap_bool.

    METHODS view_display.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_file_dl DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_app.

    CLASS-METHODS factory
      IMPORTING
        i_text                TYPE string DEFAULT `Choose the file to upload:`
        i_title               TYPE string DEFAULT `File Download`
        i_button_text_confirm TYPE string DEFAULT `OK`
        i_button_text_cancel  TYPE string DEFAULT `Cancel`
        i_file                TYPE string
        i_type                TYPE string DEFAULT `data:text/csv;base64,`
      RETURNING
        VALUE(r_result)       TYPE REF TO z2ui5_cl_pop_file_dl.

    DATA mv_name           TYPE string.
    DATA mv_type           TYPE string.
    DATA mv_size           TYPE string.
    DATA mv_value          TYPE string.
    DATA mv_check_download TYPE abap_bool.

    METHODS result
      RETURNING
        VALUE(result) TYPE abap_bool.

  PROTECTED SECTION.
    DATA check_confirmed     TYPE abap_bool.
    DATA client              TYPE REF TO z2ui5_if_client.
    DATA title               TYPE string.
    DATA icon                TYPE string.
    DATA question_text       TYPE string.
    DATA button_text_confirm TYPE string.
    DATA button_text_cancel  TYPE string.
    DATA check_initialized   TYPE abap_bool.

    METHODS view_display.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_file_ul DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_app.

    CLASS-METHODS factory
      IMPORTING
        i_text                TYPE string DEFAULT `Choose the file to upload:`
        i_title               TYPE string DEFAULT `File Upload`
        i_button_text_confirm TYPE string DEFAULT `OK`
        i_button_text_cancel  TYPE string DEFAULT `Cancel`
        i_path                TYPE string OPTIONAL
      RETURNING
        VALUE(r_result)       TYPE REF TO z2ui5_cl_pop_file_ul.

    TYPES:
      BEGIN OF ty_s_result,
        value           TYPE string,
        check_confirmed TYPE abap_bool,
      END OF ty_s_result.

    DATA ms_result             TYPE ty_s_result.
    DATA mv_path               TYPE string.
    DATA mv_value              TYPE string.
    DATA check_confirm_enabled TYPE abap_bool.

    METHODS result
      RETURNING
        VALUE(result) TYPE ty_s_result.

  PROTECTED SECTION.
    DATA client              TYPE REF TO z2ui5_if_client.
    DATA title               TYPE string.
    DATA icon                TYPE string.
    DATA question_text       TYPE string.
    DATA button_text_confirm TYPE string.
    DATA button_text_cancel  TYPE string.
    DATA check_initialized   TYPE abap_bool.

    METHODS view_display.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_get_range DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_app.

    TYPES:
      BEGIN OF ty_s_filter_pop,
        option TYPE string,
        low    TYPE string,
        high   TYPE string,
        key    TYPE string,
      END OF ty_s_filter_pop.

    DATA mt_filter TYPE STANDARD TABLE OF ty_s_filter_pop WITH EMPTY KEY.

    CLASS-METHODS factory
      IMPORTING
        t_range         TYPE ANY TABLE OPTIONAL
      RETURNING
        VALUE(r_result) TYPE REF TO z2ui5_cl_pop_get_range.

    TYPES:
      BEGIN OF ty_s_result,
        t_range         TYPE z2ui5_cl_util=>ty_t_range,
        check_confirmed TYPE abap_bool,
      END OF ty_s_result.

    DATA ms_result TYPE ty_s_result.

    METHODS result
      RETURNING
        VALUE(result) TYPE ty_s_result.

    DATA mt_mapping TYPE z2ui5_if_types=>ty_t_name_value.

  PROTECTED SECTION.

    DATA client            TYPE REF TO z2ui5_if_client.
    DATA check_initialized TYPE abap_bool.

    METHODS view_display.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_get_range_m DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_app.

    CLASS-METHODS factory
      IMPORTING
        val             TYPE z2ui5_cl_util=>ty_t_filter_multi
      RETURNING
        VALUE(r_result) TYPE REF TO z2ui5_cl_pop_get_range_m.

    TYPES:
      BEGIN OF ty_s_result,
        t_filter        TYPE z2ui5_cl_util=>ty_t_filter_multi,
        check_confirmed TYPE abap_bool,
      END OF ty_s_result.

    DATA ms_result TYPE ty_s_result.

    METHODS result
      RETURNING
        VALUE(result) TYPE ty_s_result.

  PROTECTED SECTION.
    DATA client            TYPE REF TO z2ui5_if_client.
    DATA check_initialized TYPE abap_bool.
    DATA mv_popup_name     TYPE LINE OF string_table.

    METHODS popup_display.

    METHODS init.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_html DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_app.

    CLASS-METHODS factory
      IMPORTING
        i_html          TYPE string
        i_title         TYPE string DEFAULT `Title`
        i_icon          TYPE string DEFAULT 'sap-icon://question-mark'
        i_button_text   TYPE string DEFAULT `OK`
      RETURNING
        VALUE(r_result) TYPE REF TO z2ui5_cl_pop_html.

  PROTECTED SECTION.
    DATA client              TYPE REF TO z2ui5_if_client.
    DATA title               TYPE string.
    DATA icon                TYPE string.
    DATA html                TYPE string.
    DATA button_text_confirm TYPE string.
    DATA check_initialized   TYPE abap_bool.

    METHODS view_display.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_input_val DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_app.

    CLASS-METHODS factory
      IMPORTING
        !text               TYPE string DEFAULT `Enter New Value`
        val                 TYPE string OPTIONAL
        !title              TYPE string DEFAULT `Popup Input Value`
        button_text_confirm TYPE string DEFAULT `OK`
        button_text_cancel  TYPE string DEFAULT `Cancel`
          PREFERRED PARAMETER val
      RETURNING
        VALUE(r_result)     TYPE REF TO z2ui5_cl_pop_input_val.

    TYPES:
      BEGIN OF ty_s_result,
        value           TYPE string,
        check_confirmed TYPE abap_bool,
      END OF ty_s_result.

    DATA ms_result TYPE ty_s_result.

    METHODS result
      RETURNING
        VALUE(result) TYPE ty_s_result.

  PROTECTED SECTION.
    DATA client                 TYPE REF TO z2ui5_if_client.
    DATA title                  TYPE string.
    DATA icon                   TYPE string.
    DATA question_text          TYPE string.
    DATA button_text_confirm    TYPE string.
    DATA button_text_cancel     TYPE string.
    DATA check_initialized      TYPE abap_bool.

    METHODS view_display.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_itab_json_dl DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_app.

    CLASS-METHODS factory
      IMPORTING
        itab                  TYPE data
        i_title               TYPE string DEFAULT `Popup To Confirm`
        i_icon                TYPE string DEFAULT 'sap-icon://question-mark'
        i_button_text_confirm TYPE string DEFAULT `OK`
        i_button_text_cancel  TYPE string DEFAULT `Cancel`
      RETURNING
        VALUE(r_result)       TYPE REF TO z2ui5_cl_pop_itab_json_dl.

    METHODS result
      RETURNING
        VALUE(result) TYPE abap_bool.

    DATA mr_itab TYPE REF TO data.

  PROTECTED SECTION.
    DATA client                 TYPE REF TO z2ui5_if_client.

    DATA title                  TYPE string.
    DATA icon                   TYPE string.

    DATA button_text_confirm    TYPE string.
    DATA button_text_cancel     TYPE string.

    DATA check_result_confirmed TYPE abap_bool.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_js_loader DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_app.

    CLASS-METHODS factory
      IMPORTING
        i_js            TYPE string
        i_result        TYPE string DEFAULT `LOADED`
      RETURNING
        VALUE(r_result) TYPE REF TO z2ui5_cl_pop_js_loader.

    CLASS-METHODS factory_check_open_ui5
      RETURNING
        VALUE(r_result) TYPE REF TO z2ui5_cl_pop_js_loader.

    METHODS result
      RETURNING
        VALUE(result3) TYPE string.

    DATA mv_is_open_ui5 TYPE abap_bool.
    DATA ui5_gav        TYPE string.

  PROTECTED SECTION.
    DATA check_initialized TYPE abap_bool.
    DATA client            TYPE REF TO z2ui5_if_client.
    DATA js                TYPE string.
    DATA user_command      TYPE string.
    DATA check_open_ui5    TYPE abap_bool.

    METHODS view_display.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_messages DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_app.

    TYPES:
      BEGIN OF ty_s_msg,
        type       TYPE string,
        id         TYPE string,
        title      TYPE string,
        subtitle   TYPE string,
        number     TYPE string,
        message    TYPE string,
        message_v1 TYPE string,
        message_v2 TYPE string,
        message_v3 TYPE string,
        message_v4 TYPE string,
        group      TYPE string,
      END OF ty_s_msg.
    TYPES ty_t_msg TYPE STANDARD TABLE OF ty_s_msg WITH EMPTY KEY.

    DATA mt_msg TYPE ty_t_msg.

    CLASS-METHODS factory
      IMPORTING
        i_messages      TYPE any
        i_title         TYPE string DEFAULT `abap2UI5 - Message Popup`
      RETURNING
        VALUE(r_result) TYPE REF TO z2ui5_cl_pop_messages.

  PROTECTED SECTION.
    DATA client            TYPE REF TO z2ui5_if_client.
    DATA title             TYPE string.
    DATA check_initialized TYPE abap_bool.

    METHODS view_display.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_pdf DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_app.

    CLASS-METHODS factory
      IMPORTING
        i_title               TYPE string DEFAULT `PDF Viewer`
        i_button_text_confirm TYPE string DEFAULT `OK`
        i_button_text_cancel  TYPE string DEFAULT `Cancel`
        i_pdf                 TYPE string
      RETURNING
        VALUE(r_result)       TYPE REF TO z2ui5_cl_pop_pdf.

    TYPES:
      BEGIN OF ty_s_result,
        text            TYPE string,
        check_confirmed TYPE abap_bool,
      END OF ty_s_result.

    DATA ms_result TYPE ty_s_result.

    DATA mv_pdf    TYPE string.

    METHODS result
      RETURNING
        VALUE(result) TYPE ty_s_result.

  PROTECTED SECTION.
    DATA client                 TYPE REF TO z2ui5_if_client.
    DATA title                  TYPE string.
    DATA icon                   TYPE string.
    DATA question_text          TYPE string.
    DATA button_text_confirm    TYPE string.
    DATA button_text_cancel     TYPE string.
    DATA check_initialized      TYPE abap_bool.
    DATA check_result_confirmed TYPE abap_bool.

    METHODS view_display.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_table DEFINITION FINAL
  CREATE PROTECTED.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_app.

    CLASS-METHODS factory
      IMPORTING
        i_tab           TYPE STANDARD TABLE
        i_title         TYPE clike OPTIONAL
      RETURNING
        VALUE(r_result) TYPE REF TO z2ui5_cl_pop_table.

    TYPES:
      BEGIN OF ty_s_result,
        row             TYPE REF TO data,
        check_confirmed TYPE abap_bool,
      END OF ty_s_result.

    DATA ms_result TYPE ty_s_result.

    METHODS result
      RETURNING
        VALUE(result) TYPE ty_s_result.

    DATA mr_tab TYPE REF TO data.

  PROTECTED SECTION.
    DATA check_initialized TYPE abap_bool.
    DATA title             TYPE string VALUE 'Table View'.
    DATA client            TYPE REF TO z2ui5_if_client.

    METHODS on_event.
    METHODS display.
    METHODS on_event_confirm.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_textedit DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_app.

    CLASS-METHODS factory
      IMPORTING
        i_stretch_active TYPE abap_bool DEFAULT abap_true
        i_textarea       TYPE string    OPTIONAL
        i_title          TYPE string    DEFAULT `Editor`
        i_check_editable TYPE abap_bool DEFAULT abap_false
          PREFERRED PARAMETER i_textarea
      RETURNING
        VALUE(r_result)  TYPE REF TO z2ui5_cl_pop_textedit.

    DATA client            TYPE REF TO z2ui5_if_client.
    DATA mv_stretch_active TYPE abap_bool.
    DATA mv_title          TYPE string.
    DATA mv_check_editable TYPE abap_bool.
    DATA check_initialized TYPE abap_bool.

    TYPES:
      BEGIN OF ty_s_result,
        text            TYPE string,
        check_confirmed TYPE abap_bool,
      END OF ty_s_result.

    DATA ms_result TYPE ty_s_result.

    METHODS display.

    METHODS result
      RETURNING
        VALUE(result) TYPE ty_s_result.

  PROTECTED SECTION.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_to_confirm DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_app.

    CONSTANTS:
      BEGIN OF CS_event,
        confirmed TYPE string VALUE 'z2ui5_cl_pop_to_confirm_confirmed',
        canceled  TYPE string VALUE 'z2ui5_cl_pop_to_confirm_canceled',
      END OF cs_event.

    CLASS-METHODS factory
      IMPORTING
        i_question_text       TYPE string
        i_title               TYPE string DEFAULT `Popup To Confirm`
        i_icon                TYPE string DEFAULT 'sap-icon://question-mark'
        i_button_text_confirm TYPE string DEFAULT `OK`
        i_button_text_cancel  TYPE string DEFAULT `Cancel`
        i_event_confirm       TYPE string DEFAULT  CS_event-confirmed
        i_event_cancel        TYPE string DEFAULT  CS_event-canceled
      RETURNING
        VALUE(r_result)       TYPE REF TO z2ui5_cl_pop_to_confirm.

    METHODS result
      RETURNING
        VALUE(result) TYPE abap_bool.

  PROTECTED SECTION.
    DATA client                 TYPE REF TO z2ui5_if_client.

    DATA title                  TYPE string.
    DATA icon                   TYPE string.
    DATA question_text          TYPE string.
    DATA button_text_confirm    TYPE string.
    DATA button_text_cancel     TYPE string.
    DATA check_initialized      TYPE abap_bool.
    DATA check_result_confirmed TYPE abap_bool.
    DATA event_confirm          TYPE string.
    DATA event_canceled         TYPE string.

    METHODS view_display.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_to_inform DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES z2ui5_if_app.

    CLASS-METHODS factory
      IMPORTING
        i_text          TYPE string
        i_title         TYPE string DEFAULT `Title`
        i_icon          TYPE string DEFAULT 'sap-icon://question-mark'
        i_button_text   TYPE string DEFAULT `OK`
      RETURNING
        VALUE(r_result) TYPE REF TO z2ui5_cl_pop_to_inform.

  PROTECTED SECTION.
    DATA client              TYPE REF TO z2ui5_if_client.
    DATA title               TYPE string.
    DATA icon                TYPE string.
    DATA question_text       TYPE string.
    DATA button_text_confirm TYPE string.
    DATA check_initialized   TYPE abap_bool.

    METHODS view_display.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_pop_to_select DEFINITION FINAL
  CREATE PROTECTED.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_app.

    TYPES:
      BEGIN OF ty_s_result,
        row             TYPE REF TO data,
        table           TYPE REF TO data,
        check_confirmed TYPE abap_bool,
      END OF ty_s_result.

    DATA ms_result           TYPE ty_s_result.
    DATA mr_tab              TYPE REF TO data.
    DATA mr_tab_popup        TYPE REF TO data ##NEEDED.
    DATA mr_tab_popup_backup TYPE REF TO data ##NEEDED.

    CLASS-METHODS factory
      IMPORTING
        i_tab              TYPE STANDARD TABLE
        i_title            TYPE clike     OPTIONAL
        i_sort_field       TYPE clike     OPTIONAL
        i_descending       TYPE abap_bool OPTIONAL
        i_contentwidth     TYPE clike     OPTIONAL
        i_contentheight    TYPE clike     OPTIONAL
        i_growingthreshold TYPE clike     OPTIONAL
        i_multiselect      TYPE abap_bool OPTIONAL
        i_event_canceled   TYPE string    OPTIONAL
        i_event_confirmed  TYPE string    OPTIONAL
      RETURNING
        VALUE(r_result)    TYPE REF TO z2ui5_cl_pop_to_select.

    METHODS result
      RETURNING
        VALUE(result) TYPE ty_s_result.

  PROTECTED SECTION.
    DATA check_initialized TYPE abap_bool.
    DATA check_table_line  TYPE abap_bool.
    DATA client            TYPE REF TO z2ui5_if_client.
    DATA title             TYPE string.
    DATA sort_field        TYPE string.
    DATA content_width     TYPE string.
    DATA content_height    TYPE string.
    DATA growing_threshold TYPE string.
    DATA descending        TYPE abap_bool.
    DATA multiselect       TYPE abap_bool.
    DATA event_confirmed   TYPE string.
    DATA event_canceled    TYPE string.

    METHODS on_event.
    METHODS display.
    METHODS set_output_table.
    METHODS on_event_confirm.
    METHODS on_event_search.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_hello_world DEFINITION
  CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_app.

    DATA name              TYPE string.
    DATA check_initialized TYPE abap_bool.

  PROTECTED SECTION.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_app_startup DEFINITION FINAL
  CREATE PROTECTED.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_app.

    DATA:
      BEGIN OF ms_home,
        url                    TYPE string,
        btn_text               TYPE string,
        btn_event_id           TYPE string,
        btn_icon               TYPE string,
        classname              TYPE string,
        class_value_state      TYPE string,
        class_value_state_text TYPE string,
        class_editable         TYPE abap_bool VALUE abap_true,
      END OF ms_home.

    DATA mv_ui5_version       TYPE string.

    DATA client               TYPE REF TO z2ui5_if_client.
    DATA mv_check_initialized TYPE abap_bool.

    CLASS-METHODS factory
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_app_startup.

    METHODS z2ui5_on_init.
    METHODS z2ui5_on_event.
    METHODS view_display_start.
    METHODS on_event_check.
    METHODS view_display_popup.

  PROTECTED SECTION.
    DATA mt_classes TYPE z2ui5_cl_util=>ty_t_classes.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_http_handler DEFINITION
  CREATE PROTECTED.

  PUBLIC SECTION.
    CLASS-METHODS run
      IMPORTING
        server TYPE REF TO object                    OPTIONAL
        req    TYPE REF TO object                    OPTIONAL
        res    TYPE REF TO object                    OPTIONAL
        config TYPE z2ui5_if_types=>ty_s_http_config OPTIONAL
          PREFERRED PARAMETER server.

    CLASS-METHODS factory_cloud
      IMPORTING
        req           TYPE REF TO object
        res           TYPE REF TO object
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_http_handler.

    CLASS-METHODS factory
      IMPORTING
        server        TYPE REF TO object OPTIONAL
        req           TYPE REF TO object OPTIONAL
        res           TYPE REF TO object OPTIONAL
          PREFERRED PARAMETER server
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_http_handler.

    CLASS-METHODS _http_post
      IMPORTING
        is_req        TYPE z2ui5_if_core_types=>ty_s_http_req
      RETURNING
        VALUE(result) TYPE z2ui5_if_core_types=>ty_s_http_res.

    CLASS-METHODS _http_get
      IMPORTING
        VALUE(is_config) TYPE  z2ui5_if_types=>ty_s_http_config
      RETURNING
        VALUE(result)    TYPE string.

    METHODS main
      IMPORTING
        s_config TYPE z2ui5_if_types=>ty_s_http_config OPTIONAL.

    CLASS-METHODS _main
      IMPORTING
        is_config     TYPE  z2ui5_if_types=>ty_s_http_config
        is_req        TYPE z2ui5_if_core_types=>ty_s_http_req
      RETURNING
        VALUE(result) TYPE z2ui5_if_core_types=>ty_s_http_res.

    CLASS-METHODS get_request
      IMPORTING
        server        TYPE REF TO object OPTIONAL
        req           TYPE REF TO object OPTIONAL
        res           TYPE REF TO object OPTIONAL
          PREFERRED PARAMETER server
      RETURNING
        VALUE(result) TYPE z2ui5_if_core_types=>ty_s_http_req.

    CLASS-METHODS get_response
      IMPORTING
        server TYPE REF TO object OPTIONAL
        req    TYPE REF TO object OPTIONAL
        res    TYPE REF TO object OPTIONAL
        is_res TYPE z2ui5_if_core_types=>ty_s_http_res.

  PROTECTED SECTION.
    CLASS-DATA so_sticky_handler TYPE REF TO z2ui5_cl_core_handler.

    DATA mo_server TYPE REF TO z2ui5_cl_util_abap_http.

    DATA ms_req    TYPE z2ui5_if_core_types=>ty_s_http_req.
    DATA ms_res    TYPE z2ui5_if_core_types=>ty_s_http_res.
    DATA ms_config TYPE z2ui5_if_types=>ty_s_http_config.

    METHODS set_request.
    METHODS set_response.

  PRIVATE SECTION.

ENDCLASS.
CLASS z2ui5_cl_xml_view DEFINITION FINAL
  CREATE PROTECTED.

  PUBLIC SECTION.
    CLASS-METHODS factory
      IMPORTING
        t_ns          TYPE z2ui5_if_types=>ty_t_name_value OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    CLASS-METHODS factory_plain
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    CLASS-METHODS factory_popup
      IMPORTING
        t_ns          TYPE z2ui5_if_types=>ty_t_name_value OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS constructor.

    METHODS horizontal_layout
      IMPORTING
        class         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        allowwrapping TYPE clike OPTIONAL
        id            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS icon
      IMPORTING
        src                   TYPE clike OPTIONAL
        press                 TYPE clike OPTIONAL
        size                  TYPE clike OPTIONAL
        color                 TYPE clike OPTIONAL
        class                 TYPE clike OPTIONAL
        id                    TYPE clike OPTIONAL
        width                 TYPE clike OPTIONAL
        useicontooltip        TYPE clike OPTIONAL
        notabstop             TYPE clike OPTIONAL
        hovercolor            TYPE clike OPTIONAL
        hoverbackgroundcolor  TYPE clike OPTIONAL
        height                TYPE clike OPTIONAL
        decorative            TYPE clike OPTIONAL
        backgroundcolor       TYPE clike OPTIONAL
        alt                   TYPE clike OPTIONAL
        activecolor           TYPE clike OPTIONAL
        activebackgroundcolor TYPE clike OPTIONAL
        visible               TYPE clike OPTIONAL
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS dynamic_page
      IMPORTING
        headerexpanded           TYPE clike OPTIONAL
        showfooter               TYPE clike OPTIONAL
        headerpinned             TYPE clike OPTIONAL
        toggleheaderontitleclick TYPE clike OPTIONAL
        class                    TYPE clike OPTIONAL
      RETURNING
        VALUE(result)            TYPE REF TO z2ui5_cl_xml_view.

    METHODS dynamic_page_title
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS dynamic_page_header
      IMPORTING
        pinnable      TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS html
      IMPORTING
        content         TYPE clike OPTIONAL
        afterrendering  TYPE clike OPTIONAL
        preferdom       TYPE clike OPTIONAL
        sanitizecontent TYPE clike OPTIONAL
        visible         TYPE clike OPTIONAL
        id              TYPE clike OPTIONAL
          PREFERRED PARAMETER content
      RETURNING
        VALUE(result)   TYPE REF TO z2ui5_cl_xml_view.

    METHODS illustrated_message
      IMPORTING
        enableverticalresponsiveness TYPE clike OPTIONAL
        enableformattedtext          TYPE clike OPTIONAL
        illustrationtype             TYPE clike OPTIONAL
        title                        TYPE clike OPTIONAL
        description                  TYPE clike OPTIONAL
        illustrationsize             TYPE clike OPTIONAL
      RETURNING
        VALUE(result)                TYPE REF TO z2ui5_cl_xml_view.

    METHODS p_cell_selector
      IMPORTING
        id            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS p_copy_provider
      IMPORTING
        id            TYPE clike OPTIONAL
        extract_data  TYPE clike OPTIONAL
        copy          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS additional_content
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS flex_box
      IMPORTING
        class            TYPE clike OPTIONAL
        rendertype       TYPE clike OPTIONAL
        width            TYPE clike OPTIONAL
        fitcontainer     TYPE clike OPTIONAL
        height           TYPE clike OPTIONAL
        alignitems       TYPE clike OPTIONAL
        justifycontent   TYPE clike OPTIONAL
        wrap             TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
        direction        TYPE clike OPTIONAL
        displayinline    TYPE clike OPTIONAL
        backgrounddesign TYPE clike OPTIONAL
        aligncontent     TYPE clike OPTIONAL
        items            TYPE clike OPTIONAL
        id               TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS popover
      IMPORTING
        !id                 TYPE clike OPTIONAL
        title               TYPE clike OPTIONAL
        class               TYPE clike OPTIONAL
        placement           TYPE clike OPTIONAL
        initialfocus        TYPE clike OPTIONAL
        contentwidth        TYPE clike OPTIONAL
        contentheight       TYPE clike OPTIONAL
        showheader          TYPE clike OPTIONAL
        showarrow           TYPE clike OPTIONAL
        resizable           TYPE clike OPTIONAL
        modal               TYPE clike OPTIONAL
        horizontalscrolling TYPE clike OPTIONAL
        verticalscrolling   TYPE clike OPTIONAL
        visible             TYPE clike OPTIONAL
        offsetx             TYPE clike OPTIONAL
        offsety             TYPE clike OPTIONAL
        contentminwidth     TYPE clike OPTIONAL
        titlealignment      TYPE clike OPTIONAL
        beforeopen          TYPE clike OPTIONAL
        beforeclose         TYPE clike OPTIONAL
        afteropen           TYPE clike OPTIONAL
        afterclose          TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS list_item
      IMPORTING
        text           TYPE clike OPTIONAL
        additionaltext TYPE clike OPTIONAL
        key            TYPE clike OPTIONAL
        icon           TYPE clike OPTIONAL
        enabled        TYPE clike OPTIONAL
        textdirection  TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS table
      IMPORTING
        id                  TYPE clike OPTIONAL
        items               TYPE clike OPTIONAL
        class               TYPE clike OPTIONAL
        growing             TYPE clike OPTIONAL
        growingthreshold    TYPE clike OPTIONAL
        growingscrolltoload TYPE clike OPTIONAL
        headertext          TYPE clike OPTIONAL
        sticky              TYPE clike OPTIONAL
        mode                TYPE clike OPTIONAL
        width               TYPE clike OPTIONAL
        selectionchange     TYPE clike OPTIONAL
        alternaterowcolors  TYPE clike OPTIONAL
        autopopinmode       TYPE clike OPTIONAL
        inset               TYPE clike OPTIONAL
        showseparators      TYPE clike OPTIONAL
        showoverlay         TYPE clike OPTIONAL
        hiddeninpopin       TYPE clike OPTIONAL
        popinlayout         TYPE clike OPTIONAL
        fixedlayout         TYPE clike OPTIONAL
        backgrounddesign    TYPE clike OPTIONAL
        visible             TYPE clike OPTIONAL
          PREFERRED PARAMETER items
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS analytical_table
      IMPORTING
        ns            TYPE clike OPTIONAL
        selectionmode TYPE clike OPTIONAL
        rowmode       TYPE clike OPTIONAL
        toolbar       TYPE clike OPTIONAL
        columns       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS rowmode
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS breadcrumbs
      IMPORTING
        ns                  TYPE clike OPTIONAL
        link                TYPE clike OPTIONAL
        id                  TYPE clike OPTIONAL
        class               TYPE clike OPTIONAL
        currentlocationtext TYPE clike OPTIONAL
        separatorstyle      TYPE clike OPTIONAL
        visible             TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS current_location
      IMPORTING
        ns            TYPE clike OPTIONAL
        link          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS color_palette
      IMPORTING
        ns            TYPE clike OPTIONAL
        colorselect   TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS auto
      IMPORTING
        ns               TYPE clike OPTIONAL
        rowcontentheight TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS message_strip
      IMPORTING
        text                TYPE clike OPTIONAL
        type                TYPE clike OPTIONAL
        showicon            TYPE clike OPTIONAL
        customicon          TYPE clike OPTIONAL
        class               TYPE clike OPTIONAL
        visible             TYPE clike OPTIONAL
        showclosebutton     TYPE clike OPTIONAL
        enableformattedtext TYPE clike OPTIONAL
          PREFERRED PARAMETER text
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS footer
      IMPORTING
        ns            TYPE string OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS message_page
      IMPORTING
        show_header         TYPE clike OPTIONAL
        text                TYPE clike OPTIONAL
        enableformattedtext TYPE clike OPTIONAL
        description         TYPE clike OPTIONAL
        icon                TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_page_layout
      IMPORTING
        showtitleinheadercontent       TYPE clike OPTIONAL
        showeditheaderbutton           TYPE clike OPTIONAL
        editheaderbuttonpress          TYPE clike OPTIONAL
        uppercaseanchorbar             TYPE clike OPTIONAL
        showfooter                     TYPE clike OPTIONAL
        alwaysshowcontentheader        TYPE clike OPTIONAL
        enablelazyloading              TYPE clike OPTIONAL
        flexenabled                    TYPE clike OPTIONAL
        headercontentpinnable          TYPE clike OPTIONAL
        headercontentpinned            TYPE clike OPTIONAL
        ischildpage                    TYPE clike OPTIONAL
        preserveheaderstateonscroll    TYPE clike OPTIONAL
        showanchorbar                  TYPE clike OPTIONAL
        showanchorbarpopover           TYPE clike OPTIONAL
        showheadercontent              TYPE clike OPTIONAL
        showonlyhighimportance         TYPE clike OPTIONAL
        subsectionlayout               TYPE clike OPTIONAL
        toggleheaderontitleclick       TYPE clike OPTIONAL
        useicontabbar                  TYPE clike OPTIONAL
        usetwocolumnsforlargescreen    TYPE clike OPTIONAL
        visible                        TYPE clike OPTIONAL
        backgrounddesignanchorbar      TYPE clike OPTIONAL
        height                         TYPE clike OPTIONAL
        sectiontitlelevel              TYPE clike OPTIONAL
        beforenavigate                 TYPE clike OPTIONAL
        headercontentpinnedstatechange TYPE clike OPTIONAL
        navigate                       TYPE clike OPTIONAL
        sectionchange                  TYPE clike OPTIONAL
        subsectionvisibilitychange     TYPE clike OPTIONAL
        toggleanchorbar                TYPE clike OPTIONAL
        class                          TYPE clike OPTIONAL
      RETURNING
        VALUE(result)                  TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_page_header
      IMPORTING
        isactionareaalwaysvisible     TYPE clike OPTIONAL
        isobjecticonalwaysvisible     TYPE clike OPTIONAL
        isobjectsubtitlealwaysvisible TYPE clike OPTIONAL
        isobjecttitlealwaysvisible    TYPE clike OPTIONAL
        markchanges                   TYPE clike OPTIONAL
        markfavorite                  TYPE clike OPTIONAL
        markflagged                   TYPE clike OPTIONAL
        marklocked                    TYPE clike OPTIONAL
        objectimagealt                TYPE clike OPTIONAL
        objectimagebackgroundcolor    TYPE clike OPTIONAL
        objectimagedensityaware       TYPE clike OPTIONAL
        objectimageshape              TYPE clike OPTIONAL
        objectimageuri                TYPE clike OPTIONAL
        objectsubtitle                TYPE clike OPTIONAL
        objecttitle                   TYPE clike OPTIONAL
        showmarkers                   TYPE clike OPTIONAL
        showplaceholder               TYPE clike OPTIONAL
        showtitleselector             TYPE clike OPTIONAL
        visible                       TYPE clike OPTIONAL
        markchangespress              TYPE clike OPTIONAL
        marklockedpress               TYPE clike OPTIONAL
        titleselectorpress            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)                 TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_page_header_action_btn
      IMPORTING
        activeicon       TYPE clike OPTIONAL
        ariahaspopup     TYPE clike OPTIONAL
        enabled          TYPE clike OPTIONAL
        hideicon         TYPE clike OPTIONAL
        hidetext         TYPE clike OPTIONAL
        icon             TYPE clike OPTIONAL
        icondensityaware TYPE clike OPTIONAL
        iconfirst        TYPE clike OPTIONAL
        importance       TYPE clike OPTIONAL
        text             TYPE clike OPTIONAL
        textdirection    TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
        width            TYPE clike OPTIONAL
        type             TYPE clike OPTIONAL
        press            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_page_dyn_header_title
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS generic_tile
      IMPORTING
        class                  TYPE clike OPTIONAL
        id                     TYPE clike OPTIONAL
        header                 TYPE clike OPTIONAL
        mode                   TYPE clike OPTIONAL
        additionaltooltip      TYPE clike OPTIONAL
        appshortcut            TYPE clike OPTIONAL
        backgroundcolor        TYPE clike OPTIONAL
        backgroundimage        TYPE clike OPTIONAL
        dropareaoffset         TYPE clike OPTIONAL
        press                  TYPE clike OPTIONAL
        frametype              TYPE clike OPTIONAL
        failedtext             TYPE clike OPTIONAL
        headerimage            TYPE clike OPTIONAL
        scope                  TYPE clike OPTIONAL
        sizebehavior           TYPE clike OPTIONAL
        state                  TYPE clike OPTIONAL
        systeminfo             TYPE clike OPTIONAL
        tilebadge              TYPE clike OPTIONAL
        tileicon               TYPE clike OPTIONAL
        url                    TYPE clike OPTIONAL
        valuecolor             TYPE clike OPTIONAL
        width                  TYPE clike OPTIONAL
        wrappingtype           TYPE clike OPTIONAL
        imagedescription       TYPE clike OPTIONAL
        navigationbuttontext   TYPE clike OPTIONAL
        visible                TYPE clike OPTIONAL
        renderonthemechange    TYPE clike OPTIONAL
        enablenavigationbutton TYPE clike OPTIONAL
        pressenabled           TYPE clike OPTIONAL
        iconloaded             TYPE clike OPTIONAL
        subheader              TYPE clike OPTIONAL
      RETURNING
        VALUE(result)          TYPE REF TO z2ui5_cl_xml_view.

    METHODS numeric_content
      IMPORTING
        value             TYPE clike OPTIONAL
        icon              TYPE clike OPTIONAL
        withmargin        TYPE clike OPTIONAL
        adaptivefontsize  TYPE clike OPTIONAL
        animatetextchange TYPE clike OPTIONAL
        formattervalue    TYPE clike OPTIONAL
        icondescription   TYPE clike OPTIONAL
        indicator         TYPE clike OPTIONAL
        nullifyvalue      TYPE clike OPTIONAL
        scale             TYPE clike OPTIONAL
        state             TYPE clike OPTIONAL
        truncatevalueto   TYPE clike OPTIONAL
        valuecolor        TYPE clike OPTIONAL
        visible           TYPE clike OPTIONAL
        width             TYPE clike OPTIONAL
        class             TYPE clike OPTIONAL
        press             TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS link_tile_content
      IMPORTING
        linkhref      TYPE clike OPTIONAL
        linktext      TYPE clike OPTIONAL
        iconsrc       TYPE clike OPTIONAL
        linkpress     TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS image_content
      IMPORTING
        src           TYPE clike OPTIONAL
        description   TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS tile_content
      IMPORTING
        unit          TYPE clike OPTIONAL
        footercolor   TYPE clike OPTIONAL
        blocked       TYPE clike OPTIONAL
        frametype     TYPE clike OPTIONAL
        priority      TYPE clike OPTIONAL
        prioritytext  TYPE clike OPTIONAL
        state         TYPE clike OPTIONAL
        disabled      TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        footer        TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS expanded_heading
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS snapped_heading
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS expanded_content
      IMPORTING
        ns            TYPE clike
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS snapped_content
      IMPORTING
        ns            TYPE clike
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS heading
      IMPORTING
        ns            TYPE clike
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS actions
      IMPORTING
        ns            TYPE clike
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS snapped_title_on_mobile
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS header
      IMPORTING
        ns            TYPE clike DEFAULT `f`
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS navigation_actions
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS avatar
      IMPORTING
        ns                TYPE clike OPTIONAL
        src               TYPE clike OPTIONAL
        class             TYPE clike OPTIONAL
        displaysize       TYPE clike OPTIONAL
        ariahaspopup      TYPE clike OPTIONAL
        backgroundcolor   TYPE clike OPTIONAL
        badgeicon         TYPE clike OPTIONAL
        badgetooltip      TYPE clike OPTIONAL
        badgevaluestate   TYPE clike OPTIONAL
        customdisplaysize TYPE clike OPTIONAL
        customfontsize    TYPE clike OPTIONAL
        displayshape      TYPE clike OPTIONAL
        fallbackicon      TYPE clike OPTIONAL
        imagefittype      TYPE clike OPTIONAL
        initials          TYPE clike OPTIONAL
        showborder        TYPE clike OPTIONAL
        decorative        TYPE clike OPTIONAL
        enabled           TYPE clike OPTIONAL
        press             TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS avatar_group
      IMPORTING !id                     TYPE clike     OPTIONAL
                avatarCustomDisplaySize TYPE clike     OPTIONAL
                avatarCustomFontSize    TYPE clike     OPTIONAL
                avatarDisplaySize       TYPE clike     OPTIONAL
                !blocked                TYPE abap_bool OPTIONAL
                busy                    TYPE abap_bool OPTIONAL
                busyIndicatorDelay      TYPE clike     OPTIONAL
                busyIndicatorSize       TYPE clike     OPTIONAL
                fieldGroupIds           TYPE clike     OPTIONAL
                groupType               TYPE clike     OPTIONAL
                !visible                TYPE abap_bool DEFAULT abap_true
                tooltip                 TYPE clike     OPTIONAL
                items                   TYPE clike     OPTIONAL
                press                   TYPE clike     OPTIONAL
      RETURNING VALUE(result)           TYPE REF TO z2ui5_cl_xml_view.

    METHODS avatar_group_item
      IMPORTING !id                TYPE clike OPTIONAL
                busy               TYPE clike DEFAULT `false`
                busyIndicatorDelay TYPE clike OPTIONAL
                busyIndicatorSize  TYPE clike OPTIONAL
                fallbackIcon       TYPE clike OPTIONAL
                fieldGroupIds      TYPE clike OPTIONAL
                initials           TYPE clike OPTIONAL
                src                TYPE clike OPTIONAL
                !visible           TYPE clike DEFAULT `true`
                tooltip            TYPE clike OPTIONAL
      RETURNING VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS header_title
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS sections
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_page_section
      IMPORTING
        titleuppercase       TYPE clike OPTIONAL
        title                TYPE clike OPTIONAL
        importance           TYPE clike OPTIONAL
        id                   TYPE clike OPTIONAL
        titlelevel           TYPE clike OPTIONAL
        showtitle            TYPE clike OPTIONAL
        visible              TYPE clike OPTIONAL
        wraptitle            TYPE clike OPTIONAL
        anchorbarbuttoncolor TYPE clike OPTIONAL
        titlevisible         TYPE clike OPTIONAL
      RETURNING
        VALUE(result)        TYPE REF TO z2ui5_cl_xml_view.

    METHODS sub_sections
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_page_sub_section
      IMPORTING
        id             TYPE clike OPTIONAL
        title          TYPE clike OPTIONAL
        mode           TYPE clike OPTIONAL
        importance     TYPE clike OPTIONAL
        titlelevel     TYPE clike OPTIONAL
        showtitle      TYPE clike OPTIONAL
        titleuppercase TYPE clike OPTIONAL
        visible        TYPE clike OPTIONAL
        titlevisible   TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS shell
      IMPORTING
        ns              TYPE clike OPTIONAL
        appwidthlimited TYPE clike OPTIONAL
      RETURNING
        VALUE(result)   TYPE REF TO z2ui5_cl_xml_view.

    METHODS shell_bar
      IMPORTING
        homeicon               TYPE clike     OPTIONAL
        homeicontooltip        TYPE clike     OPTIONAL
        notificationsnumber    TYPE clike     OPTIONAL
        secondtitle            TYPE clike     OPTIONAL
        showcopilot            TYPE abap_bool OPTIONAL
        showmenubutton         TYPE abap_bool OPTIONAL
        shownavbutton          TYPE abap_bool OPTIONAL
        shownotifications      TYPE abap_bool OPTIONAL
        showproductswitcher    TYPE abap_bool OPTIONAL
        showsearch             TYPE abap_bool OPTIONAL
        title                  TYPE clike     OPTIONAL
        avatarpressed          TYPE clike     OPTIONAL
        copilotpressed         TYPE clike     OPTIONAL
        homeiconpressed        TYPE clike     OPTIONAL
        menubuttonpressed      TYPE clike     OPTIONAL
        navbuttonpressed       TYPE clike     OPTIONAL
        notificationspressed   TYPE clike     OPTIONAL
        productswitcherpressed TYPE clike     OPTIONAL
        searchbuttonpressed    TYPE clike     OPTIONAL
      RETURNING
        VALUE(result)          TYPE REF TO z2ui5_cl_xml_view.

    METHODS blocks
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS more_blocks
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS layout_data
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS flex_item_data
      IMPORTING
        growfactor       TYPE clike OPTIONAL
        basesize         TYPE clike OPTIONAL
        backgrounddesign TYPE clike OPTIONAL
        styleclass       TYPE clike OPTIONAL
        order            TYPE clike OPTIONAL
        shrinkfactor     TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS code_editor
      IMPORTING
        value         TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        editable      TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS suggestion_items
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS suggestion_item
      IMPORTING
        description   TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        textdirection TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS suggestion_columns
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS suggestion_rows
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS vertical_layout
      IMPORTING
        class         TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        id            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS multi_input
      IMPORTING
        showclearicon    TYPE clike OPTIONAL
        showvaluehelp    TYPE clike OPTIONAL
        name             TYPE clike OPTIONAL
        suggestionitems  TYPE clike OPTIONAL
        tokenupdate      TYPE clike OPTIONAL
        width            TYPE clike OPTIONAL
        id               TYPE clike OPTIONAL
        value            TYPE clike OPTIONAL
        tokens           TYPE clike OPTIONAL
        submit           TYPE clike OPTIONAL
        valuehelprequest TYPE clike OPTIONAL
        enabled          TYPE clike OPTIONAL
        class            TYPE clike OPTIONAL
        change           TYPE clike OPTIONAL
        required         TYPE clike OPTIONAL
        valuestate       TYPE clike OPTIONAL
        valuestatetext   TYPE clike OPTIONAL
        placeholder      TYPE clike OPTIONAL
        showsuggestion   TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS tokens
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS token
      IMPORTING
        key           TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        selected      TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        editable      TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS input
      IMPORTING
        id                            TYPE clike OPTIONAL
        value                         TYPE clike OPTIONAL
        placeholder                   TYPE clike OPTIONAL
        type                          TYPE clike OPTIONAL
        showclearicon                 TYPE clike OPTIONAL
        valuestate                    TYPE clike OPTIONAL
        valuestatetext                TYPE clike OPTIONAL
        showtablesuggestionvaluehelp  TYPE clike OPTIONAL
        description                   TYPE clike OPTIONAL
        editable                      TYPE clike OPTIONAL
        enabled                       TYPE clike OPTIONAL
        suggestionitems               TYPE clike OPTIONAL
        suggestionrows                TYPE clike OPTIONAL
        showsuggestion                TYPE clike OPTIONAL
        showvaluehelp                 TYPE clike OPTIONAL
        valuehelprequest              TYPE clike OPTIONAL
        required                      TYPE clike OPTIONAL
        suggest                       TYPE clike OPTIONAL
        class                         TYPE clike OPTIONAL
        visible                       TYPE clike OPTIONAL
        submit                        TYPE clike OPTIONAL
        valueliveupdate               TYPE clike OPTIONAL
        autocomplete                  TYPE clike OPTIONAL
        maxsuggestionwidth            TYPE clike OPTIONAL
        fieldwidth                    TYPE clike OPTIONAL
        valuehelponly                 TYPE clike OPTIONAL
        width                         TYPE clike OPTIONAL
        change                        TYPE clike OPTIONAL
        valuehelpiconsrc              TYPE clike OPTIONAL
        textformatter                 TYPE clike OPTIONAL
        textformatmode                TYPE clike OPTIONAL
        maxlength                     TYPE clike OPTIONAL
        startsuggestion               TYPE clike OPTIONAL
        enablesuggestionshighlighting TYPE clike OPTIONAL
        enabletableautopopinmode      TYPE clike OPTIONAL
        arialabelledby                TYPE clike OPTIONAL
        ariadescribedby               TYPE clike OPTIONAL
          PREFERRED PARAMETER value
      RETURNING
        VALUE(result)                 TYPE REF TO z2ui5_cl_xml_view.

    METHODS dialog
      IMPORTING
        title               TYPE clike OPTIONAL
        icon                TYPE clike OPTIONAL
        showheader          TYPE clike OPTIONAL
        stretch             TYPE clike OPTIONAL
        contentheight       TYPE clike OPTIONAL
        contentwidth        TYPE clike OPTIONAL
        resizable           TYPE clike OPTIONAL
        horizontalscrolling TYPE clike OPTIONAL
        verticalscrolling   TYPE clike OPTIONAL
        afterclose          TYPE clike OPTIONAL
        beforeopen          TYPE clike OPTIONAL
        beforeclose         TYPE clike OPTIONAL
        afteropen           TYPE clike OPTIONAL
        draggable           TYPE clike OPTIONAL
        closeonnavigation   TYPE clike OPTIONAL
        escapehandler       TYPE clike OPTIONAL
        type                TYPE clike OPTIONAL
        titlealignment      TYPE clike OPTIONAL
        state               TYPE clike OPTIONAL
          PREFERRED PARAMETER title
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS carousel
      IMPORTING
        height                        TYPE clike OPTIONAL
        class                         TYPE clike OPTIONAL
        loop                          TYPE clike OPTIONAL
        id                            TYPE clike OPTIONAL
        arrowsplacement               TYPE clike OPTIONAL
        backgrounddesign              TYPE clike OPTIONAL
        pageindicatorbackgrounddesign TYPE clike OPTIONAL
        pageindicatorborderdesign     TYPE clike OPTIONAL
        pageindicatorplacement        TYPE clike OPTIONAL
        width                         TYPE clike OPTIONAL
        showpageindicator             TYPE clike OPTIONAL
        visible                       TYPE clike OPTIONAL
      RETURNING
        VALUE(result)                 TYPE REF TO z2ui5_cl_xml_view.

    METHODS buttons
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS get_root
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS get_parent
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS get
      IMPORTING
        name          TYPE string OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS get_child
      IMPORTING
        index         TYPE i DEFAULT 1
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS columns
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS analytical_column
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS column
      IMPORTING
        width             TYPE clike OPTIONAL
        id                TYPE clike OPTIONAL
        minscreenwidth    TYPE clike OPTIONAL
        demandpopin       TYPE clike OPTIONAL
        halign            TYPE clike OPTIONAL
        visible           TYPE clike OPTIONAL
        valign            TYPE clike OPTIONAL
        styleclass        TYPE clike OPTIONAL
        sortindicator     TYPE clike OPTIONAL
        popindisplay      TYPE clike OPTIONAL
        mergefunctionname TYPE clike OPTIONAL
        mergeduplicates   TYPE clike OPTIONAL
        importance        TYPE clike OPTIONAL
        autopopinwidth    TYPE clike OPTIONAL
        class             TYPE clike OPTIONAL
        headermenu        TYPE clike OPTIONAL
          PREFERRED PARAMETER width
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS items
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS interact_donut_chart
      IMPORTING
        selectionchanged  TYPE clike OPTIONAL
        errormessage      TYPE clike OPTIONAL
        errormessagetitle TYPE clike OPTIONAL
        showerror         TYPE clike OPTIONAL
        displayedsegments TYPE clike OPTIONAL
        press             TYPE clike OPTIONAL
        segments          TYPE clike OPTIONAL
        selectionenabled  TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS segments
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS interact_donut_chart_segment
      IMPORTING
        label          TYPE clike OPTIONAL
        value          TYPE clike OPTIONAL
        displayedvalue TYPE clike OPTIONAL
        selected       TYPE clike OPTIONAL
        color          TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS interact_bar_chart
      IMPORTING
        selectionchanged  TYPE clike OPTIONAL
        selectionenabled  TYPE clike OPTIONAL
        press             TYPE clike OPTIONAL
        labelwidth        TYPE clike OPTIONAL
        errormessage      TYPE clike OPTIONAL
        errormessagetitle TYPE clike OPTIONAL
        showerror         TYPE clike OPTIONAL
        displayedbars     TYPE clike OPTIONAL
        bars              TYPE clike OPTIONAL
        max               TYPE clike OPTIONAL
        min               TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS bars
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS interact_bar_chart_bar
      IMPORTING
        label          TYPE clike OPTIONAL
        value          TYPE clike OPTIONAL
        displayedvalue TYPE clike OPTIONAL
        selected       TYPE clike OPTIONAL
        color          TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS interact_line_chart
      IMPORTING
        selectionchanged  TYPE clike OPTIONAL
        press             TYPE clike OPTIONAL
        precedingpoint    TYPE clike OPTIONAL
        succeddingpoint   TYPE clike OPTIONAL
        errormessage      TYPE clike OPTIONAL
        errormessagetitle TYPE clike OPTIONAL
        showerror         TYPE clike OPTIONAL
        displayedpoints   TYPE clike OPTIONAL
        selectionenabled  TYPE clike OPTIONAL
        points            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS points
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS interact_line_chart_point
      IMPORTING
        label          TYPE clike OPTIONAL
        value          TYPE clike OPTIONAL
        secondarylabel TYPE clike OPTIONAL
        displayedvalue TYPE clike OPTIONAL
        selected       TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS radial_micro_chart
      IMPORTING
        size          TYPE clike OPTIONAL
        percentage    TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
        valuecolor    TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
        aligncontent  TYPE clike OPTIONAL
        hideonnodata  TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_list_item
      IMPORTING
        id            TYPE clike OPTIONAL
        valign        TYPE clike OPTIONAL
        selected      TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
        counter       TYPE clike OPTIONAL
        highlight     TYPE clike OPTIONAL
        highlighttext TYPE clike OPTIONAL
        navigated     TYPE clike OPTIONAL
        unread        TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        detailpress   TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS action_list_item
      IMPORTING
        id            TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS cells
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS bar
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS content_left
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS content_middle
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS content_right
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS content_areas
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS field
      IMPORTING
        ns                 TYPE clike OPTIONAL
        id                 TYPE clike OPTIONAL
        value              TYPE clike OPTIONAL
        editmode           TYPE clike OPTIONAL
        showemptyindicator TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS custom_header
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS header_content
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS sub_header
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS custom_data
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS core_custom_data
      IMPORTING
        key           TYPE clike OPTIONAL
        value         TYPE clike OPTIONAL
        writetodom    TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS badge_custom_data
      IMPORTING
        key           TYPE clike OPTIONAL
        value         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS toggle_button
      IMPORTING
        text          TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        pressed       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS button
      IMPORTING
        text             TYPE clike OPTIONAL
        icon             TYPE clike OPTIONAL
        type             TYPE clike OPTIONAL
        enabled          TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
        press            TYPE clike OPTIONAL
        class            TYPE clike OPTIONAL
        id               TYPE clike OPTIONAL
        ns               TYPE clike OPTIONAL
        tooltip          TYPE clike OPTIONAL
        width            TYPE clike OPTIONAL
        iconfirst        TYPE clike OPTIONAL
        icondensityaware TYPE clike OPTIONAL
        ariahaspopup     TYPE clike OPTIONAL
        activeicon       TYPE clike OPTIONAL
        accessiblerole   TYPE clike OPTIONAL
        textdirection    TYPE clike OPTIONAL
        arialabelledby   TYPE clike OPTIONAL
        ariadescribedby  TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS begin_button
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS end_button
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS search_field
      IMPORTING
        search            TYPE clike OPTIONAL
        width             TYPE clike OPTIONAL
        value             TYPE clike OPTIONAL
        id                TYPE clike OPTIONAL
        class             TYPE clike OPTIONAL
        change            TYPE clike OPTIONAL
        livechange        TYPE clike OPTIONAL
        suggest           TYPE clike OPTIONAL
        enabled           TYPE clike OPTIONAL
        enablesuggestions TYPE clike OPTIONAL
        maxlength         TYPE clike OPTIONAL
        placeholder       TYPE clike OPTIONAL
        showrefreshbutton TYPE clike OPTIONAL
        showsearchbutton  TYPE clike OPTIONAL
        visible           TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS message_view
      IMPORTING
        items         TYPE clike OPTIONAL
        groupitems    TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS barcode_scanner_button
      IMPORTING !id                       TYPE clike OPTIONAL
                scansuccess               TYPE clike OPTIONAL
                scanfail                  TYPE clike OPTIONAL
                inputliveupdate           TYPE clike OPTIONAL
                dialogtitle               TYPE clike OPTIONAL
                disableBarcodeInputDialog TYPE clike OPTIONAL
                frameRate                 TYPE clike OPTIONAL
                keepCameraScan            TYPE clike OPTIONAL
                preferFrontCamera         TYPE clike OPTIONAL
                provideFallback           TYPE clike OPTIONAL
                !width                    TYPE clike OPTIONAL
                zoom                      TYPE clike OPTIONAL
      RETURNING VALUE(result)             TYPE REF TO z2ui5_cl_xml_view.

    METHODS message_popover
      IMPORTING
        items             TYPE clike OPTIONAL
        groupitems        TYPE clike OPTIONAL
        listselect        TYPE clike OPTIONAL
        activetitlepress  TYPE clike OPTIONAL
        placement         TYPE clike OPTIONAL
        afterclose        TYPE clike OPTIONAL
        beforeclose       TYPE clike OPTIONAL
        initiallyexpanded TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS message_item
      IMPORTING
        type              TYPE clike OPTIONAL
        title             TYPE clike OPTIONAL
        subtitle          TYPE clike OPTIONAL
        description       TYPE clike OPTIONAL
        groupname         TYPE clike OPTIONAL
        markupdescription TYPE clike OPTIONAL
        textdirection     TYPE clike OPTIONAL
        longtexturl       TYPE clike OPTIONAL
        counter           TYPE clike OPTIONAL
        activetitle       TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS page
      IMPORTING
        title            TYPE clike OPTIONAL
        navbuttonpress   TYPE clike OPTIONAL
        shownavbutton    TYPE clike OPTIONAL
        showheader       TYPE clike OPTIONAL
        id               TYPE clike OPTIONAL
        class            TYPE clike OPTIONAL
        ns               TYPE clike OPTIONAL
        backgrounddesign TYPE clike OPTIONAL
        contentonlybusy  TYPE clike OPTIONAL
        enablescrolling  TYPE clike OPTIONAL
        navbuttontooltip TYPE clike OPTIONAL
        floatingfooter   TYPE clike OPTIONAL
        showfooter       TYPE clike OPTIONAL
        showsubheader    TYPE clike OPTIONAL
        titlealignment   TYPE clike OPTIONAL
        titlelevel       TYPE clike OPTIONAL
          PREFERRED PARAMETER title
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS menu_button
      IMPORTING
        text          TYPE clike OPTIONAL
        activeicon    TYPE clike OPTIONAL
        buttonmode    TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        defaultaction TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS panel
      IMPORTING
        expandable       TYPE clike OPTIONAL
        expanded         TYPE clike OPTIONAL
        headertext       TYPE clike OPTIONAL
        stickyheader     TYPE clike OPTIONAL
        height           TYPE clike OPTIONAL
        class            TYPE clike OPTIONAL
        id               TYPE clike OPTIONAL
        width            TYPE clike OPTIONAL
        backgrounddesign TYPE clike OPTIONAL
        expandanimation  TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
        expand           TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS vbox
      IMPORTING
        id               TYPE clike OPTIONAL
        height           TYPE clike OPTIONAL
        justifycontent   TYPE clike OPTIONAL
        class            TYPE clike OPTIONAL
        rendertype       TYPE clike OPTIONAL
        aligncontent     TYPE clike OPTIONAL
        direction        TYPE clike OPTIONAL
        alignitems       TYPE clike OPTIONAL
        width            TYPE clike OPTIONAL
        wrap             TYPE clike OPTIONAL
        backgrounddesign TYPE clike OPTIONAL
        displayinline    TYPE clike OPTIONAL
        fitcontainer     TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
          PREFERRED PARAMETER class
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS hbox
      IMPORTING
        id               TYPE clike OPTIONAL
        class            TYPE clike OPTIONAL
        justifycontent   TYPE clike OPTIONAL
        aligncontent     TYPE clike OPTIONAL
        alignitems       TYPE clike OPTIONAL
        width            TYPE clike OPTIONAL
        height           TYPE clike OPTIONAL
        rendertype       TYPE clike OPTIONAL
        wrap             TYPE clike OPTIONAL
        backgrounddesign TYPE clike OPTIONAL
        direction        TYPE clike OPTIONAL
        displayinline    TYPE clike OPTIONAL
        fitcontainer     TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS scroll_container
      IMPORTING
        height        TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        vertical      TYPE clike OPTIONAL
        horizontal    TYPE clike OPTIONAL
        id            TYPE clike OPTIONAL
        focusable     TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
          PREFERRED PARAMETER height
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS simple_form
      IMPORTING
        title                   TYPE clike OPTIONAL
        layout                  TYPE clike OPTIONAL
        class                   TYPE clike OPTIONAL
        editable                TYPE clike OPTIONAL
        columnsxl               TYPE clike OPTIONAL
        columnsl                TYPE clike OPTIONAL
        columnsm                TYPE clike OPTIONAL
        id                      TYPE clike OPTIONAL
        adjustlabelspan         TYPE clike OPTIONAL
        backgrounddesign        TYPE clike OPTIONAL
        breakpointl             TYPE clike OPTIONAL
        breakpointm             TYPE clike OPTIONAL
        breakpointxl            TYPE clike OPTIONAL
        emptyspanl              TYPE clike OPTIONAL
        emptyspanm              TYPE clike OPTIONAL
        emptyspans              TYPE clike OPTIONAL
        emptyspanxl             TYPE clike OPTIONAL
        labelspans              TYPE clike OPTIONAL
        labelspanm              TYPE clike OPTIONAL
        labelspanl              TYPE clike OPTIONAL
        labelspanxl             TYPE clike OPTIONAL
        maxcontainercols        TYPE clike OPTIONAL
        minwidth                TYPE clike OPTIONAL
        singlecontainerfullsize TYPE clike OPTIONAL
        visible                 TYPE clike OPTIONAL
        width                   TYPE clike OPTIONAL
          PREFERRED PARAMETER title
      RETURNING
        VALUE(result)           TYPE REF TO z2ui5_cl_xml_view.

    METHODS _cc_plain_xml
      IMPORTING
        val           TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS content
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS title
      IMPORTING
        ns            TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        wrapping      TYPE clike OPTIONAL
        level         TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        id            TYPE clike OPTIONAL
        textalign     TYPE clike OPTIONAL
        textdirection TYPE clike OPTIONAL
        titlestyle    TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        wrappingtype  TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
          PREFERRED PARAMETER text
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS tab_container
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS tab
      IMPORTING
        text          TYPE clike OPTIONAL
        selected      TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS overflow_toolbar
      IMPORTING
        press         TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        active        TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        asyncmode     TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        design        TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        style         TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        id            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS overflow_toolbar_toggle_button
      IMPORTING
        text          TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
        tooltip       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS overflow_toolbar_button
      IMPORTING
        id            TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
        tooltip       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS overflow_toolbar_menu_button
      IMPORTING
        text          TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        buttonmode    TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        tooltip       TYPE clike OPTIONAL
        defaultaction TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS menu_item
      IMPORTING
        press         TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS toolbar_spacer
      IMPORTING
        ns            TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS label
      IMPORTING
        text          TYPE clike OPTIONAL
        labelfor      TYPE clike OPTIONAL
        design        TYPE clike OPTIONAL
        displayonly   TYPE clike OPTIONAL
        required      TYPE clike OPTIONAL
        showcolon     TYPE clike OPTIONAL
        textalign     TYPE clike OPTIONAL
        textdirection TYPE clike OPTIONAL
        valign        TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        wrapping      TYPE clike OPTIONAL
        wrappingtype  TYPE clike OPTIONAL
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
          PREFERRED PARAMETER text
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS image
      IMPORTING
        src                TYPE clike OPTIONAL
        class              TYPE clike OPTIONAL
        height             TYPE clike OPTIONAL
        width              TYPE clike OPTIONAL
        usemap             TYPE clike OPTIONAL
        mode               TYPE clike OPTIONAL
        lazyloading        TYPE clike OPTIONAL
        densityaware       TYPE clike OPTIONAL
        decorative         TYPE clike OPTIONAL
        backgroundsize     TYPE clike OPTIONAL
        backgroundrepeat   TYPE clike OPTIONAL
        backgroundposition TYPE clike OPTIONAL
        ariahaspopup       TYPE clike OPTIONAL
        alt                TYPE clike OPTIONAL
        activesrc          TYPE clike OPTIONAL
        press              TYPE clike OPTIONAL
        load               TYPE clike OPTIONAL
        error              TYPE clike OPTIONAL
        id                 TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS date_picker
      IMPORTING
        value                   TYPE clike OPTIONAL
        placeholder             TYPE clike OPTIONAL
        displayformat           TYPE clike OPTIONAL
        valueformat             TYPE clike OPTIONAL
        required                TYPE clike OPTIONAL
        valuestate              TYPE clike OPTIONAL
        valuestatetext          TYPE clike OPTIONAL
        enabled                 TYPE clike OPTIONAL
        showcurrentdatebutton   TYPE clike OPTIONAL
        change                  TYPE clike OPTIONAL
        hideinput               TYPE clike OPTIONAL
        showfooter              TYPE clike OPTIONAL
        visible                 TYPE clike OPTIONAL
        showvaluestatemessage   TYPE clike OPTIONAL
        mindate                 TYPE clike OPTIONAL
        maxdate                 TYPE clike OPTIONAL
        editable                TYPE clike OPTIONAL
        width                   TYPE clike OPTIONAL
        id                      TYPE clike OPTIONAL
        calendarweeknumbering   TYPE clike OPTIONAL
        displayformattype       TYPE clike OPTIONAL
        class                   TYPE clike OPTIONAL
        textdirection           TYPE clike OPTIONAL
        textalign               TYPE clike OPTIONAL
        name                    TYPE clike OPTIONAL
        datevalue               TYPE clike OPTIONAL
        initialfocuseddatevalue TYPE clike OPTIONAL
          PREFERRED PARAMETER value
      RETURNING
        VALUE(result)           TYPE REF TO z2ui5_cl_xml_view.

    METHODS time_picker
      IMPORTING
        value                   TYPE clike OPTIONAL
        placeholder             TYPE clike OPTIONAL
        enabled                 TYPE clike OPTIONAL
        valuestate              TYPE clike OPTIONAL
        displayformat           TYPE clike OPTIONAL
        valueformat             TYPE clike OPTIONAL
        required                TYPE clike OPTIONAL
        width                   TYPE clike OPTIONAL
        datevalue               TYPE clike OPTIONAL
        localeid                TYPE clike OPTIONAL
        mask                    TYPE clike OPTIONAL
        maskmode                TYPE clike OPTIONAL
        minutesstep             TYPE clike OPTIONAL
        name                    TYPE clike OPTIONAL
        placeholdersymbol       TYPE clike OPTIONAL
        secondsstep             TYPE clike OPTIONAL
        textalign               TYPE clike OPTIONAL
        textdirection           TYPE clike OPTIONAL
        title                   TYPE clike OPTIONAL
        showcurrenttimebutton   TYPE clike OPTIONAL
        showvaluestatemessage   TYPE clike OPTIONAL
        support2400             TYPE clike OPTIONAL
        initialfocuseddatevalue TYPE clike OPTIONAL
        hideinput               TYPE clike OPTIONAL
        editable                TYPE clike OPTIONAL
        visible                 TYPE clike OPTIONAL
        valuestatetext          TYPE clike OPTIONAL
        livechange              TYPE clike OPTIONAL
        change                  TYPE clike OPTIONAL
        aftervaluehelpopen      TYPE clike OPTIONAL
        aftervaluehelpclose     TYPE clike OPTIONAL
          PREFERRED PARAMETER value
      RETURNING
        VALUE(result)           TYPE REF TO z2ui5_cl_xml_view.

    METHODS date_time_picker
      IMPORTING
        value         TYPE clike OPTIONAL
        placeholder   TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        valuestate    TYPE clike OPTIONAL
          PREFERRED PARAMETER value
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS link
      IMPORTING
        text               TYPE clike OPTIONAL
        href               TYPE clike OPTIONAL
        target             TYPE clike OPTIONAL
        enabled            TYPE clike OPTIONAL
        press              TYPE clike OPTIONAL
        id                 TYPE clike OPTIONAL
        ns                 TYPE clike OPTIONAL
        wrapping           TYPE clike OPTIONAL
        width              TYPE clike OPTIONAL
        validateurl        TYPE clike OPTIONAL
        textdirection      TYPE clike OPTIONAL
        textalign          TYPE clike OPTIONAL
        subtle             TYPE clike OPTIONAL
        rel                TYPE clike OPTIONAL
        emptyindicatormode TYPE clike OPTIONAL
        emphasized         TYPE clike OPTIONAL
        ariahaspopup       TYPE clike OPTIONAL
        accessiblerole     TYPE clike OPTIONAL
        class              TYPE clike OPTIONAL
        endicon            TYPE clike OPTIONAL
        icon               TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS list
      IMPORTING
        headertext             TYPE clike OPTIONAL
        items                  TYPE clike OPTIONAL
        mode                   TYPE clike OPTIONAL
        selectionchange        TYPE clike OPTIONAL
        showseparators         TYPE clike OPTIONAL
        footertext             TYPE clike OPTIONAL
        growingdirection       TYPE clike OPTIONAL
        growingthreshold       TYPE clike OPTIONAL
        growingtriggertext     TYPE clike OPTIONAL
        headerlevel            TYPE clike OPTIONAL
        multiselectmode        TYPE clike OPTIONAL
        nodatatext             TYPE clike OPTIONAL
        sticky                 TYPE clike OPTIONAL
        modeanimationon        TYPE clike OPTIONAL
        growingscrolltoload    TYPE clike OPTIONAL
        includeiteminselection TYPE clike OPTIONAL
        growing                TYPE clike OPTIONAL
        inset                  TYPE clike OPTIONAL
        backgrounddesign       TYPE clike OPTIONAL
        rememberselections     TYPE clike OPTIONAL
        showunread             TYPE clike OPTIONAL
        visible                TYPE clike OPTIONAL
        nodata                 TYPE clike OPTIONAL
        id                     TYPE clike OPTIONAL
        itempress              TYPE clike OPTIONAL
        select                 TYPE clike OPTIONAL
        delete                 TYPE clike OPTIONAL
        class                  TYPE clike OPTIONAL
      RETURNING
        VALUE(result)          TYPE REF TO z2ui5_cl_xml_view.

    METHODS custom_list_item
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS input_list_item
      IMPORTING
        label         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS standard_list_item
      IMPORTING
        title             TYPE clike OPTIONAL
        description       TYPE clike OPTIONAL
        icon              TYPE clike OPTIONAL
        info              TYPE clike OPTIONAL
        press             TYPE clike OPTIONAL
        type              TYPE clike OPTIONAL
        selected          TYPE clike OPTIONAL
        counter           TYPE clike OPTIONAL
        wrapping          TYPE clike OPTIONAL
        wrapcharlimit     TYPE clike OPTIONAL
        infostateinverted TYPE clike OPTIONAL
        infostate         TYPE clike OPTIONAL
        iconinset         TYPE clike OPTIONAL
        adapttitlesize    TYPE clike OPTIONAL
        activeicon        TYPE clike OPTIONAL
        unread            TYPE clike OPTIONAL
        highlight         TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS item
      IMPORTING
        key           TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS segmented_button_item
      IMPORTING
        icon          TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        textdirection TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS combobox
      IMPORTING
        selectedkey           TYPE clike OPTIONAL
        showclearicon         TYPE clike OPTIONAL
        selectionchange       TYPE clike OPTIONAL
        selecteditem          TYPE clike OPTIONAL
        items                 TYPE clike OPTIONAL
        change                TYPE clike OPTIONAL
        width                 TYPE clike OPTIONAL
        showsecondaryvalues   TYPE clike OPTIONAL
        placeholder           TYPE clike OPTIONAL
        selecteditemid        TYPE clike OPTIONAL
        name                  TYPE clike OPTIONAL
        value                 TYPE clike OPTIONAL
        valuestate            TYPE clike OPTIONAL
        valuestatetext        TYPE clike OPTIONAL
        textalign             TYPE clike OPTIONAL
        visible               TYPE clike OPTIONAL
        showvaluestatemessage TYPE clike OPTIONAL
        showbutton            TYPE clike OPTIONAL
        required              TYPE clike OPTIONAL
        editable              TYPE clike OPTIONAL
        enabled               TYPE clike OPTIONAL
        filtersecondaryvalues TYPE clike OPTIONAL
        id                    TYPE clike OPTIONAL
        class                 TYPE clike OPTIONAL
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS multi_combobox
      IMPORTING
        selectionchange       TYPE clike OPTIONAL
        selectedkeys          TYPE clike OPTIONAL
        selecteditems         TYPE clike OPTIONAL
        items                 TYPE clike OPTIONAL
        selectionfinish       TYPE clike OPTIONAL
        width                 TYPE clike OPTIONAL
        showclearicon         TYPE clike OPTIONAL
        showsecondaryvalues   TYPE clike OPTIONAL
        placeholder           TYPE clike OPTIONAL
        selecteditemid        TYPE clike OPTIONAL
        selectedkey           TYPE clike OPTIONAL
        name                  TYPE clike OPTIONAL
        value                 TYPE clike OPTIONAL
        valuestate            TYPE clike OPTIONAL
        valuestatetext        TYPE clike OPTIONAL
        textalign             TYPE clike OPTIONAL
        visible               TYPE clike OPTIONAL
        showvaluestatemessage TYPE clike OPTIONAL
        showbutton            TYPE clike OPTIONAL
        required              TYPE clike OPTIONAL
        editable              TYPE clike OPTIONAL
        enabled               TYPE clike OPTIONAL
        filtersecondaryvalues TYPE clike OPTIONAL
        showselectall         TYPE clike OPTIONAL
        id                    TYPE clike OPTIONAL
        class                 TYPE clike OPTIONAL
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS grid
      IMPORTING
        class          TYPE clike OPTIONAL
        default_span   TYPE clike OPTIONAL
        containerquery TYPE clike OPTIONAL
        hspacing       TYPE clike OPTIONAL
        vspacing       TYPE clike OPTIONAL
        width          TYPE clike OPTIONAL
        content        TYPE clike OPTIONAL
          PREFERRED PARAMETER default_span
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS grid_box_layout
      IMPORTING boxesperrowconfig TYPE clike OPTIONAL
                boxMinWidth       TYPE clike OPTIONAL
                boxWidth          TYPE clike OPTIONAL
      RETURNING VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS grid_data
      IMPORTING
        span          TYPE clike OPTIONAL
        linebreak     TYPE clike OPTIONAL
        indentl       TYPE clike OPTIONAL
        indentm       TYPE clike OPTIONAL
          PREFERRED PARAMETER span
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS grid_drop_info
      IMPORTING targetAggregation TYPE clike OPTIONAL
                dropPosition      TYPE clike OPTIONAL
                dropLayout        TYPE clike OPTIONAL
                drop              TYPE clike OPTIONAL
                dragEnter         TYPE clike OPTIONAL
                dragOver          TYPE clike OPTIONAL
      RETURNING VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS grid_list
      IMPORTING !id                    TYPE clike     OPTIONAL
                busy                   TYPE abap_bool OPTIONAL
                busyIndicatorDelay     TYPE clike     OPTIONAL
                busyIndicatorSize      TYPE clike     OPTIONAL
                enableBusyIndicator    TYPE abap_bool OPTIONAL
                fieldGroupIds          TYPE clike     OPTIONAL
                footerText             TYPE clike     OPTIONAL
                growing                TYPE abap_bool OPTIONAL
                growingDirection       TYPE clike     OPTIONAL
                growingScrollToLoad    TYPE abap_bool OPTIONAL
                growingThreshold       TYPE clike     OPTIONAL
                growingTriggerText     TYPE clike     OPTIONAL
                headerLevel            TYPE clike     OPTIONAL
                headerText             TYPE clike     OPTIONAL
                includeItemInSelection TYPE abap_bool OPTIONAL
                inset                  TYPE abap_bool OPTIONAL
                keyboardMode           TYPE clike     OPTIONAL
                !mode                  TYPE clike     OPTIONAL
                modeAnimationOn        TYPE abap_bool OPTIONAL
                multiSelectMode        TYPE clike     OPTIONAL
                noDataText             TYPE clike     OPTIONAL
                rememberSelections     TYPE abap_bool OPTIONAL
                showNoData             TYPE abap_bool OPTIONAL
                showSeparators         TYPE clike     OPTIONAL
                showUnread             TYPE abap_bool OPTIONAL
                sticky                 TYPE clike     OPTIONAL
                swipeDirection         TYPE clike     OPTIONAL
                !visible               TYPE abap_bool DEFAULT abap_true
                !width                 TYPE clike     OPTIONAL
                items                  TYPE clike     OPTIONAL
      RETURNING VALUE(result)          TYPE REF TO z2ui5_cl_xml_view.

    METHODS grid_list_item
      IMPORTING busy               TYPE clike OPTIONAL
                busyIndicatorDelay TYPE clike OPTIONAL
                busyIndicatorSize  TYPE clike OPTIONAL
                counter            TYPE clike OPTIONAL
                fieldGroupIds      TYPE clike OPTIONAL
                highlight          TYPE clike OPTIONAL
                highlightText      TYPE clike OPTIONAL
                navigated          TYPE clike OPTIONAL
                selected           TYPE clike OPTIONAL
                !type              TYPE clike OPTIONAL
                unread             TYPE clike OPTIONAL
                !visible           TYPE clike DEFAULT `true`
                detailPress        TYPE clike OPTIONAL
                detailTap          TYPE clike OPTIONAL
                press              TYPE clike OPTIONAL
                tap                TYPE clike OPTIONAL
      RETURNING VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS text_area
      IMPORTING
        value                 TYPE clike OPTIONAL
        rows                  TYPE clike OPTIONAL
        cols                  TYPE clike OPTIONAL
        height                TYPE clike OPTIONAL
        class                 TYPE clike OPTIONAL
        width                 TYPE clike OPTIONAL
        valueliveupdate       TYPE clike OPTIONAL
        editable              TYPE clike OPTIONAL
        enabled               TYPE clike OPTIONAL
        growing               TYPE clike OPTIONAL
        growingmaxlines       TYPE clike OPTIONAL
        id                    TYPE clike OPTIONAL
        required              TYPE clike OPTIONAL
        placeholder           TYPE clike OPTIONAL
        valuestate            TYPE clike OPTIONAL
        valuestatetext        TYPE clike OPTIONAL
        wrapping              TYPE clike OPTIONAL
        maxlength             TYPE clike OPTIONAL
        textalign             TYPE clike OPTIONAL
        textdirection         TYPE clike OPTIONAL
        showvaluestatemessage TYPE clike OPTIONAL
        showexceededtext      TYPE clike OPTIONAL
          PREFERRED PARAMETER value
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS range_slider
      IMPORTING
        max           TYPE clike OPTIONAL
        min           TYPE clike OPTIONAL
        step          TYPE clike OPTIONAL
        startvalue    TYPE clike OPTIONAL
        endvalue      TYPE clike OPTIONAL
        showtickmarks TYPE clike OPTIONAL
        labelinterval TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        id            TYPE clike OPTIONAL
        value         TYPE clike OPTIONAL
        value2        TYPE clike OPTIONAL
        change        TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS generic_tag
      IMPORTING
        id             TYPE clike OPTIONAL
        arialabelledby TYPE clike OPTIONAL
        text           TYPE clike OPTIONAL
        design         TYPE clike OPTIONAL
        status         TYPE clike OPTIONAL
        class          TYPE clike OPTIONAL
        press          TYPE clike OPTIONAL
        valuestate     TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_attribute
      IMPORTING
        title         TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        active        TYPE clike OPTIONAL
        ariahaspopup  TYPE clike OPTIONAL
        textdirection TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_number
      IMPORTING
        state              TYPE clike OPTIONAL
        emphasized         TYPE clike OPTIONAL
        number             TYPE clike OPTIONAL
        textdirection      TYPE clike OPTIONAL
        textalign          TYPE clike OPTIONAL
        numberunit         TYPE clike OPTIONAL
        inverted           TYPE clike OPTIONAL
        emptyindicatormode TYPE clike OPTIONAL
        active             TYPE clike OPTIONAL
        unit               TYPE clike OPTIONAL
        visible            TYPE clike OPTIONAL
        class              TYPE clike OPTIONAL
        id                 TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS switch
      IMPORTING
        state         TYPE clike OPTIONAL
        customtexton  TYPE clike OPTIONAL
        customtextoff TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        change        TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS harveyballmicrochartitem
      IMPORTING
        id            TYPE clike OPTIONAL
        color         TYPE clike OPTIONAL
        fraction      TYPE clike OPTIONAL
        fractionScale TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS step_input
      IMPORTING
        id                    TYPE clike OPTIONAL
        value                 TYPE clike OPTIONAL
        min                   TYPE clike OPTIONAL
        max                   TYPE clike OPTIONAL
        step                  TYPE clike OPTIONAL
        width                 TYPE clike OPTIONAL
        valuestate            TYPE clike OPTIONAL
        enabled               TYPE clike OPTIONAL
        description           TYPE clike OPTIONAL
        displayvalueprecision TYPE clike OPTIONAL
        largerstep            TYPE clike OPTIONAL
        stepmode              TYPE clike OPTIONAL
        editable              TYPE clike OPTIONAL
        fieldwidth            TYPE clike OPTIONAL
        textalign             TYPE clike OPTIONAL
        validationmode        TYPE clike OPTIONAL
        change                TYPE clike OPTIONAL
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS progress_indicator
      IMPORTING
        class         TYPE clike OPTIONAL
        percentvalue  TYPE clike OPTIONAL
        displayvalue  TYPE clike OPTIONAL
        showvalue     TYPE clike OPTIONAL
        state         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS segmented_button
      IMPORTING
        selected_key     TYPE clike OPTIONAL
        selection_change TYPE clike OPTIONAL
        id               TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
        enabled          TYPE clike OPTIONAL
          PREFERRED PARAMETER selected_key
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS checkbox
      IMPORTING
        text              TYPE clike OPTIONAL
        selected          TYPE clike OPTIONAL
        enabled           TYPE clike OPTIONAL
        select            TYPE clike OPTIONAL
        id                TYPE clike OPTIONAL
        class             TYPE clike OPTIONAL
        textalign         TYPE clike OPTIONAL
        textdirection     TYPE clike OPTIONAL
        width             TYPE clike OPTIONAL
        activehandling    TYPE clike OPTIONAL
        visible           TYPE clike OPTIONAL
        displayonly       TYPE clike OPTIONAL
        editable          TYPE clike OPTIONAL
        partiallyselected TYPE clike OPTIONAL
        useentirewidth    TYPE clike OPTIONAL
        wrapping          TYPE clike OPTIONAL
        name              TYPE clike OPTIONAL
        valuestate        TYPE clike OPTIONAL
        required          TYPE clike OPTIONAL
          PREFERRED PARAMETER selected
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS header_toolbar
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS toolbar
      IMPORTING
        ns            TYPE clike OPTIONAL
        id            TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        active        TYPE clike OPTIONAL
        ariahaspopup  TYPE clike OPTIONAL
        design        TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
        style         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS text
      IMPORTING
        text               TYPE clike OPTIONAL
        class              TYPE clike OPTIONAL
        ns                 TYPE clike OPTIONAL
        emptyindicatormode TYPE clike OPTIONAL
        maxlines           TYPE clike OPTIONAL
        renderwhitespace   TYPE clike OPTIONAL
        textalign          TYPE clike OPTIONAL
        textdirection      TYPE clike OPTIONAL
        width              TYPE clike OPTIONAL
        wrapping           TYPE clike OPTIONAL
        wrappingtype       TYPE clike OPTIONAL
        id                 TYPE clike OPTIONAL
        visible            TYPE clike OPTIONAL
          PREFERRED PARAMETER text
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS formatted_text
      IMPORTING
        htmltext                    TYPE clike OPTIONAL
        convertedlinksdefaulttarget TYPE clike OPTIONAL
        convertlinkstoanchortags    TYPE clike OPTIONAL
        height                      TYPE clike OPTIONAL
        textalign                   TYPE clike OPTIONAL
        textdirection               TYPE clike OPTIONAL
        visible                     TYPE clike OPTIONAL
        width                       TYPE clike OPTIONAL
        id                          TYPE clike OPTIONAL
        class                       TYPE clike OPTIONAL
        controls                    TYPE clike OPTIONAL
          PREFERRED PARAMETER htmltext
      RETURNING
        VALUE(result)               TYPE REF TO z2ui5_cl_xml_view.

    METHODS _generic
      IMPORTING
        name          TYPE clike
        ns            TYPE clike                           OPTIONAL
        t_prop        TYPE z2ui5_if_types=>ty_t_name_value OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS _generic_property
      IMPORTING
        val           TYPE z2ui5_if_types=>ty_s_name_value OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS xml_get
      RETURNING
        VALUE(result) TYPE string.

    METHODS stringify
      RETURNING
        VALUE(result) TYPE string.

    METHODS tree_table
      IMPORTING
        rows                   TYPE clike OPTIONAL
        selectionmode          TYPE clike OPTIONAL
        enablecolumnreordering TYPE clike OPTIONAL
        expandfirstlevel       TYPE clike OPTIONAL
        columnselect           TYPE clike OPTIONAL
        rowselectionchange     TYPE clike OPTIONAL
        selectionbehavior      TYPE clike OPTIONAL
        id                     TYPE clike OPTIONAL
        alternaterowcolors     TYPE clike OPTIONAL
        columnheadervisible    TYPE clike OPTIONAL
        enablecellfilter       TYPE clike OPTIONAL
        enablecolumnfreeze     TYPE clike OPTIONAL
        enablecustomfilter     TYPE clike OPTIONAL
        enableselectall        TYPE clike OPTIONAL
        shownodata             TYPE clike OPTIONAL
        showoverlay            TYPE clike OPTIONAL
        visible                TYPE clike OPTIONAL
        columnheaderheight     TYPE clike OPTIONAL
        firstvisiblerow        TYPE clike OPTIONAL
        fixedcolumncount       TYPE clike OPTIONAL
        threshold              TYPE clike OPTIONAL
        width                  TYPE clike OPTIONAL
        usegroupmode           TYPE clike OPTIONAL
        groupheaderproperty    TYPE clike OPTIONAL
        rowactioncount         TYPE clike OPTIONAL
        selectedindex          TYPE clike OPTIONAL
        visiblerowcount        TYPE clike OPTIONAL
        visiblerowcountmode    TYPE clike OPTIONAL
        minautorowcount        TYPE clike OPTIONAL
        fixedbottomrowcount    TYPE clike OPTIONAL
        fixedrowcount          TYPE clike OPTIONAL
        rowheight              TYPE clike OPTIONAL
        toggleopenstate        TYPE clike OPTIONAL
      RETURNING
        VALUE(result)          TYPE REF TO z2ui5_cl_xml_view.

    METHODS tree_columns
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS tree_column
      IMPORTING
        label         TYPE clike
        template      TYPE clike OPTIONAL
        halign        TYPE clike DEFAULT 'Begin'
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS tree_template
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS filter_bar
      IMPORTING
        usetoolbar                   TYPE clike DEFAULT 'false'
        search                       TYPE clike OPTIONAL
        id                           TYPE clike OPTIONAL
        persistencykey               TYPE clike OPTIONAL
        aftervariantload             TYPE clike OPTIONAL
        aftervariantsave             TYPE clike OPTIONAL
        assignedfilterschanged       TYPE clike OPTIONAL
        beforevariantfetch           TYPE clike OPTIONAL
        cancel                       TYPE clike OPTIONAL
        clear                        TYPE clike OPTIONAL
        filterchange                 TYPE clike OPTIONAL
        filtersdialogbeforeopen      TYPE clike OPTIONAL
        filtersdialogcancel          TYPE clike OPTIONAL
        filtersdialogclosed          TYPE clike OPTIONAL
        initialise                   TYPE clike OPTIONAL
        initialized                  TYPE clike OPTIONAL
        reset                        TYPE clike OPTIONAL
        filtercontainerwidth         TYPE clike OPTIONAL
        header                       TYPE clike OPTIONAL
        advancedmode                 TYPE clike OPTIONAL
        isrunninginvaluehelpdialog   TYPE clike OPTIONAL
        showallfilters               TYPE clike OPTIONAL
        showclearonfb                TYPE clike OPTIONAL
        showfilterconfiguration      TYPE clike OPTIONAL
        showgoonfb                   TYPE clike OPTIONAL
        showrestorebutton            TYPE clike OPTIONAL
        showrestoreonfb              TYPE clike OPTIONAL
        usesnapshot                  TYPE clike OPTIONAL
        searchenabled                TYPE clike OPTIONAL
        considergrouptitle           TYPE clike OPTIONAL
        deltavariantmode             TYPE clike OPTIONAL
        disablesearchmatchespatternw TYPE clike OPTIONAL
        filterbarexpanded            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)                TYPE REF TO z2ui5_cl_xml_view.

    METHODS filter_group_items
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS filter_group_item
      IMPORTING
        name               TYPE clike OPTIONAL
        label              TYPE clike OPTIONAL
        groupname          TYPE clike OPTIONAL
        visibleinfilterbar TYPE clike OPTIONAL
        mandatory          TYPE clike OPTIONAL
        controltooltip     TYPE clike OPTIONAL
        entitysetname      TYPE clike OPTIONAL
        entitytypename     TYPE clike OPTIONAL
        grouptitle         TYPE clike OPTIONAL
        hiddenfilter       TYPE clike OPTIONAL
        labeltooltip       TYPE clike OPTIONAL
        visible            TYPE clike OPTIONAL
        change             TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS filter_control
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS flexible_column_layout
      IMPORTING
        layout                        TYPE clike
        id                            TYPE clike
        backgrounddesign              TYPE clike OPTIONAL
        defaulttransitionnamebegincol TYPE clike OPTIONAL
        defaulttransitionnameendcol   TYPE clike OPTIONAL
        defaulttransitionnamemidcol   TYPE clike OPTIONAL
        autofocus                     TYPE clike OPTIONAL
        restorefocusonbacknavigation  TYPE clike OPTIONAL
        class                         TYPE clike OPTIONAL
        afterbegincolumnnavigate      TYPE clike OPTIONAL
        afterendcolumnnavigate        TYPE clike OPTIONAL
        aftermidcolumnnavigate        TYPE clike OPTIONAL
        begincolumnnavigate           TYPE clike OPTIONAL
        columnresize                  TYPE clike OPTIONAL
        endcolumnnavigate             TYPE clike OPTIONAL
        midcolumnnavigate             TYPE clike OPTIONAL
        statechange                   TYPE clike OPTIONAL
      RETURNING
        VALUE(result)                 TYPE REF TO z2ui5_cl_xml_view.

    METHODS begin_column_pages
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS mid_column_pages
      IMPORTING
        id            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS end_column_pages
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS ui_table
      IMPORTING
        rows                     TYPE clike OPTIONAL
        columnheadervisible      TYPE clike OPTIONAL
        editable                 TYPE clike OPTIONAL
        class                    TYPE clike OPTIONAL
        enablecellfilter         TYPE clike OPTIONAL
        enablegrouping           TYPE clike OPTIONAL
        enableselectall          TYPE clike OPTIONAL
        firstvisiblerow          TYPE clike OPTIONAL
        fixedbottomrowcount      TYPE clike OPTIONAL
        fixedcolumncount         TYPE clike OPTIONAL
        fixedrowcount            TYPE clike OPTIONAL
        minautorowcount          TYPE clike OPTIONAL
        rowactioncount           TYPE clike OPTIONAL
        rowheight                TYPE clike OPTIONAL
        selectionmode            TYPE clike OPTIONAL
        showcolumnvisibilitymenu TYPE clike OPTIONAL
        shownodata               TYPE clike OPTIONAL
        selectedindex            TYPE clike OPTIONAL
        threshold                TYPE clike OPTIONAL
        visiblerowcount          TYPE clike OPTIONAL
        visiblerowcountmode      TYPE clike OPTIONAL
        alternaterowcolors       TYPE clike OPTIONAL
        footer                   TYPE clike OPTIONAL
        filter                   TYPE clike OPTIONAL
        sort                     TYPE clike OPTIONAL
        rowselectionchange       TYPE clike OPTIONAL
        customfilter             TYPE clike OPTIONAL
        id                       TYPE clike OPTIONAL
        flex                     TYPE clike OPTIONAL
        selectionbehavior        TYPE clike OPTIONAL
        rowmode                  TYPE clike OPTIONAL
          PREFERRED PARAMETER rows
      RETURNING
        VALUE(result)            TYPE REF TO z2ui5_cl_xml_view.

    METHODS ui_column
      IMPORTING
        id                    TYPE clike OPTIONAL
        width                 TYPE clike OPTIONAL
        showsortmenuentry     TYPE clike OPTIONAL
        sortproperty          TYPE clike OPTIONAL
        autoResizable         TYPE clike OPTIONAL
        filterproperty        TYPE clike OPTIONAL
        showfiltermenuentry   TYPE clike OPTIONAL
        defaultfilteroperator TYPE clike OPTIONAL
        filtertype            TYPE clike OPTIONAL
        halign                TYPE clike OPTIONAL
        minwidth              TYPE clike OPTIONAL
        resizable             TYPE clike OPTIONAL
        visible               TYPE clike OPTIONAL
          PREFERRED PARAMETER width
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS ui_columns
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS ui_custom_data
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS ui_extension
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS ui_template
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS currency
      IMPORTING
        value         TYPE clike OPTIONAL
        currency      TYPE clike OPTIONAL
        usesymbol     TYPE clike OPTIONAL
        maxprecision  TYPE clike OPTIONAL
        stringvalue   TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS ui_row_action
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS ui_row_action_template
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS ui_row_action_item
      IMPORTING
        icon          TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS radio_button
      IMPORTING
        id             TYPE clike OPTIONAL
        activehandling TYPE clike OPTIONAL
        editable       TYPE clike OPTIONAL
        enabled        TYPE clike OPTIONAL
        groupname      TYPE clike OPTIONAL
        selected       TYPE clike OPTIONAL
        text           TYPE clike OPTIONAL
        textalign      TYPE clike OPTIONAL
        textdirection  TYPE clike OPTIONAL
        useentirewidth TYPE clike OPTIONAL
        valuestate     TYPE clike OPTIONAL
        width          TYPE clike OPTIONAL
        select         TYPE clike OPTIONAL
        visible        TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS radio_button_group
      IMPORTING
        id            TYPE clike OPTIONAL
        columns       TYPE clike OPTIONAL
        editable      TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        selectedindex TYPE clike OPTIONAL
        textdirection TYPE clike OPTIONAL
        valuestate    TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        select        TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS dynamic_side_content
      IMPORTING
        id                    TYPE clike OPTIONAL
        class                 TYPE clike OPTIONAL
        sidecontentvisibility TYPE clike OPTIONAL
        showsidecontent       TYPE clike OPTIONAL
        containerquery        TYPE clike OPTIONAL
          PREFERRED PARAMETER id
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS side_content
      IMPORTING
        width         TYPE clike OPTIONAL
          PREFERRED PARAMETER width
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS planning_calendar
      IMPORTING
        rows                          TYPE clike OPTIONAL
        id                            TYPE clike OPTIONAL
        class                         TYPE clike OPTIONAL
        startdate                     TYPE clike OPTIONAL
        appointmentsvisualization     TYPE clike OPTIONAL
        appointmentselect             TYPE clike OPTIONAL
        showemptyintervalheaders      TYPE clike OPTIONAL
        showweeknumbers               TYPE clike OPTIONAL
        showdaynamesline              TYPE clike OPTIONAL
        legend                        TYPE clike OPTIONAL
        appointmentheight             TYPE clike OPTIONAL
        appointmentroundwidth         TYPE clike OPTIONAL
        builtinviews                  TYPE clike OPTIONAL
        calendarweeknumbering         TYPE clike OPTIONAL
        firstdayofweek                TYPE clike OPTIONAL
        height                        TYPE clike OPTIONAL
        groupappointmentsmode         TYPE clike OPTIONAL
        iconshape                     TYPE clike OPTIONAL
        maxdate                       TYPE clike OPTIONAL
        mindate                       TYPE clike OPTIONAL
        nodatatext                    TYPE clike OPTIONAL
        primarycalendartype           TYPE clike OPTIONAL
        secondarycalendartype         TYPE clike OPTIONAL
        intervalselect                TYPE clike OPTIONAL
        rowheaderpress                TYPE clike OPTIONAL
        rowselectionchange            TYPE clike OPTIONAL
        startdatechange               TYPE clike OPTIONAL
        viewchange                    TYPE clike OPTIONAL
        stickyheader                  TYPE clike OPTIONAL
        viewkey                       TYPE clike OPTIONAL
        width                         TYPE clike OPTIONAL
        singleselection               TYPE clike OPTIONAL
        showrowheaders                TYPE clike OPTIONAL
        multipleappointmentsselection TYPE clike OPTIONAL
        showintervalheaders           TYPE clike OPTIONAL
          PREFERRED PARAMETER rows
      RETURNING
        VALUE(result)                 TYPE REF TO z2ui5_cl_xml_view.

    METHODS planning_calendar_view
      IMPORTING
        appointmentheight      TYPE clike OPTIONAL
        description            TYPE clike OPTIONAL
        intervallabelformatter TYPE clike OPTIONAL
        intervalsize           TYPE clike OPTIONAL
        intervalsl             TYPE clike OPTIONAL
        intervalsm             TYPE clike OPTIONAL
        intervalss             TYPE clike OPTIONAL
        intervaltype           TYPE clike OPTIONAL
        key                    TYPE clike OPTIONAL
        relative               TYPE clike OPTIONAL
        showsubintervals       TYPE clike OPTIONAL
      RETURNING
        VALUE(result)          TYPE REF TO z2ui5_cl_xml_view.

    METHODS planning_calendar_row
      IMPORTING
        appointments                  TYPE clike OPTIONAL
        intervalheaders               TYPE clike OPTIONAL
        icon                          TYPE clike OPTIONAL
        title                         TYPE clike OPTIONAL
        key                           TYPE clike OPTIONAL
        text                          TYPE clike OPTIONAL
        enableappointmentscreate      TYPE clike OPTIONAL
        enableappointmentsdraganddrop TYPE clike OPTIONAL
        enableappointmentsresize      TYPE clike OPTIONAL
        noappointmentstext            TYPE clike OPTIONAL
        nonworkinghours               TYPE clike OPTIONAL
        rowheaderdescription          TYPE clike OPTIONAL
        nonworkingdays                TYPE clike OPTIONAL
        selected                      TYPE clike OPTIONAL
        appointmentcreate             TYPE clike OPTIONAL
        appointmentdragenter          TYPE clike OPTIONAL
        appointmentdrop               TYPE clike OPTIONAL
        appointmentresize             TYPE clike OPTIONAL
        id                            TYPE clike OPTIONAL
        class                         TYPE clike OPTIONAL
          PREFERRED PARAMETER appointments
      RETURNING
        VALUE(result)                 TYPE REF TO z2ui5_cl_xml_view.

    METHODS planning_calendar_legend
      IMPORTING
        items            TYPE clike OPTIONAL
        id               TYPE clike OPTIONAL
        appointmentitems TYPE clike OPTIONAL
        standarditems    TYPE clike OPTIONAL
        columnwidth      TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
          PREFERRED PARAMETER items
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS calendar_legend_item
      IMPORTING
        text          TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        tooltip       TYPE clike OPTIONAL
        color         TYPE clike OPTIONAL
          PREFERRED PARAMETER text
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS appointment_items
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS info_label
      IMPORTING
        id            TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        rendermode    TYPE clike OPTIONAL
        colorscheme   TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        displayonly   TYPE clike OPTIONAL
        textdirection TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
          PREFERRED PARAMETER text
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS rows
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS appointments
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS calendar_appointment
      IMPORTING
        startdate     TYPE clike OPTIONAL
        enddate       TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        title         TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        tentative     TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
        selected      TYPE clike OPTIONAL
          PREFERRED PARAMETER startdate
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS interval_headers
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS block_layout
      IMPORTING
        background    TYPE clike OPTIONAL
        id            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS block_layout_row
      IMPORTING
        rowcolorset   TYPE clike OPTIONAL
        id            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS block_layout_cell
      IMPORTING
        backgroundcolorset   TYPE clike OPTIONAL
        backgroundcolorshade TYPE clike OPTIONAL
        title                TYPE clike OPTIONAL
        titlealignment       TYPE clike OPTIONAL
        titlelevel           TYPE clike OPTIONAL
        width                TYPE clike OPTIONAL
        class                TYPE clike OPTIONAL
        id                   TYPE clike OPTIONAL
      RETURNING
        VALUE(result)        TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_identifier
      IMPORTING
        emptyindicatormode TYPE clike OPTIONAL
        text               TYPE clike OPTIONAL
        textdirection      TYPE clike OPTIONAL
        title              TYPE clike OPTIONAL
        titleactive        TYPE clike OPTIONAL
        visible            TYPE clike OPTIONAL
        titlepress         TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_status
      IMPORTING
        active                TYPE clike OPTIONAL
        emptyindicatormode    TYPE clike OPTIONAL
        icon                  TYPE clike OPTIONAL
        icondensityaware      TYPE clike OPTIONAL
        inverted              TYPE clike OPTIONAL
        state                 TYPE clike OPTIONAL
        stateannouncementtext TYPE clike OPTIONAL
        text                  TYPE clike OPTIONAL
        textdirection         TYPE clike OPTIONAL
        title                 TYPE clike OPTIONAL
        press                 TYPE clike OPTIONAL
        visible               TYPE clike OPTIONAL
        id                    TYPE clike OPTIONAL
        class                 TYPE clike OPTIONAL
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS tree
      IMPORTING
        id                     TYPE clike     OPTIONAL
        items                  TYPE clike     OPTIONAL
        headertext             TYPE clike     OPTIONAL
        headerlevel            TYPE clike     OPTIONAL
        footertext             TYPE clike     OPTIONAL
        mode                   TYPE clike     OPTIONAL
        includeiteminselection TYPE abap_bool OPTIONAL
        inset                  TYPE abap_bool OPTIONAL
        width                  TYPE clike     OPTIONAL
        toggleopenstate        TYPE clike     OPTIONAL
        selectionchange        TYPE clike     OPTIONAL
        itempress              TYPE clike     OPTIONAL
        select                 TYPE clike     OPTIONAL
        multiselectmode        TYPE clike     OPTIONAL
        nodatatext             TYPE clike     OPTIONAL
        shownodata             TYPE clike     OPTIONAL
          PREFERRED PARAMETER items
      RETURNING
        VALUE(result)          TYPE REF TO z2ui5_cl_xml_view.

    METHODS standard_tree_item
      IMPORTING
        title         TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
        detailpress   TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        selected      TYPE clike OPTIONAL
        counter       TYPE clike OPTIONAL
        tooltip       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS icon_tab_bar
      IMPORTING
        class                  TYPE clike OPTIONAL
        select                 TYPE clike OPTIONAL
        expand                 TYPE clike OPTIONAL
        expandable             TYPE clike OPTIONAL
        expanded               TYPE clike OPTIONAL
        selectedkey            TYPE clike OPTIONAL
        uppercase              TYPE clike OPTIONAL
        tabsoverflowmode       TYPE clike OPTIONAL
        tabdensitymode         TYPE clike OPTIONAL
        stretchcontentheight   TYPE clike OPTIONAL
        maxnestinglevel        TYPE clike OPTIONAL
        headermode             TYPE clike OPTIONAL
        headerbackgrounddesign TYPE clike OPTIONAL
        enabletabreordering    TYPE clike OPTIONAL
        backgrounddesign       TYPE clike OPTIONAL
        applycontentpadding    TYPE clike OPTIONAL
        items                  TYPE clike OPTIONAL
        content                TYPE clike OPTIONAL
        id                     TYPE clike OPTIONAL
      RETURNING
        VALUE(result)          TYPE REF TO z2ui5_cl_xml_view.

    METHODS icon_tab_filter
      IMPORTING
        items            TYPE clike OPTIONAL
        showall          TYPE clike OPTIONAL
        icon             TYPE clike OPTIONAL
        iconcolor        TYPE clike OPTIONAL
        count            TYPE clike OPTIONAL
        text             TYPE clike OPTIONAL
        key              TYPE clike OPTIONAL
        design           TYPE clike OPTIONAL
        icondensityaware TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
        textdirection    TYPE clike OPTIONAL
        class            TYPE clike OPTIONAL
        id               TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS icon_tab_separator
      IMPORTING
        icon             TYPE clike OPTIONAL
        icondensityaware TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
        id               TYPE clike OPTIONAL
        class            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS _z2ui5
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view_cc.

    METHODS gantt_chart_container
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS container_toolbar
      IMPORTING
        showsearchbutton          TYPE clike OPTIONAL
        aligncustomcontenttoright TYPE clike OPTIONAL
        findmode                  TYPE clike OPTIONAL
        findbuttonpress           TYPE clike OPTIONAL
        infoofselectitems         TYPE clike OPTIONAL
        showbirdeyebutton         TYPE clike OPTIONAL
        showdisplaytypebutton     TYPE clike OPTIONAL
        showlegendbutton          TYPE clike OPTIONAL
        showsettingbutton         TYPE clike OPTIONAL
        showtimezoomcontrol       TYPE clike OPTIONAL
        stepcountofslider         TYPE clike OPTIONAL
        zoomcontroltype           TYPE clike OPTIONAL
        zoomlevel                 TYPE clike OPTIONAL
      RETURNING
        VALUE(result)             TYPE REF TO z2ui5_cl_xml_view.

    METHODS gantt_chart_with_table
      IMPORTING
        id                        TYPE clike OPTIONAL
        shapeselectionmode        TYPE clike OPTIONAL
        isconnectordetailsvisible TYPE clike OPTIONAL
      RETURNING
        VALUE(result)             TYPE REF TO z2ui5_cl_xml_view.

    METHODS axis_time_strategy
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS proportion_zoom_strategy
      IMPORTING
        zoomlevel     TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS total_horizon
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS time_horizon
      IMPORTING
        starttime     TYPE clike OPTIONAL
        endtime       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS visible_horizon
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS row_settings_template
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS gantt_row_settings
      IMPORTING
        rowid         TYPE clike OPTIONAL
        shapes1       TYPE clike OPTIONAL
        relationships TYPE clike OPTIONAL
        shapes2       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS shapes1
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS shapes2
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS task
      IMPORTING
        id            TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        color         TYPE clike OPTIONAL
        endtime       TYPE clike OPTIONAL
        time          TYPE clike OPTIONAL
        title         TYPE clike OPTIONAL
        showtitle     TYPE clike OPTIONAL
        connectable   TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS gantt_table
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS rating_indicator
      IMPORTING
        maxvalue      TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        value         TYPE clike OPTIONAL
        iconsize      TYPE clike OPTIONAL
        tooltip       TYPE clike OPTIONAL
        displayonly   TYPE clike OPTIONAL
        change        TYPE clike OPTIONAL
        id            TYPE clike OPTIONAL
        editable      TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS gantt_toolbar
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS base_rectangle
      IMPORTING
        time                    TYPE clike OPTIONAL
        shapeid                 TYPE clike OPTIONAL
        endtime                 TYPE clike OPTIONAL
        selectable              TYPE clike OPTIONAL
        selectedfill            TYPE clike OPTIONAL
        fill                    TYPE clike OPTIONAL
        height                  TYPE clike OPTIONAL
        title                   TYPE clike OPTIONAL
        animationsettings       TYPE clike OPTIONAL
        alignshape              TYPE clike OPTIONAL
        color                   TYPE clike OPTIONAL
        fontsize                TYPE clike OPTIONAL
        connectable             TYPE clike OPTIONAL
        fontfamily              TYPE clike OPTIONAL
        filter                  TYPE clike OPTIONAL
        transform               TYPE clike OPTIONAL
        countinbirdeye          TYPE clike OPTIONAL
        fontweight              TYPE clike OPTIONAL
        showtitle               TYPE clike OPTIONAL
        selected                TYPE clike OPTIONAL
        resizable               TYPE clike OPTIONAL
        horizontaltextalignment TYPE clike OPTIONAL
        highlighted             TYPE clike OPTIONAL
        highlightable           TYPE clike OPTIONAL
      RETURNING
        VALUE(result)           TYPE REF TO z2ui5_cl_xml_view.

    METHODS tool_page
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS tool_header
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS icon_tab_header
      IMPORTING
        selectedkey         TYPE clike OPTIONAL
        items               TYPE clike OPTIONAL
        select              TYPE clike OPTIONAL
        mode                TYPE clike OPTIONAL
        ariatexts           TYPE clike OPTIONAL
        backgrounddesign    TYPE clike OPTIONAL
        enabletabreordering TYPE clike OPTIONAL
        maxnestinglevel     TYPE clike OPTIONAL
        tabdensitymode      TYPE clike OPTIONAL
        tabsoverflowmode    TYPE clike OPTIONAL
        visible             TYPE clike OPTIONAL
        id                  TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS nav_container
      IMPORTING
        initialpage           TYPE clike OPTIONAL
        id                    TYPE clike OPTIONAL
        defaulttransitionname TYPE clike OPTIONAL
        autofocus             TYPE clike OPTIONAL
        height                TYPE clike OPTIONAL
        width                 TYPE clike OPTIONAL
        visible               TYPE clike OPTIONAL
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS pages
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS main_contents
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS table_select_dialog
      IMPORTING
        confirmbuttontext  TYPE clike OPTIONAL
        contentheight      TYPE clike OPTIONAL
        contentwidth       TYPE clike OPTIONAL
        draggable          TYPE clike OPTIONAL
        growing            TYPE clike OPTIONAL
        growingthreshold   TYPE clike OPTIONAL
        multiselect        TYPE clike OPTIONAL
        nodatatext         TYPE clike OPTIONAL
        rememberselections TYPE clike OPTIONAL
        resizable          TYPE clike OPTIONAL
        searchplaceholder  TYPE clike OPTIONAL
        showclearbutton    TYPE clike OPTIONAL
        title              TYPE clike OPTIONAL
        titlealignment     TYPE clike OPTIONAL
        visible            TYPE clike OPTIONAL
        items              TYPE clike OPTIONAL
        livechange         TYPE clike OPTIONAL
        cancel             TYPE clike OPTIONAL
        search             TYPE clike OPTIONAL
        confirm            TYPE clike OPTIONAL
        selectionchange    TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS process_flow
      IMPORTING
        id            TYPE clike OPTIONAL
        foldedcorners TYPE clike OPTIONAL
        scrollable    TYPE clike OPTIONAL
        showlabels    TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        wheelzoomable TYPE clike OPTIONAL
        headerpress   TYPE clike OPTIONAL
        labelpress    TYPE clike OPTIONAL
        nodepress     TYPE clike OPTIONAL
        onerror       TYPE clike OPTIONAL
        lanes         TYPE clike OPTIONAL
        nodes         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS nodes
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS node
      IMPORTING
        id                    TYPE clike OPTIONAL
        class                 TYPE clike OPTIONAL
        alttext               TYPE clike OPTIONAL
        collapsed             TYPE clike OPTIONAL
        corenodesize          TYPE clike OPTIONAL
        description           TYPE clike OPTIONAL
        descriptionlinesize   TYPE clike OPTIONAL
        group                 TYPE clike OPTIONAL
        headercheckboxstate   TYPE clike OPTIONAL
        height                TYPE clike OPTIONAL
        title                 TYPE clike OPTIONAL
        icon                  TYPE clike OPTIONAL
        iconsize              TYPE clike OPTIONAL
        key                   TYPE clike OPTIONAL
        maxwidth              TYPE clike OPTIONAL
        selected              TYPE clike OPTIONAL
        shape                 TYPE clike OPTIONAL
        showactionlinksbutton TYPE clike OPTIONAL
        showdetailbutton      TYPE clike OPTIONAL
        showexpandbutton      TYPE clike OPTIONAL
        statusicon            TYPE clike OPTIONAL
        titlelinesize         TYPE clike OPTIONAL
        visible               TYPE clike OPTIONAL
        width                 TYPE clike OPTIONAL
        x                     TYPE clike OPTIONAL
        y                     TYPE clike OPTIONAL
        collapseexpand        TYPE clike OPTIONAL
        headercheckboxpress   TYPE clike OPTIONAL
        hover                 TYPE clike OPTIONAL
        press                 TYPE clike OPTIONAL
        attributes            TYPE clike OPTIONAL
        actionbuttons         TYPE clike OPTIONAL
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS node_image
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
        src           TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS lanes
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS process_flow_node
      IMPORTING
        laneid            TYPE clike OPTIONAL
        nodeid            TYPE clike OPTIONAL
        title             TYPE clike OPTIONAL
        titleabbreviation TYPE clike OPTIONAL
        children          TYPE clike OPTIONAL
        state             TYPE clike OPTIONAL
        statetext         TYPE clike OPTIONAL
        texts             TYPE clike OPTIONAL
        highlighted       TYPE clike OPTIONAL
        focused           TYPE clike OPTIONAL
        selected          TYPE clike OPTIONAL
        tag               TYPE clike OPTIONAL
        type              TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS process_flow_lane_header
      IMPORTING
        iconsrc       TYPE clike OPTIONAL
        laneid        TYPE clike OPTIONAL
        position      TYPE clike OPTIONAL
        state         TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        zoomlevel     TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS view_settings_dialog
      IMPORTING
        confirm                  TYPE clike OPTIONAL
        cancel                   TYPE clike OPTIONAL
        filterdetailpageopened   TYPE clike OPTIONAL
        reset                    TYPE clike OPTIONAL
        resetfilters             TYPE clike OPTIONAL
        filtersearchoperator     TYPE clike OPTIONAL
        groupdescending          TYPE clike OPTIONAL
        sortdescending           TYPE clike OPTIONAL
        title                    TYPE clike OPTIONAL
        titlealignment           TYPE clike OPTIONAL
        selectedgroupitem        TYPE clike OPTIONAL
        selectedpresetfilteritem TYPE clike OPTIONAL
        selectedsortitem         TYPE clike OPTIONAL
        filteritems              TYPE clike OPTIONAL
        sortitems                TYPE clike OPTIONAL
        groupitems               TYPE clike OPTIONAL
      RETURNING
        VALUE(result)            TYPE REF TO z2ui5_cl_xml_view.

    METHODS filter_items
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS sort_items
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS group_items
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS view_settings_filter_item
      IMPORTING
        enabled       TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
        multiselect   TYPE clike OPTIONAL
        selected      TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        textdirection TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS view_settings_item
      IMPORTING
        enabled       TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
        selected      TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        textdirection TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS variant_management
      IMPORTING
        defaultvariantkey      TYPE clike OPTIONAL
        enabled                TYPE clike OPTIONAL
        inerrorstate           TYPE clike OPTIONAL
        initialselectionkey    TYPE clike OPTIONAL
        lifecyclesupport       TYPE clike OPTIONAL
        selectionkey           TYPE clike OPTIONAL
        showcreatetile         TYPE clike OPTIONAL
        showexecuteonselection TYPE clike OPTIONAL
        showsetasdefault       TYPE clike OPTIONAL
        showshare              TYPE clike OPTIONAL
        standarditemauthor     TYPE clike OPTIONAL
        standarditemtext       TYPE clike OPTIONAL
        usefavorites           TYPE clike OPTIONAL
        visible                TYPE clike OPTIONAL
        variantitems           TYPE clike OPTIONAL
        manage                 TYPE clike OPTIONAL
        save                   TYPE clike OPTIONAL
        select                 TYPE clike OPTIONAL
        uservarcreate          TYPE clike OPTIONAL
        id                     TYPE clike OPTIONAL
      RETURNING
        VALUE(result)          TYPE REF TO z2ui5_cl_xml_view.

    METHODS variant_items
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS variant_item
      IMPORTING
        executeonselection      TYPE clike OPTIONAL
        global                  TYPE clike OPTIONAL
        labelreadonly           TYPE clike OPTIONAL
        lifecyclepackage        TYPE clike OPTIONAL
        lifecycletransportid    TYPE clike OPTIONAL
        namespace               TYPE clike OPTIONAL
        readonly                TYPE clike OPTIONAL
        executeonselect         TYPE clike OPTIONAL
        author                  TYPE clike OPTIONAL
        changeable              TYPE clike OPTIONAL
        enabled                 TYPE clike OPTIONAL
        favorite                TYPE clike OPTIONAL
        key                     TYPE clike OPTIONAL
        text                    TYPE clike OPTIONAL
        title                   TYPE clike OPTIONAL
        textdirection           TYPE clike OPTIONAL
        originaltitle           TYPE clike OPTIONAL
        originalexecuteonselect TYPE clike OPTIONAL
        remove                  TYPE clike OPTIONAL
        rename                  TYPE clike OPTIONAL
        originalfavorite        TYPE clike OPTIONAL
        sharing                 TYPE clike OPTIONAL
        change                  TYPE clike OPTIONAL
      RETURNING
        VALUE(result)           TYPE REF TO z2ui5_cl_xml_view.

    METHODS variant_management_sapm
      IMPORTING
        creationallowed           TYPE clike OPTIONAL
        defaultkey                TYPE clike OPTIONAL
        inerrorstate              TYPE clike OPTIONAL
        level                     TYPE clike OPTIONAL
        maxwidth                  TYPE clike OPTIONAL
        modified                  TYPE clike OPTIONAL
        popovertitle              TYPE clike OPTIONAL
        selectedkey               TYPE clike OPTIONAL
        showfooter                TYPE clike OPTIONAL
        showsaveas                TYPE clike OPTIONAL
        supportapplyautomatically TYPE clike OPTIONAL
        supportcontexts           TYPE clike OPTIONAL
        supportdefault            TYPE clike OPTIONAL
        supportfavorites          TYPE clike OPTIONAL
        supportpublic             TYPE clike OPTIONAL
        titlestyle                TYPE clike OPTIONAL
        visible                   TYPE clike OPTIONAL
        items                     TYPE clike OPTIONAL
        cancel                    TYPE clike OPTIONAL
        manage                    TYPE clike OPTIONAL
        managecancel              TYPE clike OPTIONAL
        save                      TYPE clike OPTIONAL
        select                    TYPE clike OPTIONAL
        id                        TYPE clike OPTIONAL
      RETURNING
        VALUE(result)             TYPE REF TO z2ui5_cl_xml_view.

    METHODS variant_item_sapm
      IMPORTING
        author          TYPE clike OPTIONAL
        changeable      TYPE clike OPTIONAL
        contexts        TYPE clike OPTIONAL
        executeonselect TYPE clike OPTIONAL
        favorite        TYPE clike OPTIONAL
        key             TYPE clike OPTIONAL
        remove          TYPE clike OPTIONAL
        rename          TYPE clike OPTIONAL
        sharing         TYPE clike OPTIONAL
        title           TYPE clike OPTIONAL
        visible         TYPE clike OPTIONAL
        id              TYPE clike OPTIONAL
        textdirection   TYPE clike OPTIONAL
        text            TYPE clike OPTIONAL
        enabled         TYPE clike OPTIONAL
      RETURNING
        VALUE(result)   TYPE REF TO z2ui5_cl_xml_view.

    METHODS feed_input
      IMPORTING
        buttontooltip    TYPE clike OPTIONAL
        enabled          TYPE clike OPTIONAL
        growing          TYPE clike OPTIONAL
        growingmaxlines  TYPE clike OPTIONAL
        icon             TYPE clike OPTIONAL
        icondensityaware TYPE clike OPTIONAL
        icondisplayshape TYPE clike OPTIONAL
        iconinitials     TYPE clike OPTIONAL
        iconsize         TYPE clike OPTIONAL
        maxlength        TYPE clike OPTIONAL
        placeholder      TYPE clike OPTIONAL
        rows             TYPE clike OPTIONAL
        showexceededtext TYPE clike OPTIONAL
        showicon         TYPE clike OPTIONAL
        value            TYPE clike OPTIONAL
        post             TYPE clike OPTIONAL
        class            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS feed_list_item
      IMPORTING
        activeicon                  TYPE clike OPTIONAL
        convertedlinksdefaulttarget TYPE clike OPTIONAL
        convertlinkstoanchortags    TYPE clike OPTIONAL
        icon                        TYPE clike OPTIONAL
        iconactive                  TYPE clike OPTIONAL
        icondensityaware            TYPE clike OPTIONAL
        icondisplayshape            TYPE clike OPTIONAL
        iconinitials                TYPE clike OPTIONAL
        iconsize                    TYPE clike OPTIONAL
        info                        TYPE clike OPTIONAL
        lesslabel                   TYPE clike OPTIONAL
        maxcharacters               TYPE clike OPTIONAL
        morelabel                   TYPE clike OPTIONAL
        sender                      TYPE clike OPTIONAL
        senderactive                TYPE clike OPTIONAL
        showicon                    TYPE clike OPTIONAL
        text                        TYPE clike OPTIONAL
        timestamp                   TYPE clike OPTIONAL
        iconpress                   TYPE clike OPTIONAL
        senderpress                 TYPE clike OPTIONAL
      RETURNING
        VALUE(result)               TYPE REF TO z2ui5_cl_xml_view.

    METHODS feed_list_item_action
      IMPORTING
        enabled       TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS feed_content
      IMPORTING
        contenttext   TYPE clike OPTIONAL
        subheader     TYPE clike OPTIONAL
        value         TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS news_content
      IMPORTING
        contenttext   TYPE clike OPTIONAL
        subheader     TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS color_picker
      IMPORTING
        colorstring   TYPE clike
        displaymode   TYPE clike OPTIONAL
        change        TYPE clike OPTIONAL
        livechange    TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS mask_input
      IMPORTING
        placeholder           TYPE clike OPTIONAL
        mask                  TYPE clike OPTIONAL
        name                  TYPE clike OPTIONAL
        textalign             TYPE clike OPTIONAL
        textdirection         TYPE clike OPTIONAL
        value                 TYPE clike OPTIONAL
        width                 TYPE clike OPTIONAL
        valuestate            TYPE clike OPTIONAL
        valuestatetext        TYPE clike OPTIONAL
        placeholdersymbol     TYPE clike OPTIONAL
        required              TYPE clike OPTIONAL
        showclearicon         TYPE clike OPTIONAL
        showvaluestatemessage TYPE clike OPTIONAL
        visible               TYPE clike OPTIONAL
        fieldwidth            TYPE clike OPTIONAL
        livechange            TYPE clike OPTIONAL
        change                TYPE clike OPTIONAL
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS responsive_splitter
      IMPORTING
        defaultpane   TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS splitter
      IMPORTING
        height        TYPE clike OPTIONAL
        orientation   TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS invisible_text
      IMPORTING
        ns            TYPE clike
        id            TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS fix_flex
      IMPORTING
        ns             TYPE clike OPTIONAL
        class          TYPE clike OPTIONAL
        fixcontentsize TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS fix_content
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS flex_content
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS pane_container
      IMPORTING
        resize        TYPE clike OPTIONAL
        orientation   TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS split_pane
      IMPORTING
        id                  TYPE clike OPTIONAL
        requiredparentwidth TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS splitter_layout_data
      IMPORTING
        size          TYPE clike OPTIONAL
        minsize       TYPE clike OPTIONAL
        resizable     TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS toolbar_layout_data
      IMPORTING
        id            TYPE clike OPTIONAL
        maxwidth      TYPE clike OPTIONAL
        minwidth      TYPE clike OPTIONAL
        shrinkable    TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_header
      IMPORTING
        backgrounddesign     TYPE clike OPTIONAL
        condensed            TYPE clike OPTIONAL
        fullscreenoptimized  TYPE clike OPTIONAL
        icon                 TYPE clike OPTIONAL
        iconactive           TYPE clike OPTIONAL
        iconalt              TYPE clike OPTIONAL
        icondensityaware     TYPE clike OPTIONAL
        icontooltip          TYPE clike OPTIONAL
        imageshape           TYPE clike OPTIONAL
        intro                TYPE clike OPTIONAL
        introactive          TYPE clike OPTIONAL
        introhref            TYPE clike OPTIONAL
        introtarget          TYPE clike OPTIONAL
        introtextdirection   TYPE clike OPTIONAL
        number               TYPE clike OPTIONAL
        numberstate          TYPE clike OPTIONAL
        numbertextdirection  TYPE clike OPTIONAL
        numberunit           TYPE clike OPTIONAL
        responsive           TYPE clike OPTIONAL
        showtitleselector    TYPE clike OPTIONAL
        title                TYPE clike OPTIONAL
        titleactive          TYPE clike OPTIONAL
        titlehref            TYPE clike OPTIONAL
        titlelevel           TYPE clike OPTIONAL
        titleselectortooltip TYPE clike OPTIONAL
        titletarget          TYPE clike OPTIONAL
        titletextdirection   TYPE clike OPTIONAL
        iconpress            TYPE clike OPTIONAL
        intropress           TYPE clike OPTIONAL
        titlepress           TYPE clike OPTIONAL
        titleselectorpress   TYPE clike OPTIONAL
        class                TYPE clike OPTIONAL
      RETURNING
        VALUE(result)        TYPE REF TO z2ui5_cl_xml_view.

    METHODS additional_numbers
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS header_container
      IMPORTING
        scrollstep    TYPE clike OPTIONAL
        scrolltime    TYPE clike OPTIONAL
        orientation   TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS markers
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS statuses
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS status
      IMPORTING
        id                          TYPE clike OPTIONAL
        class                       TYPE clike OPTIONAL
        backgroundcolor             TYPE clike OPTIONAL
        bordercolor                 TYPE clike OPTIONAL
        borderstyle                 TYPE clike OPTIONAL
        borderwidth                 TYPE clike OPTIONAL
        contentcolor                TYPE clike OPTIONAL
        headercontentcolor          TYPE clike OPTIONAL
        hoverbackgroundcolor        TYPE clike OPTIONAL
        hoverbordercolor            TYPE clike OPTIONAL
        hovercontentcolor           TYPE clike OPTIONAL
        key                         TYPE clike OPTIONAL
        legendcolor                 TYPE clike OPTIONAL
        selectedbackgroundcolor     TYPE clike OPTIONAL
        selectedbordercolor         TYPE clike OPTIONAL
        selectedcontentcolor        TYPE clike OPTIONAL
        title                       TYPE clike OPTIONAL
        usefocuscolorascontentcolor TYPE clike OPTIONAL
        visible                     TYPE clike OPTIONAL
      RETURNING
        VALUE(result)               TYPE REF TO z2ui5_cl_xml_view.

    METHODS first_status
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS second_status
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_marker
      IMPORTING
        additionalinfo TYPE clike OPTIONAL
        type           TYPE clike OPTIONAL
        visibility     TYPE clike OPTIONAL
        visible        TYPE clike OPTIONAL
        press          TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS object_list_item
      IMPORTING
        activeicon          TYPE clike OPTIONAL
        icon                TYPE clike OPTIONAL
        icondensityaware    TYPE clike OPTIONAL
        intro               TYPE clike OPTIONAL
        introtextdirection  TYPE clike OPTIONAL
        number              TYPE clike OPTIONAL
        numberstate         TYPE clike OPTIONAL
        numbertextdirection TYPE clike OPTIONAL
        numberunit          TYPE clike OPTIONAL
        title               TYPE clike OPTIONAL
        titletextdirection  TYPE clike OPTIONAL
        press               TYPE clike OPTIONAL
        selected            TYPE clike OPTIONAL
        type                TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS detail_box
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS light_box
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS light_box_item
      IMPORTING
        alt           TYPE clike OPTIONAL
        imagesrc      TYPE clike OPTIONAL
        subtitle      TYPE clike OPTIONAL
        title         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS line_micro_chart
      IMPORTING
        color                 TYPE clike OPTIONAL
        height                TYPE clike OPTIONAL
        leftbottomlabel       TYPE clike OPTIONAL
        lefttoplabel          TYPE clike OPTIONAL
        maxxvalue             TYPE clike OPTIONAL
        minxvalue             TYPE clike OPTIONAL
        minyvalue             TYPE clike OPTIONAL
        rightbottomlabel      TYPE clike OPTIONAL
        righttoplabel         TYPE clike OPTIONAL
        size                  TYPE clike OPTIONAL
        threshold             TYPE clike OPTIONAL
        thresholddisplayvalue TYPE clike OPTIONAL
        width                 TYPE clike OPTIONAL
        press                 TYPE clike OPTIONAL
        hideonnodata          TYPE clike OPTIONAL
        showbottomlabels      TYPE clike OPTIONAL
        showpoints            TYPE clike OPTIONAL
        showthresholdline     TYPE clike OPTIONAL
        showthresholdvalue    TYPE clike OPTIONAL
        showtoplabels         TYPE clike OPTIONAL
        maxyvalue             TYPE clike OPTIONAL
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS line_micro_chart_line
      IMPORTING
        points        TYPE clike OPTIONAL
        color         TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS line_micro_chart_point
      IMPORTING
        x             TYPE clike OPTIONAL
        y             TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS line_micro_chart_empszd_point
      IMPORTING
        x             TYPE clike OPTIONAL
        y             TYPE clike OPTIONAL
        color         TYPE clike OPTIONAL
        show          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS stacked_bar_micro_chart
      IMPORTING
        height           TYPE clike OPTIONAL
        press            TYPE clike OPTIONAL
        maxvalue         TYPE clike OPTIONAL
        precision        TYPE clike OPTIONAL
        size             TYPE clike OPTIONAL
        hideonnodata     TYPE clike OPTIONAL
        displayzerovalue TYPE clike OPTIONAL
        showlabels       TYPE clike OPTIONAL
        width            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_micro_chart
      IMPORTING
        width             TYPE clike OPTIONAL
        press             TYPE clike OPTIONAL
        size              TYPE clike OPTIONAL
        aligncontent      TYPE clike OPTIONAL
        hideonnodata      TYPE clike OPTIONAL
        allowcolumnlabels TYPE clike OPTIONAL
        showbottomlabels  TYPE clike OPTIONAL
        showtoplabels     TYPE clike OPTIONAL
        height            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_micro_chart_data
      IMPORTING
        value         TYPE clike OPTIONAL
        label         TYPE clike OPTIONAL
        displayvalue  TYPE clike OPTIONAL
        color         TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS comparison_micro_chart
      IMPORTING
        colorpalette  TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
        size          TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
        maxvalue      TYPE clike OPTIONAL
        minvalue      TYPE clike OPTIONAL
        scale         TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        hideonnodata  TYPE clike OPTIONAL
        shrinkable    TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        view          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS comparison_micro_chart_Data
      IMPORTING !color        TYPE clike OPTIONAL
                press         TYPE clike OPTIONAL
                displayvalue  TYPE clike OPTIONAL
                !title        TYPE clike OPTIONAL
                !value        TYPE clike OPTIONAL
      RETURNING VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS delta_micro_chart
      IMPORTING
        color             TYPE clike OPTIONAL
        press             TYPE clike OPTIONAL
        size              TYPE clike OPTIONAL
        height            TYPE clike OPTIONAL
        width             TYPE clike OPTIONAL
        deltadisplayvalue TYPE clike OPTIONAL
        displayvalue1     TYPE clike OPTIONAL
        displayvalue2     TYPE clike OPTIONAL
        title2            TYPE clike OPTIONAL
        value1            TYPE clike OPTIONAL
        value2            TYPE clike OPTIONAL
        view              TYPE clike OPTIONAL
        hideonnodata      TYPE clike OPTIONAL
        title1            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS bullet_micro_chart
      IMPORTING
        actualvaluelabel  TYPE clike OPTIONAL
        press             TYPE clike OPTIONAL
        size              TYPE clike OPTIONAL
        height            TYPE clike OPTIONAL
        width             TYPE clike OPTIONAL
        deltavaluelabel   TYPE clike OPTIONAL
        maxvalue          TYPE clike OPTIONAL
        minvalue          TYPE clike OPTIONAL
        mode              TYPE clike OPTIONAL
        scale             TYPE clike OPTIONAL
        targetvalue       TYPE clike OPTIONAL
        targetvaluelabel  TYPE clike OPTIONAL
        scalecolor        TYPE clike OPTIONAL
        hideonnodata      TYPE clike OPTIONAL
        showactualvalue   TYPE clike OPTIONAL
        showdeltavalue    TYPE clike OPTIONAL
        showtargetvalue   TYPE clike OPTIONAL
        showthresholds    TYPE clike OPTIONAL
        showvaluemarker   TYPE clike OPTIONAL
        smallrangeallowed TYPE clike OPTIONAL
        forecastvalue     TYPE clike OPTIONAL
        savidm            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS harvey_ball_micro_chart
      IMPORTING
        colorpalette   TYPE clike OPTIONAL
        press          TYPE clike OPTIONAL
        size           TYPE clike OPTIONAL
        height         TYPE clike OPTIONAL
        width          TYPE clike OPTIONAL
        total          TYPE clike OPTIONAL
        totallabel     TYPE clike OPTIONAL
        aligncontent   TYPE clike OPTIONAL
        hideonnodata   TYPE clike OPTIONAL
        formattedlabel TYPE clike OPTIONAL
        showfractions  TYPE clike OPTIONAL
        showtotal      TYPE clike OPTIONAL
        totalscale     TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS area_micro_chart
      IMPORTING
        colorpalette  TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
        size          TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
        maxxvalue     TYPE clike OPTIONAL
        maxyvalue     TYPE clike OPTIONAL
        minxvalue     TYPE clike OPTIONAL
        minyvalue     TYPE clike OPTIONAL
        view          TYPE clike OPTIONAL
        aligncontent  TYPE clike OPTIONAL
        hideonnodata  TYPE clike OPTIONAL
        showlabel     TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS data
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS rich_text_editor
      IMPORTING
        buttongroups       TYPE clike OPTIONAL
        customtoolbar      TYPE clike OPTIONAL
        editable           TYPE clike OPTIONAL
        editortype         TYPE clike OPTIONAL
        height             TYPE clike OPTIONAL
        plugins            TYPE clike OPTIONAL
        required           TYPE clike OPTIONAL
        sanitizevalue      TYPE clike OPTIONAL
        showgroupclipboard TYPE clike OPTIONAL
        showgroupfont      TYPE clike OPTIONAL
        showgroupfontstyle TYPE clike OPTIONAL
        showgroupinsert    TYPE clike OPTIONAL
        showgrouplink      TYPE clike OPTIONAL
        showgroupstructure TYPE clike OPTIONAL
        showgrouptextalign TYPE clike OPTIONAL
        showgroupundo      TYPE clike OPTIONAL
        textdirection      TYPE clike OPTIONAL
        uselegacytheme     TYPE clike OPTIONAL
        value              TYPE clike OPTIONAL
        width              TYPE clike OPTIONAL
        wrapping           TYPE clike OPTIONAL
        beforeeditorinit   TYPE clike OPTIONAL
        change             TYPE clike OPTIONAL
        ready              TYPE clike OPTIONAL
        readyrecurring     TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS slider
      IMPORTING
        max                 TYPE clike OPTIONAL
        min                 TYPE clike OPTIONAL
        step                TYPE clike OPTIONAL
        value               TYPE clike OPTIONAL
        enabletickmarks     TYPE clike OPTIONAL
        width               TYPE clike OPTIONAL
        class               TYPE clike OPTIONAL
        id                  TYPE clike OPTIONAL
        enabled             TYPE clike OPTIONAL
        change              TYPE clike OPTIONAL
        inputsastooltips    TYPE clike OPTIONAL
        showadvancedtooltip TYPE clike OPTIONAL
        showhandletooltip   TYPE clike OPTIONAL
        liveChange          TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS upload_set
      IMPORTING
        id                      TYPE clike OPTIONAL
        instantupload           TYPE clike OPTIONAL
        showicons               TYPE clike OPTIONAL
        uploadenabled           TYPE clike OPTIONAL
        terminationenabled      TYPE clike OPTIONAL
        filetypes               TYPE clike OPTIONAL
        maxfilenamelength       TYPE clike OPTIONAL
        maxfilesize             TYPE clike OPTIONAL
        mediatypes              TYPE clike OPTIONAL
        uploadurl               TYPE clike OPTIONAL
        items                   TYPE clike OPTIONAL
        mode                    TYPE clike OPTIONAL
        selectionchanged        TYPE clike OPTIONAL
        uploadcompleted         TYPE clike OPTIONAL
        afteritemadded          TYPE clike OPTIONAL
        samefilenameallowed     TYPE clike OPTIONAL
        uploadbuttoninvisible   TYPE clike OPTIONAL
        directory               TYPE clike OPTIONAL
        multiple                TYPE clike OPTIONAL
        dragdropdescription     TYPE clike OPTIONAL
        dragdroptext            TYPE clike OPTIONAL
        nodatatext              TYPE clike OPTIONAL
        nodatadescription       TYPE clike OPTIONAL
        nodataillustrationtype  TYPE clike OPTIONAL
        afteritemedited         TYPE clike OPTIONAL
        afteritemremoved        TYPE clike OPTIONAL
        beforeitemadded         TYPE clike OPTIONAL
        beforeitemedited        TYPE clike OPTIONAL
        beforeitemremoved       TYPE clike OPTIONAL
        beforeuploadstarts      TYPE clike OPTIONAL
        beforeuploadtermination TYPE clike OPTIONAL
        filenamelengthexceeded  TYPE clike OPTIONAL
        filerenamed             TYPE clike OPTIONAL
        filesizeexceeded        TYPE clike OPTIONAL
        filetypemismatch        TYPE clike OPTIONAL
        itemdragstart           TYPE clike OPTIONAL
        itemdrop                TYPE clike OPTIONAL
        mediatypemismatch       TYPE clike OPTIONAL
        uploadterminated        TYPE clike OPTIONAL
      RETURNING
        VALUE(result)           TYPE REF TO z2ui5_cl_xml_view.

    METHODS upload_set_toolbar_placeholder
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS upload_set_item
      IMPORTING
        filename      TYPE clike OPTIONAL
        mediatype     TYPE clike OPTIONAL
        url           TYPE clike OPTIONAL
        thumbnailurl  TYPE clike OPTIONAL
        markers       TYPE clike OPTIONAL
        statuses      TYPE clike OPTIONAL
        enablededit   TYPE clike OPTIONAL
        enabledremove TYPE clike OPTIONAL
        selected      TYPE clike OPTIONAL
        visibleedit   TYPE clike OPTIONAL
        visibleremove TYPE clike OPTIONAL
        uploadstate   TYPE clike OPTIONAL
        uploadurl     TYPE clike OPTIONAL
        openpressed   TYPE clike OPTIONAL
        removepressed TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS markers_as_status
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS rules
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS mask_input_rule
      IMPORTING
        maskformatsymbol TYPE clike OPTIONAL
        regex            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS side_panel
      IMPORTING
        actionbarexpanded         TYPE clike OPTIONAL
        arialabel                 TYPE clike OPTIONAL
        sidepanelmaxwidth         TYPE clike OPTIONAL
        sidepanelminwidth         TYPE clike OPTIONAL
        sidepanelposition         TYPE clike OPTIONAL
        sidepanelresizable        TYPE clike OPTIONAL
        sidepanelresizelargerstep TYPE clike OPTIONAL
        sidepanelresizestep       TYPE clike OPTIONAL
        sidepanelwidth            TYPE clike OPTIONAL
        toggle                    TYPE clike OPTIONAL
      RETURNING
        VALUE(result)             TYPE REF TO z2ui5_cl_xml_view.

    METHODS side_panel_item
      IMPORTING
        icon          TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS main_content
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS quick_view
      IMPORTING
        placement     TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        afterclose    TYPE clike OPTIONAL
        afteropen     TYPE clike OPTIONAL
        beforeclose   TYPE clike OPTIONAL
        beforeopen    TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS quick_view_page
      IMPORTING
        description   TYPE clike OPTIONAL
        header        TYPE clike OPTIONAL
        pageid        TYPE clike OPTIONAL
        title         TYPE clike OPTIONAL
        titleurl      TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS quick_view_page_avatar
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS quick_view_group
      IMPORTING
        heading       TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS quick_view_group_element
      IMPORTING
        emailsubject  TYPE clike OPTIONAL
        label         TYPE clike OPTIONAL
        pagelinkid    TYPE clike OPTIONAL
        target        TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        url           TYPE clike OPTIONAL
        value         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS date_range_selection
      IMPORTING
        value                   TYPE clike OPTIONAL
        placeholder             TYPE clike OPTIONAL
        displayformat           TYPE clike OPTIONAL
        valueformat             TYPE clike OPTIONAL
        required                TYPE clike OPTIONAL
        valuestate              TYPE clike OPTIONAL
        valuestatetext          TYPE clike OPTIONAL
        enabled                 TYPE clike OPTIONAL
        showcurrentdatebutton   TYPE clike OPTIONAL
        change                  TYPE clike OPTIONAL
        hideinput               TYPE clike OPTIONAL
        showfooter              TYPE clike OPTIONAL
        visible                 TYPE clike OPTIONAL
        showvaluestatemessage   TYPE clike OPTIONAL
        mindate                 TYPE clike OPTIONAL
        maxdate                 TYPE clike OPTIONAL
        editable                TYPE clike OPTIONAL
        width                   TYPE clike OPTIONAL
        id                      TYPE clike OPTIONAL
        calendarweeknumbering   TYPE clike OPTIONAL
        displayformattype       TYPE clike OPTIONAL
        class                   TYPE clike OPTIONAL
        textdirection           TYPE clike OPTIONAL
        textalign               TYPE clike OPTIONAL
        name                    TYPE clike OPTIONAL
        datevalue               TYPE clike OPTIONAL
        seconddatevalue         TYPE clike OPTIONAL
        initialfocuseddatevalue TYPE clike OPTIONAL
        delimiter               TYPE clike OPTIONAL
          PREFERRED PARAMETER value
      RETURNING
        VALUE(result)           TYPE REF TO z2ui5_cl_xml_view.

    METHODS variant_management_fl
      IMPORTING
        displaytextfsv                TYPE clike OPTIONAL
        editable                      TYPE clike OPTIONAL
        executeonselectionforstandflt TYPE clike OPTIONAL
        headerlevel                   TYPE clike OPTIONAL
        inerrorstate                  TYPE clike OPTIONAL
        maxwidth                      TYPE clike OPTIONAL
        modelname                     TYPE clike OPTIONAL
        resetoncontextchange          TYPE clike OPTIONAL
        showsetasdefault              TYPE clike OPTIONAL
        titlestyle                    TYPE clike OPTIONAL
        updatevariantinurl            TYPE clike OPTIONAL
        for                           TYPE clike OPTIONAL
        cancel                        TYPE clike OPTIONAL
        initialized                   TYPE clike OPTIONAL
        manage                        TYPE clike OPTIONAL
        save                          TYPE clike OPTIONAL
        select                        TYPE clike OPTIONAL
      RETURNING
        VALUE(result)                 TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_element_data
      IMPORTING
        cellslarge    TYPE clike OPTIONAL
        cellssmall    TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS fb_control
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS smart_variant_management
      IMPORTING
        id                     TYPE clike OPTIONAL
        showexecuteonselection TYPE clike OPTIONAL
        persistencyKey         TYPE clike OPTIONAL
      RETURNING
        VALUE(result)          TYPE REF TO z2ui5_cl_xml_view.

    METHODS smart_filter_bar
      IMPORTING
        id             TYPE clike OPTIONAL
        persistencyKey TYPE clike OPTIONAL
        entitySet      TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS control_configuration
      IMPORTING
        id                            TYPE clike OPTIONAL
        prevInitDataFetchInValHelpDia TYPE clike OPTIONAL
        visibleInAdvancedArea         TYPE clike OPTIONAL
        key                           TYPE clike OPTIONAL
      RETURNING
        VALUE(result)                 TYPE REF TO z2ui5_cl_xml_view.

    METHODS _control_configuration
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS smart_table
      IMPORTING
        id                      TYPE clike OPTIONAL
        smartFilterId           TYPE clike OPTIONAL
        tableType               TYPE clike OPTIONAL
        editable                TYPE clike OPTIONAL
        initiallyVisibleFields  TYPE clike OPTIONAL
        entitySet               TYPE clike OPTIONAL
        useVariantManagement    TYPE clike OPTIONAL
        useExportToExcel        TYPE clike OPTIONAL
        useTablePersonalisation TYPE clike OPTIONAL
        header                  TYPE clike OPTIONAL
        showRowCount            TYPE clike OPTIONAL
        enableExport            TYPE clike OPTIONAL
        enableAutoBinding       TYPE clike OPTIONAL
      RETURNING
        VALUE(result)           TYPE REF TO z2ui5_cl_xml_view.

    METHODS form_toolbar
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS paging_button
      IMPORTING
        count                 TYPE clike OPTIONAL
        nextbuttontooltip     TYPE clike OPTIONAL
        previousbuttontooltip TYPE clike OPTIONAL
        position              TYPE clike OPTIONAL
      RETURNING
        VALUE(result)         TYPE REF TO z2ui5_cl_xml_view.

    METHODS timeline
      IMPORTING
        id                TYPE clike OPTIONAL
        enabledoublesided TYPE clike OPTIONAL
        groupby           TYPE clike OPTIONAL
        growingthreshold  TYPE clike OPTIONAL
        filtertitle       TYPE clike OPTIONAL
        sortoldestfirst   TYPE clike OPTIONAL
        alignment         TYPE clike OPTIONAL
        axisorientation   TYPE clike OPTIONAL
        content           TYPE clike OPTIONAL
        enablemodelfilter TYPE clike OPTIONAL
        enablescroll      TYPE clike OPTIONAL
        forcegrowing      TYPE clike OPTIONAL
        group             TYPE clike OPTIONAL
        lazyloading       TYPE clike OPTIONAL
        showheaderbar     TYPE clike OPTIONAL
        showicons         TYPE clike OPTIONAL
        showitemfilter    TYPE clike OPTIONAL
        showsearch        TYPE clike OPTIONAL
        showsort          TYPE clike OPTIONAL
        showtimefilter    TYPE clike OPTIONAL
        sort              TYPE clike OPTIONAL
        groupbytype       TYPE clike OPTIONAL
        textheight        TYPE clike OPTIONAL
        width             TYPE clike OPTIONAL
        height            TYPE clike OPTIONAL
        nodatatext        TYPE clike OPTIONAL
        filterlist        TYPE clike OPTIONAL
        customfilter      TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS timeline_item
      IMPORTING
        id                  TYPE clike OPTIONAL
        datetime            TYPE clike OPTIONAL
        title               TYPE clike OPTIONAL
        usernameclickable   TYPE clike OPTIONAL
        useicontooltip      TYPE clike OPTIONAL
        usernameclicked     TYPE clike OPTIONAL
        select              TYPE clike OPTIONAL
        userpicture         TYPE clike OPTIONAL
        text                TYPE clike OPTIONAL
        username            TYPE clike OPTIONAL
        filtervalue         TYPE clike OPTIONAL
        icondisplayshape    TYPE clike OPTIONAL
        iconinitials        TYPE clike OPTIONAL
        iconsize            TYPE clike OPTIONAL
        icontooltip         TYPE clike OPTIONAL
        maxcharacters       TYPE clike OPTIONAL
        replycount          TYPE clike OPTIONAL
        status              TYPE clike OPTIONAL
        customactionclicked TYPE clike OPTIONAL
        press               TYPE clike OPTIONAL
        replylistopen       TYPE clike OPTIONAL
        replypost           TYPE clike OPTIONAL
        icon                TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS split_container
      IMPORTING
        id                          TYPE clike OPTIONAL
        initialdetail               TYPE clike OPTIONAL
        initialmaster               TYPE clike OPTIONAL
        backgroundcolor             TYPE clike OPTIONAL
        backgroundimage             TYPE clike OPTIONAL
        backgroundopacity           TYPE clike OPTIONAL
        backgroundrepeat            TYPE clike OPTIONAL
        defaulttransitionnamedetail TYPE clike OPTIONAL
        defaulttransitionnamemaster TYPE clike OPTIONAL
        masterbuttontext            TYPE clike OPTIONAL
        masterbuttontooltip         TYPE clike OPTIONAL
        mode                        TYPE clike OPTIONAL
        afterdetailnavigate         TYPE clike OPTIONAL
        aftermasterclose            TYPE clike OPTIONAL
        aftermasternavigate         TYPE clike OPTIONAL
        aftermasteropen             TYPE clike OPTIONAL
        beforemasterclose           TYPE clike OPTIONAL
        beforemasteropen            TYPE clike OPTIONAL
        detailnavigate              TYPE clike OPTIONAL
        masterbutton                TYPE clike OPTIONAL
        masternavigate              TYPE clike OPTIONAL
      RETURNING
        VALUE(result)               TYPE REF TO z2ui5_cl_xml_view.

    METHODS detail_pages
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS master_pages
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS container_content
      IMPORTING
        id            TYPE clike OPTIONAL
        title         TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS map_container
      IMPORTING
        id               TYPE clike OPTIONAL
        autoadjustheight TYPE clike OPTIONAL
        showHome         TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS spot
      IMPORTING
        id            TYPE clike OPTIONAL
        position      TYPE clike OPTIONAL
        contentoffset TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        scale         TYPE clike OPTIONAL
        tooltip       TYPE clike OPTIONAL
        image         TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        click         TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS analytic_map
      IMPORTING !id             TYPE clike OPTIONAL
                initialposition TYPE clike OPTIONAL
                height          TYPE clike OPTIONAL
                lassoSelection  TYPE clike OPTIONAL
                visible         TYPE clike OPTIONAL
                width           TYPE clike OPTIONAL
                initialzoom     TYPE clike OPTIONAL
      RETURNING
                VALUE(result)   TYPE REF TO z2ui5_cl_xml_view.

    METHODS spots
      IMPORTING
        id            TYPE clike OPTIONAL
        items         TYPE clike OPTIONAL
          PREFERRED PARAMETER items
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS vos
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS action_sheet
      IMPORTING
        id                TYPE clike OPTIONAL
        cancelbuttontext  TYPE clike OPTIONAL
        placement         TYPE clike OPTIONAL
        showcancelbutton  TYPE clike OPTIONAL
        title             TYPE clike OPTIONAL
        afterclose        TYPE clike OPTIONAL
        afteropen         TYPE clike OPTIONAL
        beforeclose       TYPE clike OPTIONAL
        beforeopen        TYPE clike OPTIONAL
        cancelbuttonpress TYPE clike OPTIONAL
        visible           TYPE clike OPTIONAL
        class             TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS expandable_text
      IMPORTING
        id                 TYPE clike OPTIONAL
        emptyindicatormode TYPE clike OPTIONAL
        maxcharacters      TYPE clike OPTIONAL
        overflowmode       TYPE clike OPTIONAL
        renderwhitespace   TYPE clike OPTIONAL
        text               TYPE clike OPTIONAL
        textalign          TYPE clike OPTIONAL
        textdirection      TYPE clike OPTIONAL
        visible            TYPE clike OPTIONAL
        wrappingtype       TYPE clike OPTIONAL
        class              TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS select
      IMPORTING
        id                  TYPE clike OPTIONAL
        autoadjustwidth     TYPE clike OPTIONAL
        columnratio         TYPE clike OPTIONAL
        editable            TYPE clike OPTIONAL
        enabled             TYPE clike OPTIONAL
        forceselection      TYPE clike OPTIONAL
        icon                TYPE clike OPTIONAL
        maxwidth            TYPE clike OPTIONAL
        name                TYPE clike OPTIONAL
        required            TYPE clike OPTIONAL
        resetonmissingkey   TYPE clike OPTIONAL
        selecteditemid      TYPE clike OPTIONAL
        selectedkey         TYPE clike OPTIONAL
        showsecondaryvalues TYPE clike OPTIONAL
        textalign           TYPE clike OPTIONAL
        textdirection       TYPE clike OPTIONAL
        type                TYPE clike OPTIONAL
        valuestate          TYPE clike OPTIONAL
        valuestatetext      TYPE clike OPTIONAL
        visible             TYPE clike OPTIONAL
        width               TYPE clike OPTIONAL
        wrapitemstext       TYPE clike OPTIONAL
        items               TYPE clike OPTIONAL
        selecteditem        TYPE clike OPTIONAL
        change              TYPE clike OPTIONAL
        livechange          TYPE clike OPTIONAL
        class               TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS embedded_control
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS header_container_control
      IMPORTING
        backgrounddesign TYPE clike OPTIONAL
        gridlayout       TYPE clike OPTIONAL
        height           TYPE clike OPTIONAL
        orientation      TYPE clike OPTIONAL
        scrollstep       TYPE clike OPTIONAL
        scrollstepbyitem TYPE clike OPTIONAL
        scrolltime       TYPE clike OPTIONAL
        showdividers     TYPE clike OPTIONAL
        showoverflowitem TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
        width            TYPE clike OPTIONAL
        id               TYPE clike OPTIONAL
        scroll           TYPE clike OPTIONAL
        snaptorow        TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS dependents
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS card
      IMPORTING
        id             TYPE clike OPTIONAL
        class          TYPE clike OPTIONAL
        headerposition TYPE clike OPTIONAL
        height         TYPE clike OPTIONAL
        visible        TYPE clike OPTIONAL
        width          TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS card_header
      IMPORTING
        id                  TYPE clike OPTIONAL
        class               TYPE clike OPTIONAL
        iconalt             TYPE clike OPTIONAL
        iconbackgroundcolor TYPE clike OPTIONAL
        icondisplayshape    TYPE clike OPTIONAL
        iconinitials        TYPE clike OPTIONAL
        iconsize            TYPE clike OPTIONAL
        iconsrc             TYPE clike OPTIONAL
        iconvisible         TYPE clike OPTIONAL
        statustext          TYPE clike OPTIONAL
        statusvisible       TYPE clike OPTIONAL
        subtitle            TYPE clike OPTIONAL
        subtitlemaxlines    TYPE clike OPTIONAL
        title               TYPE clike OPTIONAL
        titlemaxlines       TYPE clike OPTIONAL
        visible             TYPE clike OPTIONAL
        datatimestamp       TYPE clike OPTIONAL
        press               TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS numeric_header
      IMPORTING
        id                      TYPE clike OPTIONAL
        class                   TYPE clike OPTIONAL
        visible                 TYPE clike OPTIONAL
        datatimestamp           TYPE clike OPTIONAL
        press                   TYPE clike OPTIONAL
        details                 TYPE clike OPTIONAL
        detailsmaxlines         TYPE clike OPTIONAL
        detailsstate            TYPE clike OPTIONAL
        iconalt                 TYPE clike OPTIONAL
        iconbackgroundcolor     TYPE clike OPTIONAL
        icondisplayshape        TYPE clike OPTIONAL
        iconinitials            TYPE clike OPTIONAL
        iconsize                TYPE clike OPTIONAL
        iconsrc                 TYPE clike OPTIONAL
        iconvisible             TYPE clike OPTIONAL
        number                  TYPE clike OPTIONAL
        numbersize              TYPE clike OPTIONAL
        numbervisible           TYPE clike OPTIONAL
        scale                   TYPE clike OPTIONAL
        sideindicatorsalignment TYPE clike OPTIONAL
        state                   TYPE clike OPTIONAL
        statustext              TYPE clike OPTIONAL
        statusvisible           TYPE clike OPTIONAL
        subtitle                TYPE clike OPTIONAL
        subtitlemaxlines        TYPE clike OPTIONAL
        title                   TYPE clike OPTIONAL
        titlemaxlines           TYPE clike OPTIONAL
        trend                   TYPE clike OPTIONAL
        unitofmeasurement       TYPE clike OPTIONAL
      RETURNING
        VALUE(result)           TYPE REF TO z2ui5_cl_xml_view.

    METHODS numeric_side_indicator
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        number        TYPE clike OPTIONAL
        state         TYPE clike OPTIONAL
        title         TYPE clike OPTIONAL
        unit          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS slide_tile
      IMPORTING
        displaytime    TYPE clike OPTIONAL
        height         TYPE clike OPTIONAL
        visible        TYPE clike OPTIONAL
        scope          TYPE clike OPTIONAL
        sizebehavior   TYPE clike OPTIONAL
        transitiontime TYPE clike OPTIONAL
        press          TYPE clike OPTIONAL
        width          TYPE clike OPTIONAL
        class          TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS tiles
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS busy_indicator
      IMPORTING
        id                      TYPE clike OPTIONAL
        class                   TYPE clike OPTIONAL
        customicon              TYPE clike OPTIONAL
        customiconheight        TYPE clike OPTIONAL
        customiconrotationspeed TYPE clike OPTIONAL
        customiconwidth         TYPE clike OPTIONAL
        size                    TYPE clike OPTIONAL
        text                    TYPE clike OPTIONAL
        textdirection           TYPE clike OPTIONAL
        customicondensityaware  TYPE clike OPTIONAL
        visible                 TYPE clike OPTIONAL
      RETURNING
        VALUE(result)           TYPE REF TO z2ui5_cl_xml_view.

    METHODS custom_layout
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS carousel_layout
      IMPORTING
        visiblepagescount TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS facet_filter
      IMPORTING
        id                  TYPE clike OPTIONAL
        class               TYPE clike OPTIONAL
        livesearch          TYPE clike OPTIONAL
        showpersonalization TYPE clike OPTIONAL
        showpopoverokbutton TYPE clike OPTIONAL
        showreset           TYPE clike OPTIONAL
        showsummarybar      TYPE clike OPTIONAL
        type                TYPE clike OPTIONAL
        visible             TYPE clike OPTIONAL
        confirm             TYPE clike OPTIONAL
        reset               TYPE clike OPTIONAL
        lists               TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS facet_filter_list
      IMPORTING
        id                          TYPE clike OPTIONAL
        class                       TYPE clike OPTIONAL
        active                      TYPE clike OPTIONAL
        allcount                    TYPE clike OPTIONAL
        backgrounddesign            TYPE clike OPTIONAL
        datatype                    TYPE clike OPTIONAL
        enablebusyindicator         TYPE clike OPTIONAL
        enablecaseinsensitivesearch TYPE clike OPTIONAL
        footertext                  TYPE clike OPTIONAL
        growing                     TYPE clike OPTIONAL
        growingdirection            TYPE clike OPTIONAL
        growingscrolltoload         TYPE clike OPTIONAL
        growingthreshold            TYPE clike OPTIONAL
        growingtriggertext          TYPE clike OPTIONAL
        headerlevel                 TYPE clike OPTIONAL
        headertext                  TYPE clike OPTIONAL
        includeiteminselection      TYPE clike OPTIONAL
        inset                       TYPE clike OPTIONAL
        key                         TYPE clike OPTIONAL
        keyboardmode                TYPE clike OPTIONAL
        mode                        TYPE clike OPTIONAL
        modeanimationon             TYPE clike OPTIONAL
        multiselectmode             TYPE clike OPTIONAL
        nodatatext                  TYPE clike OPTIONAL
        rememberselections          TYPE clike OPTIONAL
        retainlistsequence          TYPE clike OPTIONAL
        sequence                    TYPE clike OPTIONAL
        shownodata                  TYPE clike OPTIONAL
        showremovefaceticon         TYPE clike OPTIONAL
        showseparators              TYPE clike OPTIONAL
        showunread                  TYPE clike OPTIONAL
        sticky                      TYPE clike OPTIONAL
        swipedirection              TYPE clike OPTIONAL
        title                       TYPE clike OPTIONAL
        visible                     TYPE clike OPTIONAL
        width                       TYPE clike OPTIONAL
        wordwrap                    TYPE clike OPTIONAL
        listclose                   TYPE clike OPTIONAL
        listopen                    TYPE clike OPTIONAL
        search                      TYPE clike OPTIONAL
        selectionchange             TYPE clike OPTIONAL
        delete                      TYPE clike OPTIONAL
        items                       TYPE clike OPTIONAL
      RETURNING
        VALUE(result)               TYPE REF TO z2ui5_cl_xml_view.

    METHODS facet_filter_item
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        count         TYPE clike OPTIONAL
        counter       TYPE clike OPTIONAL
        highlight     TYPE clike OPTIONAL
        highlighttext TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
        navigated     TYPE clike OPTIONAL
        selected      TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        unread        TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
        detailpress   TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS draft_indicator
      IMPORTING
        id             TYPE clike OPTIONAL
        class          TYPE clike OPTIONAL
        mindisplaytime TYPE clike OPTIONAL
        state          TYPE clike OPTIONAL
        visible        TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS drag_info
      IMPORTING sourceAggregation TYPE clike OPTIONAL
      RETURNING VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS Drag_Drop_Info
      IMPORTING
        sourceAggregation TYPE clike OPTIONAL
        targetAggregation TYPE clike OPTIONAL
        dragStart         TYPE clike OPTIONAL
        drop              TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS drag_drop_config
      IMPORTING
        ns            TYPE clike DEFAULT `f`
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS html_map
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        name          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS html_area
      IMPORTING
        id            TYPE clike OPTIONAL
        shape         TYPE clike OPTIONAL
        coords        TYPE clike OPTIONAL
        alt           TYPE clike OPTIONAL
        target        TYPE clike OPTIONAL
        href          TYPE clike OPTIONAL
        onclick       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS html_canvas
      IMPORTING
        id            TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
        style         TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS notification_list
      IMPORTING
        id                     TYPE clike OPTIONAL
        class                  TYPE clike OPTIONAL
        footertext             TYPE clike OPTIONAL
        growing                TYPE clike OPTIONAL
        growingdirection       TYPE clike OPTIONAL
        growingscrolltoload    TYPE clike OPTIONAL
        growingthreshold       TYPE clike OPTIONAL
        growingtriggertext     TYPE clike OPTIONAL
        headerlevel            TYPE clike OPTIONAL
        headertext             TYPE clike OPTIONAL
        includeiteminselection TYPE clike OPTIONAL
        inset                  TYPE clike OPTIONAL
        keyboardmode           TYPE clike OPTIONAL
        mode                   TYPE clike OPTIONAL
        modeanimationon        TYPE clike OPTIONAL
        multiselectmode        TYPE clike OPTIONAL
        nodatatext             TYPE clike OPTIONAL
        rememberselections     TYPE clike OPTIONAL
        shownodata             TYPE clike OPTIONAL
        showseparators         TYPE clike OPTIONAL
        showunread             TYPE clike OPTIONAL
        sticky                 TYPE clike OPTIONAL
        swipedirection         TYPE clike OPTIONAL
        visible                TYPE clike OPTIONAL
        width                  TYPE clike OPTIONAL
        beforeopencontextmenu  TYPE clike OPTIONAL
        delete                 TYPE clike OPTIONAL
        growingfinished        TYPE clike OPTIONAL
        growingstarted         TYPE clike OPTIONAL
        itempress              TYPE clike OPTIONAL
        select                 TYPE clike OPTIONAL
        selectionchange        TYPE clike OPTIONAL
        swipe                  TYPE clike OPTIONAL
        updatefinished         TYPE clike OPTIONAL
        updatestarted          TYPE clike OPTIONAL
      RETURNING
        VALUE(result)          TYPE REF TO z2ui5_cl_xml_view.

    METHODS notification_list_group
      IMPORTING
        id                            TYPE clike OPTIONAL
        autopriority                  TYPE clike OPTIONAL
        collapsed                     TYPE clike OPTIONAL
        enablecollapsebuttonwhenempty TYPE clike OPTIONAL
        highlight                     TYPE clike OPTIONAL
        highlighttext                 TYPE clike OPTIONAL
        navigated                     TYPE clike OPTIONAL
        priority                      TYPE clike OPTIONAL
        selected                      TYPE clike OPTIONAL
        showbuttons                   TYPE clike OPTIONAL
        showclosebutton               TYPE clike OPTIONAL
        showemptygroup                TYPE clike OPTIONAL
        showitemscounter              TYPE clike OPTIONAL
        title                         TYPE clike OPTIONAL
        type                          TYPE clike OPTIONAL
        unread                        TYPE clike OPTIONAL
        visible                       TYPE clike OPTIONAL
        class                         TYPE clike OPTIONAL
        oncollapse                    TYPE clike OPTIONAL
      RETURNING
        VALUE(result)                 TYPE REF TO z2ui5_cl_xml_view.

    METHODS notification_list_item
      IMPORTING
        id                 TYPE clike OPTIONAL
        visible            TYPE clike OPTIONAL
        class              TYPE clike OPTIONAL
        authoravatarcolor  TYPE clike OPTIONAL
        authorinitials     TYPE clike OPTIONAL
        description        TYPE clike OPTIONAL
        hideshowmorebutton TYPE clike OPTIONAL
        truncate           TYPE clike OPTIONAL
        authorname         TYPE clike OPTIONAL
        authorpicture      TYPE clike OPTIONAL
        counter            TYPE clike OPTIONAL
        datetime           TYPE clike OPTIONAL
        highlight          TYPE clike OPTIONAL
        highlighttext      TYPE clike OPTIONAL
        navigated          TYPE clike OPTIONAL
        priority           TYPE clike OPTIONAL
        selected           TYPE clike OPTIONAL
        showbuttons        TYPE clike OPTIONAL
        showclosebutton    TYPE clike OPTIONAL
        title              TYPE clike OPTIONAL
        type               TYPE clike OPTIONAL
        unread             TYPE clike OPTIONAL
        close              TYPE clike OPTIONAL
        detailpress        TYPE clike OPTIONAL
        press              TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS wizard
      IMPORTING
        id                 TYPE clike OPTIONAL
        class              TYPE clike OPTIONAL
        backgrounddesign   TYPE clike OPTIONAL
        busy               TYPE clike OPTIONAL
        busyindicatordelay TYPE clike OPTIONAL
        busyindicatorsize  TYPE clike OPTIONAL
        enablebranching    TYPE clike OPTIONAL
        fieldgroupids      TYPE clike OPTIONAL
        finishbuttontext   TYPE clike OPTIONAL
        height             TYPE clike OPTIONAL
        rendermode         TYPE clike OPTIONAL
        shownextbutton     TYPE clike OPTIONAL
        steptitlelevel     TYPE clike OPTIONAL
        visible            TYPE clike OPTIONAL
        width              TYPE clike OPTIONAL
        complete           TYPE clike OPTIONAL
        navigationchange   TYPE clike OPTIONAL
        stepactivate       TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS wizard_step
      IMPORTING
        id                 TYPE clike OPTIONAL
        busy               TYPE clike OPTIONAL
        busyindicatordelay TYPE clike OPTIONAL
        busyindicatorsize  TYPE clike OPTIONAL
        fieldgroupids      TYPE clike OPTIONAL
        icon               TYPE clike OPTIONAL
        !optional          TYPE clike OPTIONAL
        title              TYPE clike OPTIONAL
        validated          TYPE clike OPTIONAL
        visible            TYPE clike OPTIONAL
        activate           TYPE clike OPTIONAL
        subsequentsteps    TYPE clike OPTIONAL
        nextstep           TYPE clike OPTIONAL
        complete           TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS template_repeat
      IMPORTING
        list          TYPE clike OPTIONAL
        var           TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS template_with
      IMPORTING
        path          TYPE clike OPTIONAL
        helper        TYPE clike OPTIONAL
        var           TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS template_if
      IMPORTING
        test          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS template_then
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS template_else
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS template_elseif
      IMPORTING
        test          TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS relationship
      IMPORTING
        shapeid       TYPE clike OPTIONAL
        type          TYPE clike OPTIONAL
        successor     TYPE clike OPTIONAL
        predecessor   TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS relationships
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS no_data
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS lines
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS line
      IMPORTING
        id               TYPE clike OPTIONAL
        class            TYPE clike OPTIONAL
        arroworientation TYPE clike OPTIONAL
        arrowposition    TYPE clike OPTIONAL
        description      TYPE clike OPTIONAL
        from             TYPE clike OPTIONAL
        linetype         TYPE clike OPTIONAL
        selected         TYPE clike OPTIONAL
        status           TYPE clike OPTIONAL
        stretchtocenter  TYPE clike OPTIONAL
        title            TYPE clike OPTIONAL
        to               TYPE clike OPTIONAL
        visible          TYPE clike OPTIONAL
        press            TYPE clike OPTIONAL
        hover            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS groups
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS group
      IMPORTING
        id                  TYPE clike OPTIONAL
        class               TYPE clike OPTIONAL
        collapsed           TYPE clike OPTIONAL
        description         TYPE clike OPTIONAL
        headercheckboxstate TYPE clike OPTIONAL
        icon                TYPE clike OPTIONAL
        key                 TYPE clike OPTIONAL
        minwidth            TYPE clike OPTIONAL
        parentgroupkey      TYPE clike OPTIONAL
        status              TYPE clike OPTIONAL
        title               TYPE clike OPTIONAL
        visible             TYPE clike OPTIONAL
        collapseexpand      TYPE clike OPTIONAL
        headercheckboxpress TYPE clike OPTIONAL
        showdetail          TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS network_graph
      IMPORTING
        id              TYPE clike OPTIONAL
        class           TYPE clike OPTIONAL
        layout          TYPE clike OPTIONAL
        height          TYPE clike OPTIONAL
        width           TYPE clike OPTIONAL
        nodes           TYPE clike OPTIONAL
        lines           TYPE clike OPTIONAL
        groups          TYPE clike OPTIONAL
        backgroundcolor TYPE clike OPTIONAL
        backgroundimage TYPE clike OPTIONAL
        nodatatext      TYPE clike OPTIONAL
        orientation     TYPE clike OPTIONAL
        rendertype      TYPE clike OPTIONAL
        enablewheelzoom TYPE clike OPTIONAL
        enablezoom      TYPE clike OPTIONAL
        nodata          TYPE clike OPTIONAL
        visible         TYPE clike OPTIONAL
        afterlayouting  TYPE clike OPTIONAL
        beforelayouting TYPE clike OPTIONAL
        failure         TYPE clike OPTIONAL
        graphready      TYPE clike OPTIONAL
        search          TYPE clike OPTIONAL
        searchsuggest   TYPE clike OPTIONAL
        selectionchange TYPE clike OPTIONAL
        zoomchanged     TYPE clike OPTIONAL
      RETURNING
        VALUE(result)   TYPE REF TO z2ui5_cl_xml_view.

    METHODS layout_algorithm
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS layered_layout
      IMPORTING
        id                TYPE clike OPTIONAL
        class             TYPE clike OPTIONAL
        linespacingfactor TYPE clike OPTIONAL
        mergeedges        TYPE clike OPTIONAL
        nodeplacement     TYPE clike OPTIONAL
        nodespacing       TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS force_based_layout
      IMPORTING
        id              TYPE clike OPTIONAL
        class           TYPE clike OPTIONAL
        alpha           TYPE clike OPTIONAL
        charge          TYPE clike OPTIONAL
        friction        TYPE clike OPTIONAL
        maximumduration TYPE clike OPTIONAL
      RETURNING
        VALUE(result)   TYPE REF TO z2ui5_cl_xml_view.

    METHODS force_directed_layout
      IMPORTING
        id                      TYPE clike OPTIONAL
        class                   TYPE clike OPTIONAL
        cooldownstep            TYPE clike OPTIONAL
        initialtemperature      TYPE clike OPTIONAL
        maxiterations           TYPE clike OPTIONAL
        maxtime                 TYPE clike OPTIONAL
        optimaldistanceconstant TYPE clike OPTIONAL
        staticnodes             TYPE clike OPTIONAL
      RETURNING
        VALUE(result)           TYPE REF TO z2ui5_cl_xml_view.

    METHODS noop_layout
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS swim_lane_chain_layout
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS two_columns_layout
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS attributes
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS element_attribute
      IMPORTING
        ns            TYPE clike OPTIONAL
        label         TYPE clike OPTIONAL
        value         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS action_buttons
      IMPORTING
        ns            TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS action_button
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        enabled       TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        position      TYPE clike OPTIONAL
        title         TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS routes
      IMPORTING
        id            TYPE clike OPTIONAL
        items         TYPE clike OPTIONAL
          PREFERRED PARAMETER items
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS legend_area
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS legenditem
      IMPORTING
        id            TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        color         TYPE clike OPTIONAL
          PREFERRED PARAMETER text
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS legend
      IMPORTING
        id            TYPE clike OPTIONAL
        items         TYPE clike OPTIONAL
        caption       TYPE clike OPTIONAL
          PREFERRED PARAMETER items
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS route
      IMPORTING
        id            TYPE clike OPTIONAL
        position      TYPE clike OPTIONAL
        routetype     TYPE clike OPTIONAL
        linedash      TYPE clike OPTIONAL
        color         TYPE clike OPTIONAL
        colorborder   TYPE clike OPTIONAL
        linewidth     TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_menu
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        afterclose    TYPE clike OPTIONAL
        beforeopen    TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_menu_item
      IMPORTING
        id                 TYPE clike OPTIONAL
        class              TYPE clike OPTIONAL
        icon               TYPE clike OPTIONAL
        label              TYPE clike OPTIONAL
        resetbuttonenabled TYPE clike OPTIONAL
        showcancelbutton   TYPE clike OPTIONAL
        showconfirmbutton  TYPE clike OPTIONAL
        showresetbutton    TYPE clike OPTIONAL
        visible            TYPE clike OPTIONAL
        cancel             TYPE clike OPTIONAL
        confirm            TYPE clike OPTIONAL
        reset              TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_menu_action_item
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        label         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_menu_quick_action
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        category      TYPE clike OPTIONAL
        label         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_menu_quick_action_item
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
        label         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_menu_quick_group
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        change        TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_menu_quick_group_item
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        grouped       TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
        label         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_menu_quick_sort
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        change        TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_menu_quick_sort_item
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        sortorder     TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
        label         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_menu_quick_total
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        change        TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS column_menu_quick_total_item
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        totaled       TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
        label         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS micro_process_flow
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        arialabel     TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        rendertype    TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS micro_process_flow_item
      IMPORTING
        id               TYPE clike OPTIONAL
        class            TYPE clike OPTIONAL
        icon             TYPE clike OPTIONAL
        key              TYPE clike OPTIONAL
        showintermediary TYPE clike OPTIONAL
        showseparator    TYPE clike OPTIONAL
        state            TYPE clike OPTIONAL
        stepwidth        TYPE clike OPTIONAL
        title            TYPE clike OPTIONAL
        press            TYPE clike OPTIONAL
      RETURNING
        VALUE(result)    TYPE REF TO z2ui5_cl_xml_view.

    METHODS intermediary
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS custom_control
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS responsive_scale
      IMPORTING
        id                     TYPE clike OPTIONAL
        class                  TYPE clike OPTIONAL
        tickmarksbetweenlabels TYPE clike OPTIONAL
      RETURNING
        VALUE(result)          TYPE REF TO z2ui5_cl_xml_view.

    METHODS status_indicator
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
        labelposition TYPE clike OPTIONAL
        showlabel     TYPE clike OPTIONAL
        size          TYPE clike OPTIONAL
        value         TYPE clike OPTIONAL
        viewbox       TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS property_thresholds
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS property_threshold
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        fillcolor     TYPE clike OPTIONAL
        tovalue       TYPE clike OPTIONAL
        arialabel     TYPE clike OPTIONAL
        visible       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS shape_group
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS library_shape
      IMPORTING
        id                  TYPE clike OPTIONAL
        class               TYPE clike OPTIONAL
        animationonchange   TYPE clike OPTIONAL
        definition          TYPE clike OPTIONAL
        fillcolor           TYPE clike OPTIONAL
        fillingangle        TYPE clike OPTIONAL
        fillingdirection    TYPE clike OPTIONAL
        fillingtype         TYPE clike OPTIONAL
        height              TYPE clike OPTIONAL
        horizontalalignment TYPE clike OPTIONAL
        shapeid             TYPE clike OPTIONAL
        strokecolor         TYPE clike OPTIONAL
        strokewidth         TYPE clike OPTIONAL
        verticalalignment   TYPE clike OPTIONAL
        visible             TYPE clike OPTIONAL
        width               TYPE clike OPTIONAL
        x                   TYPE clike OPTIONAL
        y                   TYPE clike OPTIONAL
        aftershapeloaded    TYPE clike OPTIONAL
      RETURNING
        VALUE(result)       TYPE REF TO z2ui5_cl_xml_view.

    METHODS tile_info
      IMPORTING
        id              TYPE clike OPTIONAL
        class           TYPE clike OPTIONAL
        backgroundcolor TYPE clike OPTIONAL
        bordercolor     TYPE clike OPTIONAL
        src             TYPE clike OPTIONAL
        text            TYPE clike OPTIONAL
        textcolor       TYPE clike OPTIONAL
      RETURNING
        VALUE(result)   TYPE REF TO z2ui5_cl_xml_view.

    METHODS badge
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS side_navigation
      IMPORTING
        id            TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        selectedkey   TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS navigation_list
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS navigation_list_item
      IMPORTING
        text          TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        select        TYPE clike OPTIONAL
        href          TYPE clike OPTIONAL
        key           TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS fixed_item
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS viz_frame
      IMPORTING
        !id                TYPE clike OPTIONAL
        !legendvisible     TYPE clike OPTIONAL
        !vizcustomizations TYPE clike OPTIONAL
        !vizproperties     TYPE clike OPTIONAL
        !vizscales         TYPE clike OPTIONAL
        !viztype           TYPE clike OPTIONAL
        !height            TYPE clike OPTIONAL
        !width             TYPE clike OPTIONAL
        !uiconfig          TYPE clike DEFAULT `{applicationSet:'fiori'}`
        !visible           TYPE clike OPTIONAL
        !selectdata        TYPE clike OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view .
    METHODS viz_dataset
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view .
    METHODS viz_flattened_dataset
      IMPORTING
        !data         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view .
    METHODS viz_dimensions
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view .
    METHODS viz_dimension_definition
      IMPORTING
        !axis         TYPE clike OPTIONAL
        !datatype     TYPE clike OPTIONAL
        !displayvalue TYPE clike OPTIONAL
        !identity     TYPE clike OPTIONAL
        !name         TYPE clike OPTIONAL
        !sorter       TYPE clike OPTIONAL
        !value        TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view .
    METHODS viz_measures
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view .
    METHODS viz_measure_definition
      IMPORTING
        !format       TYPE clike OPTIONAL
        !group        TYPE clike OPTIONAL
        !identity     TYPE clike OPTIONAL
        !name         TYPE clike OPTIONAL
        !range        TYPE clike OPTIONAL
        !unit         TYPE clike OPTIONAL
        !value        TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view .
    METHODS viz_feeds
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view .
    METHODS viz_feed_item
      IMPORTING
        !id           TYPE clike OPTIONAL
        !uid          TYPE clike OPTIONAL
        !type         TYPE clike OPTIONAL
        !values       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view .
    METHODS smart_multi_input
      IMPORTING
        id                   TYPE clike OPTIONAL
        entitySet            TYPE clike OPTIONAL
        value                TYPE clike OPTIONAL
        supportranges        TYPE clike DEFAULT 'false'
        enableodataselect    TYPE clike DEFAULT 'false'
        requestatleastfields TYPE clike OPTIONAL
        singletokenmode      TYPE clike DEFAULT 'false'
        supportmultiselect   TYPE clike DEFAULT 'true'
        textseparator        TYPE clike OPTIONAL
        textlabel            TYPE clike OPTIONAL
        tooltiplabel         TYPE clike OPTIONAL
        textineditmodesource TYPE clike DEFAULT 'None'
        mandatory            TYPE clike DEFAULT 'false'
        maxlength            TYPE clike DEFAULT '0'
      RETURNING
        VALUE(result)        TYPE REF TO z2ui5_cl_xml_view.
  PROTECTED SECTION.
    DATA mv_name     TYPE string.
    DATA mv_ns       TYPE string.
    DATA mt_prop     TYPE SORTED TABLE OF z2ui5_if_types=>ty_s_name_value WITH NON-UNIQUE KEY n.

    DATA mt_ns       TYPE SORTED TABLE OF string WITH UNIQUE KEY table_line.
    DATA mo_root     TYPE REF TO z2ui5_cl_xml_view.
    DATA mo_previous TYPE REF TO z2ui5_cl_xml_view.
    DATA mo_parent   TYPE REF TO z2ui5_cl_xml_view.
    DATA mt_child    TYPE STANDARD TABLE OF REF TO z2ui5_cl_xml_view WITH EMPTY KEY.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_xml_view_cc DEFINITION FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    METHODS smartmultiinput_ext
      IMPORTING
        multiinputid  TYPE clike OPTIONAL
        change        TYPE clike OPTIONAL
        rangeData     TYPE clike OPTIONAL
        addedtokens   TYPE clike OPTIONAL
        removedtokens TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS multiinput_ext
      IMPORTING
        multiinputid   TYPE clike OPTIONAL
        multiinputname TYPE clike OPTIONAL
        change         TYPE clike OPTIONAL
        addedtokens    TYPE clike OPTIONAL
        removedtokens  TYPE clike OPTIONAL
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS uitableext
      IMPORTING
        tableid       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS camera_picture
      IMPORTING
        id            TYPE clike OPTIONAL
        value         TYPE clike OPTIONAL
        press         TYPE clike OPTIONAL
        autoplay      TYPE clike OPTIONAL
        onphoto       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS bwip_js
      IMPORTING
        bcid          TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        scale         TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS demo_output
      IMPORTING
        val           TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS focus
      IMPORTING
        focusid        TYPE clike OPTIONAL
        selectionstart TYPE clike OPTIONAL
        selectionend   TYPE clike OPTIONAL
        setupdate      TYPE clike OPTIONAL
          PREFERRED PARAMETER focusid
      RETURNING
        VALUE(result)  TYPE REF TO z2ui5_cl_xml_view.

    METHODS geolocation
      IMPORTING
        finished           TYPE clike OPTIONAL
        longitude          TYPE any   OPTIONAL
        latitude           TYPE any   OPTIONAL
        altitude           TYPE any   OPTIONAL
        accuracy           TYPE any   OPTIONAL
        altitudeaccuracy   TYPE any   OPTIONAL
        speed              TYPE any   OPTIONAL
        heading            TYPE any   OPTIONAL
        enablehighaccuracy TYPE any   OPTIONAL
        timeout            TYPE any   OPTIONAL
      RETURNING
        VALUE(result)      TYPE REF TO z2ui5_cl_xml_view.

    METHODS info_frontend
      IMPORTING
        finished          TYPE clike OPTIONAL
        ui5_version       TYPE clike OPTIONAL
        device_height     TYPE clike OPTIONAL
        device_width      TYPE clike OPTIONAL
        device_phone      TYPE clike OPTIONAL
        device_desktop    TYPE clike OPTIONAL
        device_tablet     TYPE clike OPTIONAL
        device_combi      TYPE clike OPTIONAL
        ui5_gav           TYPE clike OPTIONAL
        ui5_theme         TYPE clike OPTIONAL
        device_os         TYPE clike OPTIONAL
        device_systemtype TYPE clike OPTIONAL
        device_browser    TYPE clike OPTIONAL
          PREFERRED PARAMETER finished
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS spreadsheet_export
      IMPORTING
        tableid       TYPE clike
        type          TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        icon          TYPE clike OPTIONAL
        tooltip       TYPE clike OPTIONAL
        columnconfig  TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS file_uploader
      IMPORTING
        value             TYPE clike OPTIONAL
        path              TYPE clike OPTIONAL
        placeholder       TYPE clike OPTIONAL
        upload            TYPE clike OPTIONAL
        icononly          TYPE clike OPTIONAL
        buttononly        TYPE clike OPTIONAL
        buttontext        TYPE clike OPTIONAL
        uploadbuttontext  TYPE clike OPTIONAL
        checkdirectupload TYPE clike OPTIONAL
        filetype          TYPE clike OPTIONAL
        icon              TYPE clike OPTIONAL
        enabled           TYPE clike OPTIONAL
      RETURNING
        VALUE(result)     TYPE REF TO z2ui5_cl_xml_view.

    METHODS messaging
      IMPORTING
        items         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS message_manager
      IMPORTING
        items         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS title
      IMPORTING
        title         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS dirty
      IMPORTING
        isdirty       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS lp_title
      IMPORTING
        title                TYPE clike OPTIONAL
        ApplicationFullWidth TYPE clike OPTIONAL
          PREFERRED PARAMETER title
      RETURNING
        VALUE(result)        TYPE REF TO z2ui5_cl_xml_view.

    METHODS history
      IMPORTING
        search        TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS scrolling
      IMPORTING
        setupdate     TYPE clike OPTIONAL
        items         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS tree
      IMPORTING
        tree_id       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS timer
      IMPORTING
        finished      TYPE clike OPTIONAL
        delayms       TYPE clike OPTIONAL
        checkrepeat   TYPE clike OPTIONAL
        checkactive   TYPE clike OPTIONAL
          PREFERRED PARAMETER finished
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS websocket
      IMPORTING
        value         TYPE clike OPTIONAL
        received      TYPE clike OPTIONAL
        path          TYPE clike OPTIONAL
        checkrepeat   TYPE clike OPTIONAL
        checkactive   TYPE clike OPTIONAL
          PREFERRED PARAMETER received
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS binding_update
      IMPORTING
        changed       TYPE clike OPTIONAL
        path          TYPE clike OPTIONAL
          PREFERRED PARAMETER changed
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS chartjs
      IMPORTING
        canvas_id     TYPE clike OPTIONAL
        view          TYPE clike OPTIONAL
        config        TYPE clike OPTIONAL
        height        TYPE clike OPTIONAL
        width         TYPE clike OPTIONAL
        style         TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS favicon
      IMPORTING
        favicon       TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS approve_popover
      IMPORTING
        placement     TYPE clike OPTIONAL
        class         TYPE clike OPTIONAL
        text          TYPE clike OPTIONAL
        btn_txt       TYPE clike OPTIONAL
        btn_type      TYPE clike OPTIONAL
        btn_icon      TYPE clike OPTIONAL
        btn_event     TYPE clike OPTIONAL
      RETURNING
        VALUE(result) TYPE REF TO z2ui5_cl_xml_view.

    METHODS constructor
      IMPORTING
        view TYPE REF TO z2ui5_cl_xml_view.

  PROTECTED SECTION.
    DATA mo_view TYPE REF TO z2ui5_cl_xml_view.

  PRIVATE SECTION.
ENDCLASS.
CLASS z2ui5_cl_xml_view_cc IMPLEMENTATION.

  METHOD approve_popover.

    result = mo_view.

    mo_view->popover( showheader = abap_false
                      placement  = placement
                      class      = class )->hbox( justifycontent = `Center`
      )->vbox( justifycontent = `Center`
               alignitems     = `Center`
        )->text( text
        )->button( type  = btn_type
                   text  = btn_txt
                   icon  = btn_icon
                   press = btn_event ).

  ENDMETHOD.

  METHOD bwip_js.

    result = mo_view.
    mo_view->_generic( name   = `bwipjs`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `bcid`   v = bcid )
                                         ( n = `text`   v = text )
                                         ( n = `scale`  v = scale )
                                         ( n = `height` v = height )
                ) ).

  ENDMETHOD.

  METHOD camera_picture.

    result = mo_view.
    mo_view->_generic( name   = `CameraPicture`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `value`    v = value )
                                         ( n = `press`    v = press )
                                         ( n = `OnPhoto`    v = onphoto )
                                         ( n = `autoplay` v = z2ui5_cl_util=>boolean_abap_2_json( autoplay ) )
         ) ).

  ENDMETHOD.

  METHOD chartjs.

    result = mo_view.
    mo_view->_generic( name   = `chartjs`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `canvas_id`  v = canvas_id )
                                         ( n = `view`       v = view )
                                         ( n = `config`     v = config )
                                         ( n = `height`     v = height )
                                         ( n = `width`      v = width )
                                         ( n = `style`      v = style )
                                       ) ).
  ENDMETHOD.

  METHOD constructor.

    mo_view = view.

  ENDMETHOD.

  METHOD demo_output.

    DATA lv_style TYPE string.

    mo_view->_generic( ns   = `html`
                       name = `style` ).

    DATA(lv_class) = 'Z2UI5_CL_CC_DEMO_OUT'.
    CALL METHOD (lv_class)=>('GET_STYLE')
      RECEIVING
        result = lv_style.
    result = mo_view->_cc_plain_xml( lv_style )->html( val ).

  ENDMETHOD.

  METHOD favicon.

    result = mo_view.
    mo_view->_generic( name   = `Favicon`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `favicon`  v = favicon ) ) ).

  ENDMETHOD.

  METHOD file_uploader.

    result = mo_view.
    mo_view->_generic(
        name   = `FileUploader`
        ns     = `z2ui5`
        t_prop = VALUE #( (  n = `placeholder`        v = placeholder )
                          (  n = `upload`             v = upload )
                          (  n = `path`               v = path )
                          (  n = `value`              v = value )
                          (  n = `iconOnly`           v = z2ui5_cl_util=>boolean_abap_2_json( icononly ) )
                          (  n = `buttonOnly`         v = z2ui5_cl_util=>boolean_abap_2_json( buttononly ) )
                          (  n = `buttonText`         v = buttontext )
                          (  n = `uploadButtonText`   v = uploadbuttontext )
                          (  n = `fileType`           v = filetype )
                          (  n = `checkDirectUpload`  v = z2ui5_cl_util=>boolean_abap_2_json( checkdirectupload ) )
                          (  n = `icon`           v = icon )
                          (  n = `enabled`         v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) ) ) ).

  ENDMETHOD.

  METHOD focus.

    result = mo_view.
    mo_view->_generic( name   = `Focus`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `setUpdate`       v = setupdate )
                                         ( n = `selectionStart`  v = selectionstart )
                                         ( n = `selectionEnd`    v = selectionend )
                                         ( n = `focusId`         v = focusid )
         ) ).

  ENDMETHOD.

  METHOD geolocation.

    result = mo_view.
    mo_view->_generic( name   = `Geolocation`
                       ns     = `z2ui5`
                       t_prop = VALUE #(
                           ( n = `finished`  v = finished )
                           ( n = `longitude`  v = longitude )
                           ( n = `latitude`  v = latitude )
                           ( n = `altitude`  v = altitude )
                           ( n = `accuracy`  v = accuracy )
                           ( n = `altitudeAccuracy`  v = altitudeaccuracy )
                           ( n = `speed`  v = speed )
                           ( n = `heading`  v = heading )
                           ( n = `enableHighAccuracy`  v = z2ui5_cl_util=>boolean_abap_2_json( enablehighaccuracy ) )
                           ( n = `timeout`  v = timeout )
                ) ).

  ENDMETHOD.

  METHOD history.

    result = mo_view.
    mo_view->_generic( name   = `History`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `search`  v = search ) ) ).

  ENDMETHOD.

  METHOD info_frontend.

    result = mo_view.
    mo_view->_generic( name   = `Info`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `ui5_version`  v = ui5_version )
                                         ( n = `ui5_gav`  v = ui5_gav )
                                         ( n = `finished`  v = finished )
                                         ( n = `ui5_theme`  v = ui5_theme )
                                         ( n = `device_os`  v = device_os )
                                         ( n = `device_systemtype`  v = device_systemtype )
                                         ( n = `device_browser`  v = device_browser )
                                         ( n = `device_phone`   v = device_phone )
                                         ( n = `device_desktop` v = device_desktop )
                                         ( n = `device_tablet`   v = device_tablet )
                                         ( n = `device_combi`   v = device_combi )
                                         ( n = `device_height`   v = device_height )
                                         ( n = `device_width`   v = device_width ) )
               ).

  ENDMETHOD.

  METHOD message_manager.

    result = mo_view.
    mo_view->_generic( name   = `MessageManager`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `items`  v = items )
                ) ).

  ENDMETHOD.

  METHOD messaging.

    result = mo_view.
    mo_view->_generic( name   = `Messaging`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `items`  v = items )
                ) ).

  ENDMETHOD.

  METHOD multiinput_ext.

    result = mo_view.
    mo_view->_generic( name   = `MultiInputExt`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `MultiInputId` v = multiinputid )
                                         ( n = `MultiInputName` v = multiinputname )
                                         ( n = `change` v = change )
                                         ( n = `addedTokens` v = addedtokens )
                                         ( n = `removedTokens` v = removedtokens ) ) ).

  ENDMETHOD.

  METHOD tree.

    result = mo_view.
    mo_view->_generic( name   = `Tree`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `tree_id`   v = tree_id )
         ) ).

  ENDMETHOD.

  METHOD scrolling.

    result = mo_view.
    mo_view->_generic( name   = `Scrolling`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `setUpdate`   v = setupdate )
                                         ( n = `items`       v = items )
         ) ).

  ENDMETHOD.

  METHOD spreadsheet_export.

    result = mo_view.
    mo_view->_generic( name   = `ExportSpreadsheet`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `tableId`  v = tableid )
                                         ( n = `text`            v = text )
                                         ( n = `icon`            v = icon )
                                         ( n = `type`            v = type )
                                         ( n = `tooltip`         v = tooltip )
                                         ( n = `columnconfig`    v = columnconfig )
                ) ).

  ENDMETHOD.

  METHOD timer.

    result = mo_view.
    mo_view->_generic( name   = `Timer`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `delayMS`  v = delayms )
                                         ( n = `finished`  v = finished )
                                         ( n = `checkActive`  v = z2ui5_cl_util=>boolean_abap_2_json( checkactive ) )
                                         ( n = `checkRepeat`  v = z2ui5_cl_util=>boolean_abap_2_json( checkrepeat ) )
                ) ).

  ENDMETHOD.

  METHOD binding_update.

    result = mo_view.
    mo_view->_generic( name   = `BindingUpdate`
                       ns     = `z2ui5`
                       t_prop = VALUE #(
*                                 ( n = `value`  v = value )
                                         ( n = `path`  v = path )
                                         ( n = `changed`  v = changed )
*                                ( n = `checkActive`  v = z2ui5_cl_util=>boolean_abap_2_json( checkactive ) )
*                                ( n = `checkRepeat`  v = z2ui5_cl_util=>boolean_abap_2_json( checkrepeat ) )
                ) ).

  ENDMETHOD.

  METHOD websocket.

    result = mo_view.
    mo_view->_generic( name   = `Websocket`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `value`  v = value )
                                         ( n = `path`  v = path )
                                         ( n = `received`  v = received )
                                         ( n = `checkActive`  v = z2ui5_cl_util=>boolean_abap_2_json( checkactive ) )
                                         ( n = `checkRepeat`  v = z2ui5_cl_util=>boolean_abap_2_json( checkrepeat ) )
                ) ).

  ENDMETHOD.

  METHOD lp_title.

    result = mo_view.
    mo_view->_generic( name   = `LPTitle`
                       ns     = `z2ui5`
                       t_prop = VALUE #(
                        ( n = `title`  v = title )
                        ( n = `ApplicationFullWidth`  v = z2ui5_cl_util=>boolean_abap_2_json( ApplicationFullWidth )  ) )
                         ).

  ENDMETHOD.

  METHOD title.

    result = mo_view.
    mo_view->_generic( name   = `Title`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `title`  v = title ) ) ).

  ENDMETHOD.

  METHOD dirty.

    result = mo_view.
    mo_view->_generic( name   = `Dirty`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `isDirty`  v = z2ui5_cl_util=>boolean_abap_2_json( isdirty ) ) ) ).

  ENDMETHOD.

  METHOD uitableext.

    result = mo_view->_generic( name   = `UITableExt`
                                ns     = `z2ui5`
                                t_prop = VALUE #( ( n = `tableId` v = tableid )
                          ) ).

  ENDMETHOD.

  METHOD smartmultiinput_ext.

    result = mo_view.
    mo_view->_generic( name   = `SmartMultiInputExt`
                       ns     = `z2ui5`
                       t_prop = VALUE #( ( n = `multiInputId`  v = multiInputId )
                                         ( n = `rangeData`     v = rangeData )
                                         ( n = `change`        v = change )
                                         ( n = `addedTokens`   v = addedTokens )
                                         ( n = `removedTokens` v = removedTokens ) ) ).

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_xml_view IMPLEMENTATION.

  METHOD actions.
    result = _generic( name = `actions`
                       ns   = ns ).
  ENDMETHOD.

  METHOD action_button.
    result = _generic( name   = `ActionButton`
                       ns     = `networkgraph`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `icon`     v = icon )
                                         ( n = `position` v = position )
                                         ( n = `title`    v = title )
                                         ( n = `press`    v = press )
                                         ( n = `enabled`  v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) ) ) ).
  ENDMETHOD.

  METHOD action_buttons.
    result = _generic( name = `actionButtons`
                       ns   = SWITCH #( ns WHEN '' THEN `networkgraph` ELSE ns ) ).
  ENDMETHOD.

  METHOD action_sheet.
    result = _generic(
                 name   = `ActionSheet`
                 t_prop = VALUE #( ( n = `id`  v = id )
                                   ( n = `class`  v = class )
                                   ( n = `cancelbuttontext`  v = cancelbuttontext )
                                   ( n = `placement`         v = placement )
                                   ( n = `showCancelButton`  v = showcancelbutton )
                                   ( n = `title`             v = title )
                                   ( n = `afterClose`        v = afterclose )
                                   ( n = `afterOpen`         v = afteropen )
                                   ( n = `beforeClose`       v = beforeclose )
                                   ( n = `beforeOpen`        v = beforeopen )
                                   ( n = `cancelButtonPress` v = cancelbuttonpress )
                                   ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD additional_content.
    result = _generic( `additionalContent` ).
  ENDMETHOD.

  METHOD additional_numbers.
    result = _generic( `additionalNumbers` ).
  ENDMETHOD.

  METHOD analytic_map.

    result = _generic( name   = `AnalyticMap`
                       ns     = `vbm`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `initialPosition`  v = initialposition )
                                         ( n = `lassoSelection`  v = lassoSelection )
                                         ( n = `height`  v = height )
                                         ( n = `visible`  v = visible )
                                         ( n = `width`  v = width )
                                         ( n = `initialZoom`  v = initialzoom ) ) ).

  ENDMETHOD.

  METHOD appointments.
    result = _generic( `appointments` ).
  ENDMETHOD.

  METHOD appointment_items.
    result = _generic( `appointmentItems` ).
  ENDMETHOD.

  METHOD area_micro_chart.
    result = me.
    _generic( name   = `AreaMicroChart`
              ns     = `mchart`
              t_prop = VALUE #( ( n = `colorPalette`  v = colorpalette )
                                ( n = `press`       v = press )
                                ( n = `size`        v = size )
                                ( n = `height`      v = height )
                                ( n = `maxXValue`      v = maxxvalue )
                                ( n = `maxYValue`      v = maxyvalue )
                                ( n = `minXValue`      v = minxvalue )
                                ( n = `minYValue`      v = minyvalue )
                                ( n = `view`      v = view )
                                ( n = `alignContent`      v = aligncontent )
                                ( n = `hideOnNoData`    v = z2ui5_cl_util=>boolean_abap_2_json( hideonnodata ) )
                                ( n = `showLabel`    v = z2ui5_cl_util=>boolean_abap_2_json( showlabel ) )
                                ( n = `width`  v = width ) ) ).
  ENDMETHOD.

  METHOD attributes.
    result = _generic( name = `attributes`
                       ns   = SWITCH #( ns WHEN '' THEN `networkgraph` ELSE ns ) ).
  ENDMETHOD.

  METHOD avatar.
    result = me.
    _generic( name   = `Avatar`
              ns     = ns
              t_prop = VALUE #( ( n = `src`         v = src )
                                ( n = `class`       v = class )
                                ( n = `ariaHasPopup`       v = ariahaspopup )
                                ( n = `backgroundColor`       v = backgroundcolor )
                                ( n = `badgeIcon`       v = badgeicon )
                                ( n = `badgeTooltip`       v = badgetooltip )
                                ( n = `badgeValueState`       v = badgevaluestate )
                                ( n = `customDisplaySize`       v = customdisplaysize )
                                ( n = `customFontSize`       v = customfontsize )
                                ( n = `displayShape`       v = displayshape )
                                ( n = `fallbackIcon`       v = fallbackicon )
                                ( n = `imageFitType`       v = imagefittype )
                                ( n = `initials`       v = initials )
                                ( n = `showBorder`       v = z2ui5_cl_util=>boolean_abap_2_json( showborder ) )
                                ( n = `decorative`       v = z2ui5_cl_util=>boolean_abap_2_json( decorative ) )
                                ( n = `enabled`       v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `displaySize` v = displaysize )
                                ( n = `press` v = press ) ) ).
  ENDMETHOD.

  METHOD avatar_group.
    result = _generic( name   = `AvatarGroup`
                       ns     = `f`
                       t_prop = VALUE #( ( n = `id` v = id )
                                         ( n = `avatarCustomDisplaySize` v = avatarCustomDisplaySize )
                                         ( n = `avatarCustomDispavatarCustomFontSizelaySize` v = avatarCustomFontSize )
                                         ( n = `avatarDisplaySize` v = avatarDisplaySize )
                                         ( n = `blocked` v = z2ui5_cl_util=>boolean_abap_2_json( blocked ) )
                                         ( n = `busy` v = z2ui5_cl_util=>boolean_abap_2_json( busy ) )
                                         ( n = `busyIndicatorDelay` v = busyIndicatorDelay )
                                         ( n = `busyIndicatorSize` v = busyIndicatorSize )
                                         ( n = `fieldGroupIds` v = fieldGroupIds )
                                         ( n = `groupType` v = groupType )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `tooltip` v =  tooltip )
                                         ( n = `items` v = items )
                                         ( n = `press` v = press ) ) ).
  ENDMETHOD.

  METHOD avatar_group_item.
    result = me.
    _generic( name   = `AvatarGroupItem`
                       ns     = `f`
                       t_prop = VALUE #( ( n = `id` v = id )
                                         ( n = `busy` v = busy )
                                         ( n = `busyIndicatorDelay` v = busyIndicatorDelay )
                                         ( n = `busyIndicatorSize` v = busyIndicatorSize )
                                         ( n = `fallbackIcon` v = fallbackIcon )
                                         ( n = `fieldGroupIds` v = fieldGroupIds )
                                         ( n = `initials` v = initials )
                                         ( n = `src` v = src )
                                         ( n = `visible` v =  visible )
                                         ( n = `tooltip` v =  tooltip ) ) ).
  ENDMETHOD.

  METHOD axis_time_strategy.
    result = _generic( name = `axisTimeStrategy`
                       ns   = `gantt` ).
  ENDMETHOD.

  METHOD badge.
    result = _generic( `badge` ).
  ENDMETHOD.

  METHOD badge_custom_data.
    result = me.
    _generic( name   = `BadgeCustomData`
              t_prop = VALUE #( ( n = `key`      v = key )
                                ( n = `value`    v = value )
                                ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD bar.
    result = _generic( `Bar` ).
  ENDMETHOD.

  METHOD barcode_scanner_button.
    result = _generic( name   = `BarcodeScannerButton`
                       ns     = 'ndc'
                       t_prop = VALUE #( ( n = `id`                        v = id )
                                         ( n = `scanSuccess`               v = scansuccess )
                                         ( n = `scanFail`                  v = scanfail )
                                         ( n = `inputLiveUpdate`           v = inputliveupdate )
                                         ( n = `dialogTitle`               v = dialogtitle )
                                         ( n = `disableBarcodeInputDialog` v = disableBarcodeInputDialog )
                                         ( n = `frameRate`                 v = frameRate )
                                         ( n = `keepCameraScan`            v = keepCameraScan )
                                         ( n = `preferFrontCamera`         v = preferFrontCamera )
                                         ( n = `provideFallback`           v = provideFallback )
                                         ( n = `width`                     v = width )
                                         ( n = `zoom`                      v = zoom ) ) ).
  ENDMETHOD.

  METHOD bars.
    result = _generic( name = `bars`
                       ns   = `mchart` ).
  ENDMETHOD.

  METHOD base_rectangle.

    result = _generic(
        name   = `BaseRectangle`
        ns     = 'gantt'
        t_prop = VALUE #( ( n = `time`                      v = time )
                          ( n = `endTime`                   v = endtime )
                          ( n = `selectable`                v = z2ui5_cl_util=>boolean_abap_2_json( selectable ) )
                          ( n = `selectedFill`              v = selectedfill )
                          ( n = `fill`                      v = fill )
                          ( n = `height`                    v = height )
                          ( n = `title`                     v = title )
                          ( n = `animationSettings`         v = animationsettings )
                          ( n = `alignShape`                v = alignshape )
                          ( n = `color`                     v = color )
                          ( n = `fontSize`                  v = fontsize )
                          ( n = `connectable`               v = z2ui5_cl_util=>boolean_abap_2_json( connectable ) )
                          ( n = `fontFamily`                v = fontfamily )
                          ( n = `filter`                    v = filter )
                          ( n = `transform`                 v = transform )
                          ( n = `countInBirdEye`            v = z2ui5_cl_util=>boolean_abap_2_json( countinbirdeye ) )
                          ( n = `fontWeight`                v = fontweight )
                          ( n = `showTitle`                 v = z2ui5_cl_util=>boolean_abap_2_json( showtitle ) )
                          ( n = `selected`                  v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                          ( n = `resizable`                 v = z2ui5_cl_util=>boolean_abap_2_json( resizable ) )
                          ( n = `horizontalTextAlignment`   v = horizontaltextalignment )
                          ( n = `shapeId`                   v = shapeid )
                          ( n = `highlighted`               v = z2ui5_cl_util=>boolean_abap_2_json( highlighted ) )
                          ( n = `highlightable`             v = z2ui5_cl_util=>boolean_abap_2_json( highlightable ) ) ) ).
  ENDMETHOD.

  METHOD begin_button.

    result = _generic( `beginButton` ).

  ENDMETHOD.

  METHOD begin_column_pages.
    " todo, implement method
    result = _generic( name = `beginColumnPages`
                       ns   = `f` ).

  ENDMETHOD.

  METHOD blocks.
    result = _generic( name = `blocks`
                       ns   = `uxap` ).
  ENDMETHOD.

  METHOD more_blocks.
    result = _generic( name = `moreBlocks`
                       ns   = `uxap` ).
  ENDMETHOD.

  METHOD block_layout.
    result = _generic( name   = `BlockLayout`
                       ns     = `layout`
                       t_prop = VALUE #( ( n = `background` v = background )
                                         ( n = `id` v = id ) ) ).
  ENDMETHOD.

  METHOD block_layout_cell.
    result = _generic( name   = `BlockLayoutCell`
                       ns     = `layout`
                       t_prop = VALUE #( ( n = `backgroundColorSet` v = backgroundcolorset )
                                         ( n = `backgroundColorShade` v = backgroundcolorshade )
                                         ( n = `title` v = title )
                                         ( n = `titleAlignment` v = titlealignment )
                                         ( n = `width` v = width )
                                         ( n = `class` v = class )
                                         ( n = `id` v = id )
                                         ( n = `titleLevel` v = titlelevel ) ) ).
  ENDMETHOD.

  METHOD block_layout_row.
    result = _generic( name   = `BlockLayoutRow`
                       ns     = `layout`
                       t_prop = VALUE #( ( n = `rowColorSet` v = rowcolorset )
                                         ( n = `id` v = id ) ) ).
  ENDMETHOD.

  METHOD bullet_micro_chart.
    result = me.
    _generic(
        name   = `BulletMicroChart`
        ns     = `mchart`
        t_prop = VALUE #( ( n = `actualValueLabel`  v = actualvaluelabel )
                          ( n = `press`       v = press )
                          ( n = `size`        v = size )
                          ( n = `height`      v = height )
                          ( n = `width`      v = width )
                          ( n = `deltaValueLabel`      v = deltavaluelabel )
                          ( n = `maxValue`      v = maxvalue )
                          ( n = `minValue`      v = minvalue )
                          ( n = `mode`      v = mode )
                          ( n = `scale`      v = scale )
                          ( n = `targetValue`      v = targetvalue )
                          ( n = `targetValueLabel`      v = targetvaluelabel )
                          ( n = `scaleColor`      v = scalecolor )
                          ( n = `hideOnNoData`    v = z2ui5_cl_util=>boolean_abap_2_json( hideonnodata ) )
                          ( n = `showActualValue`    v = z2ui5_cl_util=>boolean_abap_2_json( showactualvalue ) )
                          ( n = `showActualValueInDeltaMode`    v = z2ui5_cl_util=>boolean_abap_2_json( savidm ) )
                          ( n = `showDeltaValue`    v = z2ui5_cl_util=>boolean_abap_2_json( showdeltavalue ) )
                          ( n = `showTargetValue`    v = z2ui5_cl_util=>boolean_abap_2_json( showtargetvalue ) )
                          ( n = `showThresholds`    v = z2ui5_cl_util=>boolean_abap_2_json( showthresholds ) )
                          ( n = `showValueMarker`    v = z2ui5_cl_util=>boolean_abap_2_json( showvaluemarker ) )
                          ( n = `smallRangeAllowed`    v = z2ui5_cl_util=>boolean_abap_2_json( smallrangeallowed ) )
                          ( n = `forecastValue`  v = forecastvalue ) ) ).
  ENDMETHOD.

  METHOD busy_indicator.
    result = _generic(
        name   = `BusyIndicator`
        t_prop = VALUE #(
            ( n = `id`  v = id )
            ( n = `class`  v = class )
            ( n = `customIcon`  v = customicon )
            ( n = `customIconHeight`         v = customiconheight )
            ( n = `customIconRotationSpeed`  v = customiconrotationspeed )
            ( n = `customIconWidth`             v = customiconwidth )
            ( n = `size`        v = size )
            ( n = `text`         v = text )
            ( n = `textDirection`       v = textdirection )
            ( n = `customIconDensityAware`           v = z2ui5_cl_util=>boolean_abap_2_json( customicondensityaware ) )
            ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD button.

    result = me.
    _generic( name   = `Button`
              ns     = ns
              t_prop = VALUE #( ( n = `press`   v = press )
                                ( n = `text`    v = text )
                                ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                ( n = `iconDensityAware` v = z2ui5_cl_util=>boolean_abap_2_json( icondensityaware ) )
                                ( n = `iconFirst` v = z2ui5_cl_util=>boolean_abap_2_json( iconfirst ) )
                                ( n = `icon`    v = icon )
                                ( n = `type`    v = type )
                                ( n = `id`      v = id )
                                ( n = `width`   v = width )
                                ( n = `tooltip` v = tooltip )
                                ( n = `textDirection` v = textdirection )
                                ( n = `accessibleRole` v = accessiblerole )
                                ( n = `activeIcon` v = activeicon )
                                ( n = `ariaHasPopup` v = ariahaspopup )
                                ( n = `class`   v = class )
                                ( n = `ariaLabelledBy`  v = arialabelledby )
                                ( n = `ariaDescribedBy` v = ariadescribedby ) ) ).
  ENDMETHOD.

  METHOD buttons.
    result = _generic( `buttons` ).
  ENDMETHOD.

  METHOD calendar_appointment.
    result = _generic(
        name   = `CalendarAppointment`
        ns     = `u`
        t_prop = VALUE #( ( n = `startDate`                 v = startdate )
                          ( n = `endDate`                   v = enddate )
                          ( n = `icon`                      v = icon )
                          ( n = `title`                     v = title )
                          ( n = `text`                      v = text )
                          ( n = `type`                      v = type )
                          ( n = `key`                       v = key )
                          ( n = `selected`                 v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                          ( n = `tentative`                 v = z2ui5_cl_util=>boolean_abap_2_json( tentative ) )
                        ) ).
  ENDMETHOD.

  METHOD calendar_legend_item.
    result = _generic( name   = `CalendarLegendItem`
                       t_prop = VALUE #( ( n = `text`                   v = text )
                                         ( n = `type`                   v = type )
                                         ( n = `tooltip`                v = tooltip )
                                         ( n = `color`                  v = color ) ) ).

  ENDMETHOD.

  METHOD card.
    result = _generic( name   = `Card`
                       ns     = `f`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `class`  v = class )
                                         ( n = `headerPosition`  v = headerposition )
                                         ( n = `height`  v = height )
                                         ( n = `width`  v = width )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD card_header.
    result = _generic( name   = `Header`
                       ns     = `card`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `class`  v = class )
                                         ( n = `dataTimestamp`  v = datatimestamp )
                                         ( n = `iconAlt`  v = iconalt )
                                         ( n = `iconBackgroundColor`  v = iconbackgroundcolor )
                                         ( n = `iconDisplayShape`  v = icondisplayshape )
                                         ( n = `iconInitials`  v = iconinitials )
                                         ( n = `iconSize`  v = iconsize )
                                         ( n = `iconSrc`  v = iconsrc )
                                         ( n = `statusText`  v = statustext )
                                         ( n = `statusVisible`  v = statusvisible )
                                         ( n = `subtitle`  v = subtitle )
                                         ( n = `subtitleMaxLines`  v = subtitlemaxlines )
                                         ( n = `title`  v = title )
                                         ( n = `press`  v = press )
                                         ( n = `titleMaxLines`  v = titlemaxlines )
                                         ( n = `iconVisible`  v = z2ui5_cl_util=>boolean_abap_2_json( iconvisible ) )
                                         ( n = `visible`    v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD carousel.

    result = _generic( name   = `Carousel`
                       t_prop = VALUE #( ( n = `loop`  v = z2ui5_cl_util=>boolean_abap_2_json( loop ) )
                                         ( n = `class`  v = class )
                                         ( n = `height`  v = height )
                                         ( n = `id`  v = id )
                                         ( n = `arrowsPlacement`  v = arrowsplacement )
                                         ( n = `backgroundDesign`  v = backgrounddesign )
                                         ( n = `pageIndicatorBackgroundDesign`  v = pageindicatorbackgrounddesign )
                                         ( n = `pageIndicatorBorderDesign`  v = pageindicatorborderdesign )
                                         ( n = `pageIndicatorPlacement`  v = pageindicatorplacement )
                                         ( n = `width`  v = width )
                                         ( n = `showPageIndicator`  v = showpageindicator )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).

  ENDMETHOD.

  METHOD carousel_layout.
    result = _generic( name   = `CarouselLayout`
                       t_prop = VALUE #( ( n = `visiblePagesCount`  v = visiblepagescount ) ) ).
  ENDMETHOD.

  METHOD cells.
    result = _generic( `cells` ).
  ENDMETHOD.

  METHOD checkbox.

    result = me.
    _generic( name   = `CheckBox`
              t_prop = VALUE #( ( n = `text`     v = text )
                                ( n = `id` v = id )
                                ( n = `class` v = class )
                                ( n = `name` v = name )
                                ( n = `selected` v = selected )
                                ( n = `textAlign` v = textalign )
                                ( n = `textDirection` v = textdirection )
                                ( n = `valueState` v = valuestate )
                                ( n = `width` v = width )
                                ( n = `activeHandling`  v = z2ui5_cl_util=>boolean_abap_2_json( activehandling ) )
                                ( n = `enabled`  v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                ( n = `displayOnly`  v = z2ui5_cl_util=>boolean_abap_2_json( displayonly ) )
                                ( n = `editable`  v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                                ( n = `partiallySelected`  v = z2ui5_cl_util=>boolean_abap_2_json( partiallyselected ) )
                                ( n = `useEntireWidth`  v = z2ui5_cl_util=>boolean_abap_2_json( useentirewidth ) )
                                ( n = `wrapping`  v = z2ui5_cl_util=>boolean_abap_2_json( wrapping ) )
                                ( n = `select`   v = select )
                                ( n = `required`   v = z2ui5_cl_util=>boolean_abap_2_json( required ) ) ) ).
  ENDMETHOD.

  METHOD code_editor.
    result = me.
    _generic( name   = `CodeEditor`
              ns     = `editor`
              t_prop = VALUE #( ( n = `value`   v = value )
                                ( n = `type`    v = type )
                                ( n = `editable`   v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                                ( n = `height` v = height )
                                ( n = `width`  v = width ) ) ).
  ENDMETHOD.

  METHOD column.
    result = _generic(
                 name   = `Column`
                 t_prop = VALUE #( ( n = `width` v = width )
                                   ( n = `minScreenWidth` v = minscreenwidth )
                                   ( n = `hAlign` v = halign )
                                   ( n = `headerMenu` v = headermenu )
                                   ( n = `autoPopinWidth` v = autopopinwidth )
                                   ( n = `vAlign` v = valign )
                                   ( n = `importance` v = importance )
                                   ( n = `mergeFunctionName` v = mergefunctionname )
                                   ( n = `popinDisplay` v = popindisplay )
                                   ( n = `sortIndicator` v = sortindicator )
                                   ( n = `styleClass` v = styleclass )
                                   ( n = `id`         v = id )
                                   ( n = `class`         v = class )
                                   ( n = `mergeDuplicates` v = z2ui5_cl_util=>boolean_abap_2_json( mergeduplicates ) )
                                   ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                   ( n = `demandPopin` v = z2ui5_cl_util=>boolean_abap_2_json( demandpopin ) ) ) ).
  ENDMETHOD.

  METHOD columns.
    result = _generic( ns   = ns
                       name = `columns` ).
  ENDMETHOD.

  METHOD column_element_data.
    result = _generic( name   = `ColumnElementData`
                       ns     = `form`
                       t_prop = VALUE #( ( n = `cellsLarge` v = cellslarge )
                                         ( n = `cellsSmall` v = cellssmall ) ) ).
  ENDMETHOD.

  METHOD column_list_item.
    result = _generic( name   = `ColumnListItem`
                       t_prop = VALUE #( ( n = `vAlign`   v = valign )
                                         ( n = `id` v = id )
                                         ( n = `selected` v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                                         ( n = `unread` v = z2ui5_cl_util=>boolean_abap_2_json( unread ) )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `type`     v = type )
                                         ( n = `counter`     v = counter )
                                         ( n = `highlight`     v = highlight )
                                         ( n = `highlightText`     v = highlighttext )
                                         ( n = `detailPress`     v = detailpress )
                                         ( n = `navigated`     v = z2ui5_cl_util=>boolean_abap_2_json( navigated ) )
                                         ( n = `press`    v = press ) ) ).
  ENDMETHOD.

  METHOD action_list_item.
    result = _generic( name   = `ActionListItem`
                       t_prop = VALUE #( ( n = `id`     v = id )
                                         ( n = `text`   v = text ) ) ).
  ENDMETHOD.

  METHOD column_menu.
    result = _generic( name   = `Menu`
                       ns     = `columnmenu`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `afterClose`     v = afterclose )
                                         ( n = `beforeOpen` v = beforeopen )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD column_menu_action_item.
    result = _generic( name   = `ActionItem`
                       ns     = `columnmenu`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `icon`     v = icon )
                                         ( n = `label`    v = label )
                                         ( n = `press`    v = press )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD column_menu_item.
    result = _generic( name   = `Item`
                       ns     = `columnmenu`
                       t_prop = VALUE #(
                           ( n = `id`       v = id )
                           ( n = `class`    v = class )
                           ( n = `icon`     v = icon )
                           ( n = `label`    v = label )
                           ( n = `cancel`    v = cancel )
                           ( n = `confirm`    v = confirm )
                           ( n = `reset`    v = reset )
                           ( n = `resetButtonEnabled`  v = z2ui5_cl_util=>boolean_abap_2_json( resetbuttonenabled ) )
                           ( n = `showCancelButton`  v = z2ui5_cl_util=>boolean_abap_2_json( showcancelbutton ) )
                           ( n = `showConfirmButton`  v = z2ui5_cl_util=>boolean_abap_2_json( showconfirmbutton ) )
                           ( n = `showResetButton`  v = z2ui5_cl_util=>boolean_abap_2_json( showresetbutton ) )
                           ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD column_menu_quick_action.
    result = _generic( name   = `QuickAction`
                       ns     = `columnmenu`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `category`     v = category )
                                         ( n = `label`     v = label )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD column_menu_quick_action_item.
    result = _generic( name   = `QuickActionItem`
                       ns     = `columnmenu`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `key`    v = key )
                                         ( n = `label`    v = label )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD column_menu_quick_group.
    result = _generic( name   = `QuickGroup`
                       ns     = `columnmenu`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `change`     v = change )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD column_menu_quick_group_item.
    result = _generic( name   = `QuickGroupItem`
                       ns     = `columnmenu`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `key`    v = key )
                                         ( n = `label`    v = label )
                                         ( n = `grouped`  v = z2ui5_cl_util=>boolean_abap_2_json( grouped ) )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD column_menu_quick_sort.
    result = _generic( name   = `QuickSort`
                       ns     = `columnmenu`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `change`     v = change )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD column_menu_quick_sort_item.
    result = _generic( name   = `QuickSortItem`
                       ns     = `columnmenu`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `key`    v = key )
                                         ( n = `label`    v = label )
                                         ( n = `sortOrder`  v = sortorder )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD column_menu_quick_total.
    result = _generic( name   = `QuickTotal`
                       ns     = `columnmenu`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `change`     v = change )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD column_menu_quick_total_item.
    result = _generic( name   = `QuickTotalItem`
                       ns     = `columnmenu`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `key`    v = key )
                                         ( n = `label`    v = label )
                                         ( n = `totaled`  v = z2ui5_cl_util=>boolean_abap_2_json( totaled ) )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD column_micro_chart.
    result = me.
    _generic(
        name   = `ColumnMicroChart`
        ns     = `mchart`
        t_prop = VALUE #( ( n = `width`  v = width )
                          ( n = `press`       v = press )
                          ( n = `size`        v = size )
                          ( n = `alignContent`      v = aligncontent )
                          ( n = `hideOnNoData`    v = z2ui5_cl_util=>boolean_abap_2_json( hideonnodata ) )
                          ( n = `allowColumnLabels`    v = z2ui5_cl_util=>boolean_abap_2_json( allowcolumnlabels ) )
                          ( n = `showBottomLabels`    v = z2ui5_cl_util=>boolean_abap_2_json( showbottomlabels ) )
                          ( n = `showTopLabels`    v = z2ui5_cl_util=>boolean_abap_2_json( showtoplabels ) )
                          ( n = `height`  v = height ) ) ).
  ENDMETHOD.

  METHOD column_micro_chart_data.
    result = me.
    _generic( name   = `ColumnMicroChartData`
              ns     = `mchart`
              t_prop = VALUE #( ( n = `color`  v = color )
                                ( n = `displayValue`       v = displayvalue )
                                ( n = `label`        v = label )
                                ( n = `value`      v = value )
                                ( n = `press`      v = press )
                               ) ).
  ENDMETHOD.

  METHOD combobox.
    result = _generic(
        name   = `ComboBox`
        t_prop = VALUE #(
            (  n = `showClearIcon` v = z2ui5_cl_util=>boolean_abap_2_json( showclearicon ) )
            (  n = `selectedKey`   v = selectedkey )
            (  n = `items`         v = items )
            (  n = `id`         v = id )
            (  n = `class`         v = class )
            (  n = `selectionchange`         v = selectionchange )
            (  n = `selectedItem`         v = selecteditem )
            (  n = `selectedItemId`         v = selecteditemid )
            (  n = `name`         v = name )
            (  n = `value`         v = value )
            (  n = `valueState`         v = valuestate )
            (  n = `valueStateText`         v = valuestatetext )
            (  n = `textAlign`         v = textalign )
            (  n = `showSecondaryValues`         v = z2ui5_cl_util=>boolean_abap_2_json( showsecondaryvalues ) )
            (  n = `visible`         v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
            (  n = `showValueStateMessage`         v = z2ui5_cl_util=>boolean_abap_2_json( showvaluestatemessage ) )
            (  n = `showButton`         v = z2ui5_cl_util=>boolean_abap_2_json( showbutton ) )
            (  n = `required`         v = z2ui5_cl_util=>boolean_abap_2_json( required ) )
            (  n = `editable`         v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
            (  n = `enabled`         v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
            (  n = `filterSecondaryValues`         v = z2ui5_cl_util=>boolean_abap_2_json( filtersecondaryvalues ) )
            (  n = `width`         v = width )
            (  n = `placeholder`         v = placeholder )
            (  n = `change`        v = change ) ) ).

  ENDMETHOD.

  METHOD comparison_micro_chart.
    result = _generic( name   = `ComparisonMicroChart`
                      ns     = `mchart`
                      t_prop = VALUE #( ( n = `colorPalette`  v = colorpalette )
                                        ( n = `press`       v = press )
                                        ( n = `size`        v = size )
                                        ( n = `height`      v = height )
                                        ( n = `maxValue`      v = maxvalue )
                                        ( n = `minValue`      v = minvalue )
                                        ( n = `scale`      v = scale )
                                        ( n = `width`      v = width )
                                        ( n = `hideOnNoData`    v = z2ui5_cl_util=>boolean_abap_2_json( hideonnodata ) )
                                        ( n = `shrinkable`    v = z2ui5_cl_util=>boolean_abap_2_json( shrinkable ) )
                                        ( n = `visible`    v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                        ( n = `view`  v = view ) ) ).
  ENDMETHOD.

  METHOD comparison_micro_chart_data.
    result = _generic( name   = `ComparisonMicroChartData`
                       ns     = `mchart`
                       t_prop = VALUE #( ( n = `color`  v = color )
                                         ( n = `press`       v = press )
                                         ( n = `displayValue`        v = displayValue )
                                         ( n = `title`      v = title )
                                         ( n = `value`      v = value )  ) ).
  ENDMETHOD.

  METHOD constructor.

  ENDMETHOD.

  METHOD container_content.

    result = _generic( name   = `ContainerContent`
                       ns     = `vk`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `title`  v = title )
                                         ( n = `icon`  v = icon ) ) ).

  ENDMETHOD.

  METHOD container_toolbar.

    result = _generic(
        name   = `ContainerToolbar`
        ns     = `gantt`
        t_prop = VALUE #(
            ( n = `showSearchButton`          v = showsearchbutton )
            ( n = `alignCustomContentToRight` v = z2ui5_cl_util=>boolean_abap_2_json( aligncustomcontenttoright ) )
            ( n = `findMode`                  v = findmode )
            ( n = `infoOfSelectItems`         v = infoofselectitems )
            ( n = `findbuttonpress`           v = findbuttonpress )
            ( n = `showBirdEyeButton`         v = z2ui5_cl_util=>boolean_abap_2_json( showbirdeyebutton ) )
            ( n = `showDisplayTypeButton`     v = z2ui5_cl_util=>boolean_abap_2_json( showdisplaytypebutton ) )
            ( n = `showLegendButton`          v = z2ui5_cl_util=>boolean_abap_2_json( showlegendbutton ) )
            ( n = `showSettingButton`         v = z2ui5_cl_util=>boolean_abap_2_json( showsettingbutton ) )
            ( n = `showTimeZoomControl`       v = z2ui5_cl_util=>boolean_abap_2_json( showtimezoomcontrol ) )
            ( n = `stepCountOfSlider`         v = stepcountofslider )
            ( n = `zoomControlType`           v = zoomcontroltype )
            ( n = `zoomLevel`                 v = zoomlevel ) ) ).
  ENDMETHOD.

  METHOD content.

    result = _generic( ns   = ns
                       name = `content` ).

  ENDMETHOD.

  METHOD content_left.
    result = _generic( `contentLeft` ).
  ENDMETHOD.

  METHOD content_middle.
    result = _generic( `contentMiddle` ).
  ENDMETHOD.

  METHOD content_right.
    result = _generic( `contentRight` ).
  ENDMETHOD.

  METHOD core_custom_data.
    result = me.
    _generic( name   = `CustomData`
              ns     = `core`
              t_prop = VALUE #( ( n = `value` v = value )
                                ( n = `key` v = key )
                                ( n = `writeToDom` v = z2ui5_cl_util=>boolean_abap_2_json( writetodom ) ) ) ).

  ENDMETHOD.

  METHOD currency.
    result = _generic( name   = `Currency`
                       ns     = 'u'
                       t_prop = VALUE #( ( n = `value`        v = value )
                                         ( n = `currency`     v = currency )
                                         ( n = `useSymbol`    v = z2ui5_cl_util=>boolean_abap_2_json( usesymbol ) )
                                         ( n = `maxPrecision` v = maxprecision )
                                         ( n = `stringValue`  v = stringvalue ) ) ).

  ENDMETHOD.

  METHOD custom_control.
    result = _generic( name = `customControl`
                       ns   = `commons` ).
  ENDMETHOD.

  METHOD custom_data.
    result = _generic( name = `customData`
                       ns   = ns ).
  ENDMETHOD.

  METHOD custom_header.
    result = _generic( `customHeader` ).
  ENDMETHOD.

  METHOD custom_layout.
    result = _generic( name = `customLayout`
                       ns   = ns  ).
  ENDMETHOD.

  METHOD custom_list_item.
    result = _generic( `CustomListItem` ).
  ENDMETHOD.

  METHOD data.
    result = _generic( name = `data`
                       ns   = `mchart` ).
  ENDMETHOD.

  METHOD date_picker.
    result = me.
    _generic( name   = `DatePicker`
              t_prop = VALUE #(
                  ( n = `value`                 v = value )
                  ( n = `displayFormat`         v = displayformat )
                  ( n = `displayFormatType`         v = displayformattype )
                  ( n = `valueFormat`           v = valueformat )
                  ( n = `required`              v = z2ui5_cl_util=>boolean_abap_2_json( required ) )
                  ( n = `valueState`            v = valuestate )
                  ( n = `valueStateText`        v = valuestatetext )
                  ( n = `placeholder`           v = placeholder )
                  ( n = `textAlign`                v = textalign )
                  ( n = `textDirection`                v = textdirection )
                  ( n = `change`                v = change )
                  ( n = `maxDate`               v = maxdate )
                  ( n = `minDate`               v = mindate )
                  ( n = `width`               v = width )
                  ( n = `id`               v = id )
                  ( n = `dateValue`               v = datevalue )
                  ( n = `name`               v = name )
                  ( n = `class`               v = class )
                  ( n = `calendarWeekNumbering`               v = calendarweeknumbering )
                  ( n = `initialFocusedDateValue`               v = initialfocuseddatevalue )
                  ( n = `enabled`               v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                  ( n = `visible`               v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                  ( n = `editable`              v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                  ( n = `hideInput`             v = z2ui5_cl_util=>boolean_abap_2_json( hideinput ) )
                  ( n = `showFooter`            v = z2ui5_cl_util=>boolean_abap_2_json( showfooter ) )
                  ( n = `showValueStateMessage` v = z2ui5_cl_util=>boolean_abap_2_json( showvaluestatemessage ) )
                  ( n = `showCurrentDateButton` v = z2ui5_cl_util=>boolean_abap_2_json( showcurrentdatebutton ) ) ) ).
  ENDMETHOD.

  METHOD date_time_picker.
    result = me.
    _generic( name   = `DateTimePicker`
              t_prop = VALUE #( ( n = `value` v = value )
                                ( n = `placeholder`  v = placeholder )
                                ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `valueState` v = valuestate ) ) ).
  ENDMETHOD.

  METHOD delta_micro_chart.
    result = me.
    _generic( name   = `DeltaMicroChart`
              ns     = `mchart`
              t_prop = VALUE #( ( n = `color`  v = color )
                                ( n = `press`       v = press )
                                ( n = `size`        v = size )
                                ( n = `height`      v = height )
                                ( n = `width`      v = width )
                                ( n = `deltaDisplayValue`      v = deltadisplayvalue )
                                ( n = `displayValue1`      v = displayvalue1 )
                                ( n = `displayValue2`      v = displayvalue2 )
                                ( n = `title2`      v = title2 )
                                ( n = `value1`      v = value1 )
                                ( n = `value2`      v = value2 )
                                ( n = `view`      v = view )
                                ( n = `hideOnNoData`    v = z2ui5_cl_util=>boolean_abap_2_json( hideonnodata ) )
                                ( n = `title1`  v = title1 ) ) ).
  ENDMETHOD.

  METHOD dependents.
    result = _generic( name = `dependents`
                       ns   = ns ).
  ENDMETHOD.

  METHOD detail_box.
    result = _generic( `detailBox` ).
  ENDMETHOD.

  METHOD detail_pages.
    result = _generic( `detailPages` ).
  ENDMETHOD.

  METHOD dialog.

    result = _generic(
        name   = `Dialog`
        t_prop = VALUE #( ( n = `title`  v = title )
                          ( n = `icon`  v = icon )
                          ( n = `stretch`  v = stretch )
                          ( n = `state`  v = state )
                          ( n = `titleAlignment`  v = titlealignment )
                          ( n = `type`  v = type )
                          ( n = `showHeader`  v = showheader )
                          ( n = `contentWidth`  v = contentwidth )
                          ( n = `contentHeight`  v = contentheight )
                          ( n = `escapeHandler`  v = escapehandler )
                          ( n = `closeOnNavigation`  v = z2ui5_cl_util=>boolean_abap_2_json( closeonnavigation ) )
                          ( n = `draggable`  v = z2ui5_cl_util=>boolean_abap_2_json( draggable ) )
                          ( n = `resizable`  v = z2ui5_cl_util=>boolean_abap_2_json( resizable ) )
                          ( n = `horizontalScrolling`  v = z2ui5_cl_util=>boolean_abap_2_json( horizontalscrolling ) )
                          ( n = `verticalScrolling`  v = z2ui5_cl_util=>boolean_abap_2_json( verticalscrolling ) )
                          ( n = `afterOpen`  v = afteropen )
                          ( n = `beforeClose`  v = beforeclose )
                          ( n = `beforeOpen`  v = beforeopen )
                          ( n = `afterClose` v = afterclose ) ) ).
  ENDMETHOD.

  METHOD draft_indicator.
    result = _generic( name   = `DraftIndicator`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `class`  v = class )
                                         ( n = `minDisplayTime`  v = mindisplaytime )
                                         ( n = `state`  v = state )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD Drag_Drop_Info.
    result = me.
    _generic( name   = `DragDropInfo`
              ns     = `dnd`
              t_prop = VALUE #(
                ( n = `sourceAggregation`  v = sourceAggregation )
                ( n = `targetAggregation`  v = targetAggregation )
                ( n = `dragStart`          v = dragStart )
                ( n = `drop`               v = drop )
                 ) ).
  ENDMETHOD.

  METHOD drag_info.
    result = me.
    _generic( name   = `DragInfo`
              ns     = `dnd`
              t_prop = VALUE #( ( n = `sourceAggregation`  v = sourceAggregation ) ) ).
  ENDMETHOD.

  METHOD drag_drop_config.
    result = _generic( name = `dragDropConfig`
                          ns   = ns
                       ).
  ENDMETHOD.

  METHOD dynamic_page.
    result = _generic( name   = `DynamicPage`
                       ns     = `f`
                       t_prop = VALUE #(
                           (  n = `headerExpanded`           v = z2ui5_cl_util=>boolean_abap_2_json( headerexpanded ) )
                           (  n = `headerPinned`           v = z2ui5_cl_util=>boolean_abap_2_json( headerpinned ) )
                           (  n = `showFooter`           v = z2ui5_cl_util=>boolean_abap_2_json( showfooter ) )
                           (  n = `toggleHeaderOnTitleClick` v = toggleheaderontitleclick )
                           (  n = `class`  v = class ) ) ).
  ENDMETHOD.

  METHOD dynamic_page_header.
    result = _generic(
                 name   = `DynamicPageHeader`
                 ns     = `f`
                 t_prop = VALUE #( (  n = `pinnable`           v = z2ui5_cl_util=>boolean_abap_2_json( pinnable ) ) ) ).
  ENDMETHOD.

  METHOD dynamic_page_title.
    result = _generic( name = `DynamicPageTitle`
                       ns   = `f` ).
  ENDMETHOD.

  METHOD dynamic_side_content.
    result = _generic( name   = `DynamicSideContent`
                       ns     = 'layout'
                       t_prop = VALUE #( ( n = `id`                              v = id )
                                         ( n = `class`                           v = class )
                                         ( n = `sideContentVisibility`           v = sidecontentvisibility )
                                         ( n = `showSideContent`                 v = showsidecontent )
                                         ( n = `containerQuery`                  v = containerquery ) ) ).

  ENDMETHOD.

  METHOD element_attribute.
    result = _generic( name   = `ElementAttribute`
                       ns     = SWITCH #( ns WHEN '' THEN `networkgraph` ELSE ns )
                       t_prop = VALUE #( ( n = `label`  v = label )
                                         ( n = `value`  v = value ) ) ).
  ENDMETHOD.

  METHOD embedded_control.
    result = _generic( name = `embeddedControl`
                       ns   = `commons` ).
  ENDMETHOD.

  METHOD end_button.

    result = _generic( `endButton` ).

  ENDMETHOD.

  METHOD end_column_pages.
    " todo, implement method
    result = me.
  ENDMETHOD.

  METHOD expandable_text.
    result = _generic(
                 name   = `ExpandableText`
                 t_prop = VALUE #(
                     ( n = `id`  v = id )
                     ( n = `emptyIndicatorMode`  v = emptyindicatormode )
                     ( n = `maxCharacters`         v = maxcharacters )
                     ( n = `overflowMode`  v = overflowmode )
                     ( n = `renderWhitespace`             v = z2ui5_cl_util=>boolean_abap_2_json( renderwhitespace ) )
                     ( n = `text`        v = text )
                     ( n = `textAlign`         v = textalign )
                     ( n = `textDirection`       v = textdirection )
                     ( n = `wrappingType` v = wrappingtype )
                     ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                     ( n = `class`  v = class ) ) ).
  ENDMETHOD.

  METHOD expanded_content.
    result = _generic( name = `expandedContent`
                       ns   = ns ).
  ENDMETHOD.

  METHOD expanded_heading.
    result = _generic( name = `expandedHeading`
                       ns   = `uxap` ).
  ENDMETHOD.

  METHOD facet_filter.
    result = _generic( name   = `FacetFilter`
                       t_prop = VALUE #(
                           ( n = `id`  v = id )
                           ( n = `class`  v = class )
                           ( n = `liveSearch`  v = z2ui5_cl_util=>boolean_abap_2_json( livesearch ) )
                           ( n = `showPersonalization` v = z2ui5_cl_util=>boolean_abap_2_json( showpersonalization ) )
                           ( n = `showPopoverOKButton`  v = z2ui5_cl_util=>boolean_abap_2_json( showpopoverokbutton ) )
                           ( n = `showReset`             v = z2ui5_cl_util=>boolean_abap_2_json( showreset ) )
                           ( n = `showSummaryBar`        v = z2ui5_cl_util=>boolean_abap_2_json( showsummarybar ) )
                           ( n = `type`         v = type )
                           ( n = `confirm`        v = confirm )
                           ( n = `reset` v = reset )
                           ( n = `lists` v = lists )
                           ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD facet_filter_item.
    result = _generic(
                 name   = `FacetFilterItem`
                 t_prop = VALUE #( ( n = `id`  v = id )
                                   ( n = `class`  v = class )
                                   ( n = `count`  v = count )
                                   ( n = `counter` v = counter )
                                   ( n = `highlight`  v = highlight )
                                   ( n = `highlightText` v = highlighttext )
                                   ( n = `key`        v = key )
                                   ( n = `navigated`  v = z2ui5_cl_util=>boolean_abap_2_json( navigated ) )
                                   ( n = `selected`  v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                                   ( n = `unread`   v = z2ui5_cl_util=>boolean_abap_2_json( unread ) )
                                   ( n = `text`       v = text )
                                   ( n = `type`        v = type )
                                   ( n = `detailPress` v = detailpress )
                                   ( n = `press` v = press )
                                   ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD facet_filter_list.
    result = _generic(
        name   = `FacetFilterList`
        t_prop = VALUE #(
            ( n = `id`  v = id )
            ( n = `class`  v = class )
            ( n = `active`  v = z2ui5_cl_util=>boolean_abap_2_json( active ) )
            ( n = `allCount`  v = allcount )
            ( n = `backgroundDesign`         v = backgrounddesign )
            ( n = `dataType`  v = datatype )
            ( n = `enableBusyIndicator` v = z2ui5_cl_util=>boolean_abap_2_json( enablebusyindicator ) )
            ( n = `enableCaseInsensitiveSearch` v = z2ui5_cl_util=>boolean_abap_2_json( enablecaseinsensitivesearch ) )
            ( n = `footerText`         v = footertext )
            ( n = `growing`       v = z2ui5_cl_util=>boolean_abap_2_json( growing ) )
            ( n = `growingDirection`        v = growingdirection )
            ( n = `growingScrollToLoad` v = z2ui5_cl_util=>boolean_abap_2_json( growingscrolltoload ) )
            ( n = `growingThreshold` v = growingthreshold )
            ( n = `growingTriggerText` v = growingtriggertext )
            ( n = `headerLevel` v = headerlevel )
            ( n = `includeItemInSelection` v = z2ui5_cl_util=>boolean_abap_2_json( includeiteminselection ) )
            ( n = `inset` v = z2ui5_cl_util=>boolean_abap_2_json( inset ) )
            ( n = `key` v = key )
            ( n = `swipedirection` v = swipedirection )
            ( n = `headerText` v = headertext )
            ( n = `keyboardMode` v = keyboardmode )
            ( n = `mode` v = mode )
            ( n = `modeAnimationOn` v = z2ui5_cl_util=>boolean_abap_2_json( modeanimationon ) )
            ( n = `multiSelectMode` v = multiselectmode )
            ( n = `noDataText` v = nodatatext )
            ( n = `rememberSelections` v = z2ui5_cl_util=>boolean_abap_2_json( rememberselections ) )
            ( n = `retainListSequence` v = z2ui5_cl_util=>boolean_abap_2_json( retainlistsequence ) )
            ( n = `sequence` v = sequence )
            ( n = `showNoData` v = z2ui5_cl_util=>boolean_abap_2_json( shownodata ) )
            ( n = `showRemoveFacetIcon` v = z2ui5_cl_util=>boolean_abap_2_json( showremovefaceticon ) )
            ( n = `showSeparators` v = showseparators )
            ( n = `showUnread` v = z2ui5_cl_util=>boolean_abap_2_json( showunread ) )
            ( n = `sticky` v = sticky )
            ( n = `title` v = title )
            ( n = `width` v = width )
            ( n = `wordWrap` v = z2ui5_cl_util=>boolean_abap_2_json( wordwrap ) )
            ( n = `listClose` v = listclose )
            ( n = `listOpen` v = listopen )
            ( n = `search` v = search )
            ( n = `selectionChange` v = selectionchange )
            ( n = `delete` v = delete )
            ( n = `items` v = items )
            ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD factory.

    result = NEW #( ).

    IF t_ns IS NOT INITIAL.
      result->mt_prop = t_ns.
    ENDIF.

    result->mt_prop   = VALUE #( BASE result->mt_prop
                                 (  n = 'displayBlock'   v = 'true' )
                                 (  n = 'height'         v = '100%' ) ).

    result->mv_name   = `View`.
    result->mv_ns     = `mvc`.
    result->mo_root   = result.
    result->mo_parent = result.

    INSERT VALUE #( n = `xmlns`
                    v = `sap.m` ) INTO TABLE result->mt_prop.
    INSERT VALUE #( n = `xmlns:mvc`
                    v = `sap.ui.core.mvc` ) INTO TABLE result->mt_prop.
    INSERT VALUE #( n = `xmlns:core`
                    v = `sap.ui.core` ) INTO TABLE result->mt_prop.

  ENDMETHOD.

  METHOD factory_plain.

    result = NEW #( ).

    result->mo_root   = result.
    result->mo_parent = result.

  ENDMETHOD.

  METHOD factory_popup.

    result = NEW #( ).

    IF t_ns IS NOT INITIAL.
      result->mt_prop = t_ns.
    ENDIF.

    result->mv_name   = `FragmentDefinition`.
    result->mv_ns     = `core`.
    result->mo_root   = result.
    result->mo_parent = result.

    INSERT VALUE #( n = `xmlns`
                    v = `sap.m` ) INTO TABLE result->mt_prop.
    INSERT VALUE #( n = `xmlns:core`
                    v = `sap.ui.core` ) INTO TABLE result->mt_prop.

  ENDMETHOD.

  METHOD fb_control.
    result = _generic( name = `control`
                       ns   = `fb` ).
  ENDMETHOD.

  METHOD feed_input.
    result = _generic(
                 name   = `FeedInput`
                 t_prop = VALUE #( ( n = `buttonTooltip`    v = buttontooltip )
                                   ( n = `enabled`          v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                   ( n = `growing`          v = z2ui5_cl_util=>boolean_abap_2_json( growing ) )
                                   ( n = `growingMaxLines`  v = growingmaxlines )
                                   ( n = `icon`             v = icon )
                                   ( n = `iconDensityAware` v = z2ui5_cl_util=>boolean_abap_2_json( icondensityaware ) )
                                   ( n = `iconDisplayShape` v = icondisplayshape )
                                   ( n = `iconInitials`     v = iconinitials )
                                   ( n = `iconSize`         v = iconsize )
                                   ( n = `maxLength`        v = maxlength )
                                   ( n = `placeholder`      v = placeholder )
                                   ( n = `rows`             v = rows )
                                   ( n = `showExceededText` v = z2ui5_cl_util=>boolean_abap_2_json( showexceededtext ) )
                                   ( n = `showIcon`         v = z2ui5_cl_util=>boolean_abap_2_json( showicon ) )
                                   ( n = `value`            v = value )
                                   ( n = `class`            v = class )
                                   ( n = `post`             v = post ) ) ).

  ENDMETHOD.

  METHOD feed_list_item.
    result = _generic(
                 name   = `FeedListItem`
                 t_prop = VALUE #(
                     ( n = `activeIcon`                  v = activeicon )
                     ( n = `convertedLinksDefaultTarget` v = convertedlinksdefaulttarget )
                     ( n = `convertLinksToAnchorTags`    v = convertlinkstoanchortags )
                     ( n = `iconActive`                  v = z2ui5_cl_util=>boolean_abap_2_json( iconactive ) )
                     ( n = `icon`                        v = icon )
                     ( n = `iconDensityAware`            v = z2ui5_cl_util=>boolean_abap_2_json( icondensityaware ) )
                     ( n = `iconDisplayShape`            v = icondisplayshape )
                     ( n = `iconInitials`                v = iconinitials )
                     ( n = `iconSize`                    v = iconsize )
                     ( n = `info`                        v = info )
                     ( n = `lessLabel`                   v = lesslabel )
                     ( n = `maxCharacters`               v = maxcharacters )
                     ( n = `moreLabel`                   v = morelabel )
                     ( n = `sender`                      v = sender )
                     ( n = `senderActive`                v = z2ui5_cl_util=>boolean_abap_2_json( senderactive ) )
                     ( n = `showIcon`                    v = z2ui5_cl_util=>boolean_abap_2_json( showicon ) )
                     ( n = `text`                        v = text )
                     ( n = `senderPress`                 v = senderpress )
                     ( n = `iconPress`                   v = iconpress )
                     ( n = `timestamp`                   v = timestamp ) ) ).
  ENDMETHOD.

  METHOD feed_list_item_action.
    result = _generic( name   = `FeedListItemAction`
                       t_prop = VALUE #( ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                         ( n = `icon`    v = icon )
                                         ( n = `key`     v = key )
                                         ( n = `text`    v = text )
                                         ( n = `press`   v = press )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD filter_bar.

    result = _generic(
        name   = `FilterBar`
        ns     = 'fb'
        t_prop = VALUE #(
            ( n = 'useToolbar'     v = z2ui5_cl_util=>boolean_abap_2_json( usetoolbar ) )
            ( n = 'search'         v = search )
            ( n = 'id'             v = id )
            ( n = 'persistencyKey' v = persistencykey )
            ( n = 'afterVariantLoad' v = aftervariantload )
            ( n = 'afterVariantSave' v = aftervariantsave )
            ( n = 'assignedFiltersChanged' v = assignedfilterschanged )
            ( n = 'beforeVariantFetch' v = beforevariantfetch )
            ( n = 'cancel' v = cancel )
            ( n = 'clear' v = clear )
            ( n = 'filtersDialogBeforeOpen' v = filtersdialogbeforeopen )
            ( n = 'filtersDialogCancel' v = filtersdialogcancel )
            ( n = 'filtersDialogClosed' v = filtersdialogclosed )
            " TODO: check spelling: initialise (BE) -> initialize (ABAP cleaner)
            ( n = 'initialise' v = initialise )
            ( n = 'initialized' v = initialized )
            ( n = 'reset' v = reset )
            ( n = 'filterContainerWidth' v = filtercontainerwidth )
            ( n = 'header' v = header )
            ( n = 'advancedMode' v = z2ui5_cl_util=>boolean_abap_2_json( advancedmode ) )
            ( n = 'isRunningInValueHelpDialog' v = z2ui5_cl_util=>boolean_abap_2_json( isrunninginvaluehelpdialog ) )
            ( n = 'showAllFilters' v = z2ui5_cl_util=>boolean_abap_2_json( showallfilters ) )
            ( n = 'showClearOnFB' v = z2ui5_cl_util=>boolean_abap_2_json( showclearonfb ) )
            ( n = 'showFilterConfiguration' v = z2ui5_cl_util=>boolean_abap_2_json( showfilterconfiguration ) )
            ( n = 'showGoOnFB' v = z2ui5_cl_util=>boolean_abap_2_json( showgoonfb ) )
            ( n = 'showRestoreButton' v = z2ui5_cl_util=>boolean_abap_2_json( showrestorebutton ) )
            ( n = 'showRestoreOnFB' v = z2ui5_cl_util=>boolean_abap_2_json( showrestoreonfb ) )
            ( n = 'useSnapshot' v = z2ui5_cl_util=>boolean_abap_2_json( usesnapshot ) )
            ( n = 'searchEnabled' v = z2ui5_cl_util=>boolean_abap_2_json( searchenabled ) )
            ( n = 'considerGroupTitle' v = z2ui5_cl_util=>boolean_abap_2_json( considergrouptitle ) )
            ( n = 'deltaVariantMode' v = z2ui5_cl_util=>boolean_abap_2_json( deltavariantmode ) )
            ( n = 'disableSearchMatchesPatternWarning'
              v = z2ui5_cl_util=>boolean_abap_2_json( disablesearchmatchespatternw ) )
            ( n = 'filterBarExpanded' v = z2ui5_cl_util=>boolean_abap_2_json( filterbarexpanded ) )
            ( n = 'filterChange'   v = filterchange ) ) ).
  ENDMETHOD.

  METHOD filter_control.
    result = _generic( name = `control`
                       ns   = 'fb' ).
  ENDMETHOD.

  METHOD filter_group_item.
    result = _generic(
        name   = `FilterGroupItem`
        ns     = 'fb'
        t_prop = VALUE #( ( n = 'name'                v  = name )
                          ( n = 'label'               v  = label )
                          ( n = 'groupName'           v  = groupname )
                          ( n = 'controlTooltip'           v  = controltooltip )
                          ( n = 'entitySetName'           v  = entitysetname )
                          ( n = 'entityTypeName'           v  = entitytypename )
                          ( n = 'groupTitle'           v  = grouptitle )
                          ( n = 'labelTooltip'           v  = labeltooltip )
                          ( n = 'change'           v  = change )
                          ( n = 'visibleInFilterBar'  v  = z2ui5_cl_util=>boolean_abap_2_json( visibleinfilterbar ) )
                          ( n = 'mandatory'  v  = z2ui5_cl_util=>boolean_abap_2_json( mandatory ) )
                          ( n = 'hiddenFilter'  v  = z2ui5_cl_util=>boolean_abap_2_json( hiddenfilter ) )
                          ( n = 'visible'  v  = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                        ) ).

  ENDMETHOD.

  METHOD filter_group_items.
    result = _generic( name = `filterGroupItems`
                       ns   = 'fb' ).
  ENDMETHOD.

  METHOD filter_items.
    result = _generic( `filterItems` ).
  ENDMETHOD.

  METHOD first_status.
    result = _generic( `firstStatus` ).
  ENDMETHOD.

  METHOD flexible_column_layout.

    result = _generic(
        name   = `FlexibleColumnLayout`
        ns     = `f`
        t_prop = VALUE #(
            (  n = `layout` v = layout )
            (  n = `id` v = id )
            (  n = `class` v = class )
            (  n = `afterBeginColumnNavigate` v = afterbegincolumnnavigate )
            (  n = `afterEndColumnNavigate` v = afterendcolumnnavigate )
            (  n = `afterMidColumnNavigate` v = aftermidcolumnnavigate )
            (  n = `beginColumnNavigate` v = begincolumnnavigate )
            (  n = `columnResize` v = columnresize )
            (  n = `endColumnNavigate` v = endcolumnnavigate )
            (  n = `midColumnNavigate` v = midcolumnnavigate )
            (  n = `stateChange` v = statechange )
            (  n = `backgroundDesign` v = backgrounddesign )
            (  n = `defaultTransitionNameBeginColumn` v = defaulttransitionnamebegincol )
            (  n = `defaultTransitionNameEndColumn` v = defaulttransitionnameendcol )
            (  n = `defaultTransitionNameMidColumn` v = defaulttransitionnamemidcol )
            (  n = `autoFocus` v = z2ui5_cl_util=>boolean_abap_2_json( autofocus ) )
            (  n = `restoreFocusOnBackNavigation` v = z2ui5_cl_util=>boolean_abap_2_json( restorefocusonbacknavigation ) ) ) ).

  ENDMETHOD.

  METHOD flex_box.
    result = _generic(
                 name   = `FlexBox`
                 t_prop = VALUE #( ( n = `class`  v = class )
                                   ( n = `id` v = id )
                                   ( n = `renderType`  v = rendertype )
                                   ( n = `width`  v = width )
                                   ( n = `height`  v = height )
                                   ( n = `alignItems`  v = alignitems )
                                   ( n = `fitContainer`  v = z2ui5_cl_util=>boolean_abap_2_json( fitcontainer ) )
                                   ( n = `justifyContent`  v = justifycontent )
                                   ( n = `wrap`  v = wrap )
                                   ( n = `items`  v = items )
                                   ( n = `direction`  v = direction )
                                   ( n = `alignContent`  v = aligncontent )
                                   ( n = `backgroundDesign`  v = backgrounddesign )
                                   ( n = `displayInline`  v = z2ui5_cl_util=>boolean_abap_2_json( displayinline ) )
                                   ( n = `visible`        v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD flex_item_data.
    result = me.

    _generic( name   = `FlexItemData`
              t_prop = VALUE #( ( n = `growFactor`  v = growfactor )
                                ( n = `baseSize`   v = basesize )
                                ( n = `backgroundDesign`   v = backgrounddesign )
                                ( n = `styleClass`   v = styleclass )
                                ( n = `order`        v = order )
                                ( n = `shrinkFactor` v = shrinkfactor ) ) ).
  ENDMETHOD.

  METHOD footer.
    result = _generic( ns   = ns
                       name = `footer` ).
  ENDMETHOD.

  METHOD force_based_layout.
    result = _generic( name   = `ForceBasedLayout`
                       ns     = `nglayout`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `class`  v = class )
                                         ( n = `alpha`  v = alpha )
                                         ( n = `charge`  v = charge )
                                         ( n = `friction`  v = friction )
                                         ( n = `maximumDuration`  v = maximumduration ) ) ).
  ENDMETHOD.

  METHOD force_directed_layout.
    result = _generic( name   = `ForceDirectedLayout`
                       ns     = `nglayout`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `class`  v = class )
                                         ( n = `coolDownStep`  v = cooldownstep )
                                         ( n = `initialTemperature`  v = initialtemperature )
                                         ( n = `maxIterations`  v = maxiterations )
                                         ( n = `maxTime`  v = maxtime )
                                         ( n = `optimalDistanceConstant`  v = optimaldistanceconstant )
                                         ( n = `staticNodes`  v = staticnodes ) ) ).
  ENDMETHOD.

  METHOD formatted_text.
    result = me.
    _generic( name   = `FormattedText`
              t_prop = VALUE #( ( n = `htmlText` v = htmltext )
                                ( n = `convertedLinksDefaultTarget` v = convertedlinksdefaulttarget )
                                ( n = `convertLinksToAnchorTags` v = convertlinkstoanchortags )
                                ( n = `height` v = height )
                                ( n = `textAlign` v = textalign )
                                ( n = `textDirection` v = textdirection )
                                ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                ( n = `width` v = width )
                                ( n = `class` v = class )
                                ( n = `id` v = id )
                                ( n = `controls` v = controls ) ) ).
  ENDMETHOD.

  METHOD form_toolbar.
    result = _generic( name = `toolbar`
                       ns   = `form` ).
  ENDMETHOD.

  METHOD gantt_chart_container.
    result = _generic( name = `GanttChartContainer`
                       ns   = `gantt` ).
  ENDMETHOD.

  METHOD gantt_chart_with_table.
    result = _generic(
        name   = `GanttChartWithTable`
        ns     = `gantt`
        t_prop = VALUE #(
            ( n = `id` v = id )
            ( n = `shapeSelectionMode` v = shapeselectionmode )
            ( n = `isConnectorDetailsVisible` v = z2ui5_cl_util=>boolean_abap_2_json( isconnectordetailsvisible ) ) ) ).
  ENDMETHOD.

  METHOD gantt_row_settings.
    result = _generic( name   = `GanttRowSettings`
                       ns     = `gantt`
                       t_prop = VALUE #( ( n = `rowId` v = rowid )
                                         ( n = `shapes1` v = shapes1 )
                                         ( n = `shapes2` v = shapes2 )
                                         ( n = `relationships` v = relationships ) ) ).
  ENDMETHOD.

  METHOD gantt_table.
    result = _generic( name = `table`
                       ns   = `gantt` ).
  ENDMETHOD.

  METHOD gantt_toolbar.
    result = _generic( name = `toolbar`
                       ns   = 'gantt' ).
  ENDMETHOD.

  METHOD generic_tag.

    result = _generic( name   = `GenericTag`
                       t_prop = VALUE #( ( n = `ariaLabelledBy`           v = arialabelledby )
                                         ( n = `class`        v = class )
                                         ( n = `design`          v = design )
                                         ( n = `status`  v = status )
                                         ( n = `id`  v = id )
                                         ( n = `press`  v = press )
                                         ( n = `text`   v = text )
                                         ( n = `valueState`   v = valuestate ) ) ).

  ENDMETHOD.

  METHOD generic_tile.

    result = _generic(
                 name   = `GenericTile`
                 ns     = ``
                 t_prop = VALUE #(
                     ( n = `class`      v = class )
                     ( n = `id`     v = id )
                     ( n = `header`     v = header )
                     ( n = `mode`     v = mode )
                     ( n = `additionalTooltip`     v = additionaltooltip )
                     ( n = `appShortcut`     v = appshortcut )
                     ( n = `backgroundColor`     v = backgroundcolor )
                     ( n = `backgroundImage`     v = backgroundimage )
                     ( n = `dropAreaOffset`     v = dropareaoffset )
                     ( n = `press`      v = press )
                     ( n = `frameType`  v = frametype )
                     ( n = `failedText`  v = failedtext )
                     ( n = `headerImage`  v = headerimage )
                     ( n = `scope`  v = scope )
                     ( n = `sizeBehavior`  v = sizebehavior )
                     ( n = `state`  v = state )
                     ( n = `systemInfo`  v = systeminfo )
                     ( n = `tileBadge`  v = tilebadge )
                     ( n = `tileIcon`  v = tileicon )
                     ( n = `url`  v = url )
                     ( n = `valueColor`  v = valuecolor )
                     ( n = `width`  v = width )
                     ( n = `wrappingType`  v = wrappingtype )
                     ( n = `imageDescription`  v = imagedescription )
                     ( n = `navigationButtonText`  v = navigationbuttontext )
                     ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                     ( n = `renderOnThemeChange`  v = z2ui5_cl_util=>boolean_abap_2_json( renderonthemechange ) )
                     ( n = `enableNavigationButton`  v = z2ui5_cl_util=>boolean_abap_2_json( enablenavigationbutton ) )
                     ( n = `pressEnabled`  v = z2ui5_cl_util=>boolean_abap_2_json( pressenabled ) )
                     ( n = `iconLoaded`  v = z2ui5_cl_util=>boolean_abap_2_json( iconloaded ) )
                     ( n = `subheader`  v = subheader ) ) ).

  ENDMETHOD.

  METHOD get.

    IF name IS INITIAL.
      result = mo_root->mo_previous.
      RETURN.
    ENDIF.

    IF mo_parent->mv_name = name.
      result = mo_parent.
    ELSE.
      result = mo_parent->get( name ).
    ENDIF.

  ENDMETHOD.

  METHOD get_child.
    result = mt_child[ index ].
  ENDMETHOD.

  METHOD get_parent.
    result = mo_parent.
  ENDMETHOD.

  METHOD get_root.
    result = mo_root.
  ENDMETHOD.

  METHOD grid.

    result = _generic(
                 name   = `Grid`
                 ns     = `layout`
                 t_prop = VALUE #( ( n = `defaultSpan`    v = default_span )
                                   ( n = `class`          v = class )
                                   ( n = `containerQuery` v = z2ui5_cl_util=>boolean_abap_2_json( containerquery ) )
                                   ( n = `hSpacing`       v = hspacing )
                                   ( n = `vSpacing`       v = vspacing )
                                   ( n = `width`          v = width )
                                   ( n = `content`        v = content ) ) ).
  ENDMETHOD.

  METHOD grid_box_layout.
    result = me.
    _generic( name   = `GridBoxLayout`
              ns     = `grid`
              t_prop = VALUE #( ( n = `boxesPerRowConfig`   v = boxesPerRowConfig )
                                ( n = `boxMinWidth`   v = boxMinWidth )
                                ( n = `boxWidth`   v = boxWidth ) ) ).
  ENDMETHOD.

  METHOD grid_data.
    result = me.
    _generic( name   = `GridData`
              ns     = `layout`
              t_prop = VALUE #( ( n = `span`      v = span )
                                ( n = `linebreak` v = z2ui5_cl_util=>boolean_abap_2_json( linebreak ) )
                                ( n = `indentL`   v = indentl )
                                ( n = `indentM`   v = indentm ) ) ).
  ENDMETHOD.

  METHOD grid_drop_info.
    result = me.
    _generic( name   = `GridDropInfo`
              ns     = `dnd-grid`
              t_prop = VALUE #( ( n = `targetAggregation`      v = targetAggregation )
                                ( n = `dropPosition` v = dropPosition )
                                ( n = `dropLayout` v = dropLayout )
                                ( n = `drop`   v = drop )
                                ( n = `dragEnter`   v = dragEnter )
                                ( n = `dragOver`   v = dragOver ) ) ).
  ENDMETHOD.

  METHOD grid_list.
    result = _generic(
                 name   = `GridList`
                 ns     = `f`
                 t_prop = VALUE #(
                     ( n = `id`      v = id )
                     ( n = `busy` v = z2ui5_cl_util=>boolean_abap_2_json( busy ) )
                     ( n = `busyIndicatorDelay` v = busyIndicatorDelay )
                     ( n = `busyIndicatorSize` v = busyIndicatorSize )
                     ( n = `enableBusyIndicator` v = z2ui5_cl_util=>boolean_abap_2_json( enableBusyIndicator ) )
                     ( n = `fieldGroupIds` v = fieldGroupIds )
                     ( n = `footerText` v = footerText )
                     ( n = `growing` v = z2ui5_cl_util=>boolean_abap_2_json( growing ) )
                     ( n = `growingDirection` v = growingDirection )
                     ( n = `growingScrollToLoad` v = z2ui5_cl_util=>boolean_abap_2_json( growingScrollToLoad ) )
                     ( n = `growingThreshold` v = growingThreshold )
                     ( n = `growingTriggerText` v = growingTriggerText )
                     ( n = `headerLevel` v = headerLevel )
                     ( n = `headerText` v = headerText )
                     ( n = `includeItemInSelection` v = z2ui5_cl_util=>boolean_abap_2_json( includeItemInSelection ) )
                     ( n = `inset` v = z2ui5_cl_util=>boolean_abap_2_json( inset ) )
                     ( n = `keyboardMode` v = keyboardMode )
                     ( n = `mode` v = mode )
                     ( n = `modeAnimationOn` v = modeAnimationOn )
                     ( n = `multiSelectMode` v = multiSelectMode )
                     ( n = `noDataText` v = noDataText )
                     ( n = `rememberSelections` v = z2ui5_cl_util=>boolean_abap_2_json( rememberSelections ) )
                     ( n = `showNoData` v = z2ui5_cl_util=>boolean_abap_2_json( showNoData ) )
                     ( n = `showSeparators` v = showSeparators )
                     ( n = `showUnread` v = z2ui5_cl_util=>boolean_abap_2_json( showUnread ) )
                     ( n = `sticky` v = sticky )
                     ( n = `swipeDirection` v = swipeDirection )
                     ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                     ( n = `width` v = width )
                     ( n = `items`   v = items ) ) ).
  ENDMETHOD.

  METHOD grid_list_item.
    result = _generic( name   = `GridListItem`
                       ns     = `f`
                       t_prop = VALUE #( ( n = `busy`      v = busy )
                                         ( n = `busyIndicatorDelay` v = busyIndicatorDelay )
                                         ( n = `busyIndicatorSize` v = busyIndicatorSize )
                                         ( n = `counter` v = counter )
                                         ( n = `fieldGroupIds` v = fieldGroupIds )
                                         ( n = `highlight` v = highlight )
                                         ( n = `highlightText` v = highlightText )
                                         ( n = `navigated` v = navigated )
                                         ( n = `selected` v = selected )
                                         ( n = `type` v = type )
                                         ( n = `unread` v = unread )
                                         ( n = `visible`   v = visible )
                                         ( n = `detailPress` v = detailPress )
                                         ( n = `detailTap` v = detailTap )
                                         ( n = `press` v = press )
                                         ( n = `tap` v = tap ) ) ).
  ENDMETHOD.

  METHOD group.
    result = _generic( name   = `group`
                       ns     = `networkgraph`
                       t_prop = VALUE #( ( n = `collapsed`  v = z2ui5_cl_util=>boolean_abap_2_json( collapsed ) )
                                         ( n = `id`       v = id )
                                         ( n = `class`       v = class )
                                         ( n = `description`       v = description )
                                         ( n = `headerCheckBoxState`        v = headercheckboxstate )
                                         ( n = `icon`      v = icon )
                                         ( n = `key`      v = key )
                                         ( n = `minWidth`      v = minwidth )
                                         ( n = `parentGroupKey`      v = parentgroupkey )
                                         ( n = `status`      v = status )
                                         ( n = `title`    v = title )
                                         ( n = `collapseExpand`    v = collapseexpand )
                                         ( n = `showDetail`    v = showdetail )
                                         ( n = `visible`    v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `headerCheckBoxPress`  v = headercheckboxpress ) ) ).
  ENDMETHOD.

  METHOD groups.
    result = _generic( name = `groups`
                       ns   = SWITCH #( ns WHEN `` THEN `networkgraph` ELSE ns ) ).
  ENDMETHOD.

  METHOD group_items.
    result = _generic( `groupItems` ).
  ENDMETHOD.

  METHOD harvey_ball_micro_chart.

    result = _generic( name   = `HarveyBallMicroChart`
              ns     = `mchart`
              t_prop = VALUE #( ( n = `colorPalette`  v = colorpalette )
                                ( n = `press`       v = press )
                                ( n = `size`        v = size )
                                ( n = `height`      v = height )
                                ( n = `width`      v = width )
                                ( n = `total`      v = total )
                                ( n = `totalLabel`      v = totallabel )
                                ( n = `alignContent`      v = aligncontent )
                                ( n = `hideOnNoData`    v = z2ui5_cl_util=>boolean_abap_2_json( hideonnodata ) )
                                ( n = `formattedLabel`    v = z2ui5_cl_util=>boolean_abap_2_json( formattedlabel ) )
                                ( n = `showFractions`    v = z2ui5_cl_util=>boolean_abap_2_json( showfractions ) )
                                ( n = `showTotal`    v = z2ui5_cl_util=>boolean_abap_2_json( showtotal ) )
                                ( n = `totalScale`  v = totalscale ) ) ).
  ENDMETHOD.

  METHOD hbox.
    result = _generic(
        name   = `HBox`
        t_prop = VALUE #( ( n = `class`          v = class )
                          ( n = `alignContent`   v = aligncontent )
                          ( n = `alignItems`     v = alignitems )
                          ( n = `width`          v = width )
                          ( n = `id`          v = id )
                          ( n = `renderType`          v = rendertype )
                          ( n = `height`         v = height )
                          ( n = `wrap`           v = wrap )
                          ( n = `backgroundDesign`           v = backgrounddesign )
                          ( n = `direction`           v = direction )
                          ( n = `displayInline`           v = z2ui5_cl_util=>boolean_abap_2_json( displayinline ) )
                          ( n = `fitContainer`           v = z2ui5_cl_util=>boolean_abap_2_json( fitcontainer ) )
                          ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                          ( n = `justifyContent` v = justifycontent ) ) ).

  ENDMETHOD.

  METHOD header.
    result = _generic( name = `header`
                       ns   = ns ).
  ENDMETHOD.

  METHOD header_container.
    result = _generic( name   = `HeaderContainer`
                       t_prop = VALUE #( ( n = `scrollStep`     v = scrollstep )
                                         ( n = `scrollTime`     v = scrolltime )
                                         ( n = `orientation`    v = orientation )
                                         ( n = `height`         v = height ) ) ).
  ENDMETHOD.

  METHOD header_container_control.
    result = _generic(
                 name   = `HeaderContainer`
                 t_prop = VALUE #( ( n = `backgroundDesign` v = backgrounddesign )
                                   ( n = `gridLayout` v = z2ui5_cl_util=>boolean_abap_2_json( gridlayout ) )
                                   ( n = `height` v = height )
                                   ( n = `orientation` v = orientation )
                                   ( n = `scrollStep` v = scrollstep )
                                   ( n = `scrollStepByItem` v = scrollstepbyitem )
                                   ( n = `scrollTime` v = scrolltime )
                                   ( n = `showDividers` v = z2ui5_cl_util=>boolean_abap_2_json( showdividers ) )
                                   ( n = `showOverflowItem` v = z2ui5_cl_util=>boolean_abap_2_json( showoverflowitem ) )
                                   ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                   ( n = `snapToRow ` v = z2ui5_cl_util=>boolean_abap_2_json( snaptorow ) )
                                   ( n = `width` v = width )
                                   ( n = `id` v = id )
                                   ( n = `scroll` v = scroll ) ) ).
  ENDMETHOD.

  METHOD header_content.

    result = _generic( name = `headerContent`
                       ns   = ns ).

  ENDMETHOD.

  METHOD header_title.

    result = _generic( name = `headerTitle`
                       ns   = `uxap` ).

  ENDMETHOD.

  METHOD header_toolbar.

    result = _generic( `headerToolbar` ).

  ENDMETHOD.

  METHOD heading.

    result = me.
    result = _generic( name = `heading`
                       ns   = ns ).

  ENDMETHOD.

  METHOD horizontal_layout.
    result = _generic(
                 name   = `HorizontalLayout`
                 ns     = `layout`
                 t_prop = VALUE #( ( n = `class`  v = class )
                                   ( n = `allowWrapping`  v = z2ui5_cl_util=>boolean_abap_2_json( allowwrapping ) )
                                   ( n = `id`  v = id )
                                   ( n = `visible`  v = visible ) ) ).
  ENDMETHOD.

  METHOD html.

    result = _generic( name   = `HTML`
                       ns     = `core`
                       t_prop = VALUE #(
                           ( n = 'id' v = id )
                           ( n = 'content' v = content )
                           ( n = 'afterRendering' v = afterrendering )
                           ( n = 'preferDOM' v = z2ui5_cl_util=>boolean_abap_2_json( preferdom ) )
                           ( n = 'sanitizeContent' v = z2ui5_cl_util=>boolean_abap_2_json( sanitizecontent ) )
                           ( n = 'visible' v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).

  ENDMETHOD.

  METHOD html_area.
    result = _generic( name   = `area`
                       ns     = 'html'
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `shape`  v = shape )
                                         ( n = `coords`  v = coords )
                                         ( n = `alt`     v = alt )
                                         ( n = `target` v = target )
                                         ( n = `href`  v = href )
                                         ( n = `onclick`  v = onclick ) ) ).
  ENDMETHOD.

  METHOD html_canvas.
    result = _generic( name   = `canvas`
                       ns     = `html`
                       t_prop = VALUE #( ( n = `id`     v = id )
                                         ( n = `class`  v = class )
                                         ( n = `width`  v = width )
                                         ( n = `height` v = height )
                                         ( n = `style`  v = style ) ) ).
  ENDMETHOD.

  METHOD html_map.
    result = _generic( name   = `map`
                       ns     = 'html'
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `class`  v = class )
                                         ( n = `name`  v = name ) ) ).
  ENDMETHOD.

  METHOD icon.

    result = me.
    _generic( name   = `Icon`
              ns     = `core`
              t_prop = VALUE #( ( n = `size`  v = size )
                                ( n = `color`  v = color )
                                ( n = `class`  v = class )
                                ( n = `src`  v = src )
                                ( n = `activeColor`  v = activecolor )
                                ( n = `activeBackgroundColor`  v = activebackgroundcolor )
                                ( n = `alt`  v = alt )
                                ( n = `backgroundColor`  v = backgroundcolor )
                                ( n = `height`  v = height )
                                ( n = `width`  v = width )
                                ( n = `id`  v = id )
                                ( n = `press`  v = press )
                                ( n = `hoverBackgroundColor`  v = hoverbackgroundcolor )
                                ( n = `hoverColor`  v = hovercolor )
                                ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                ( n = `decorative`  v = z2ui5_cl_util=>boolean_abap_2_json( decorative ) )
                                ( n = `noTabStop`  v = z2ui5_cl_util=>boolean_abap_2_json( notabstop ) )
                                ( n = `useIconTooltip`  v = z2ui5_cl_util=>boolean_abap_2_json( useicontooltip ) ) ) ).

  ENDMETHOD.

  METHOD icon_tab_bar.

    result = _generic(
                 name   = `IconTabBar`
                 t_prop = VALUE #(
                     ( n = `class`       v = class )
                     ( n = `select`      v = select )
                     ( n = `expand`      v = expand )
                     ( n = `expandable`  v = z2ui5_cl_util=>boolean_abap_2_json( expandable ) )
                     ( n = `expanded`    v = z2ui5_cl_util=>boolean_abap_2_json( expanded ) )
                     ( n = `applyContentPadding`    v = z2ui5_cl_util=>boolean_abap_2_json( applycontentpadding ) )
                     ( n = `backgroundDesign`    v = backgrounddesign )
                     ( n = `enableTabReordering`    v = z2ui5_cl_util=>boolean_abap_2_json( enabletabreordering ) )
                     ( n = `headerBackgroundDesign`    v = headerbackgrounddesign )
                     ( n = `stretchContentHeight`    v = z2ui5_cl_util=>boolean_abap_2_json( stretchcontentheight ) )
                     ( n = `headerMode`    v = headermode )
                     ( n = `maxNestingLevel`    v = maxnestinglevel )
                     ( n = `tabDensityMode`    v = tabdensitymode )
                     ( n = `tabsOverflowMode`    v = tabsoverflowmode )
                     ( n = `items`    v = items )
                     ( n = `id`    v = id )
                     ( n = `content`    v = content )
                     ( n = `upperCase`    v = z2ui5_cl_util=>boolean_abap_2_json( uppercase ) )
                     ( n = `selectedKey` v = selectedkey ) ) ).
  ENDMETHOD.

  METHOD icon_tab_filter.

    result = _generic(
        name   = `IconTabFilter`
        t_prop = VALUE #( ( n = `icon`        v = icon )
                          (  n = `items`    v = items )
                          (  n = `design`    v = design )
                          ( n = `iconColor`   v = iconcolor )
                          ( n = `showAll`     v = z2ui5_cl_util=>boolean_abap_2_json( showall ) )
                          ( n = `iconDensityAware`     v = z2ui5_cl_util=>boolean_abap_2_json( icondensityaware ) )
                          ( n = `visible`     v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                          ( n = `count`       v = count )
                          ( n = `text`        v = text )
                          ( n = `id`        v = id )
                          ( n = `textDirection`        v = textdirection )
                          ( n = `class`        v = class )
                          ( n = `key`         v = key ) ) ).
  ENDMETHOD.

  METHOD icon_tab_header.

    result = _generic(
        name   = `IconTabHeader`
        t_prop = VALUE #(
            (  n = `selectedKey`     v = selectedkey )
            (  n = `items`           v = items )
            (  n = `select`          v = select )
            (  n = `ariaTexts`          v = ariatexts )
            (  n = `backgroundDesign`          v = backgrounddesign )
            (  n = `enableTabReordering`          v = z2ui5_cl_util=>boolean_abap_2_json( enabletabreordering ) )
            (  n = `maxNestingLevel`          v = maxnestinglevel )
            (  n = `tabDensityMode`          v = tabdensitymode )
            (  n = `tabsOverflowMode`          v = tabsoverflowmode )
            (  n = `id`          v = id )
            (  n = `visible`          v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
            (  n = `mode`            v = mode ) ) ).

  ENDMETHOD.

  METHOD icon_tab_separator.

    result = _generic( name   = `IconTabSeparator`
                       t_prop = VALUE #( ( n = `icon` v = icon )
                                         ( n = `iconDensityAware` v = icondensityaware )
                                         ( n = `id` v = id )
                                         ( n = `class` v = class )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).

  ENDMETHOD.

  METHOD illustrated_message.

    result = _generic(
        name   = `IllustratedMessage`
        t_prop = VALUE #(
            ( n = `enableVerticalResponsiveness` v = enableverticalresponsiveness )
            ( n = `illustrationType`             v = illustrationtype )
            ( n = `enableFormattedText`             v = z2ui5_cl_util=>boolean_abap_2_json( enableformattedtext ) )
            ( n = `illustrationSize`             v = illustrationsize )
            ( n = `description`             v = description )
            ( n = `title`             v = title ) ) ).
  ENDMETHOD.

  METHOD image.
    result = me.
    _generic( name   = `Image`
              t_prop = VALUE #( ( n = `id` v = id )
                                ( n = `src` v = src )
                                ( n = `class` v = class )
                                ( n = `height` v = height )
                                ( n = `alt` v = alt )
                                ( n = `activeSrc` v = activesrc )
                                ( n = `ariaHasPopup` v = ariahaspopup )
                                ( n = `backgroundPosition` v = backgroundposition )
                                ( n = `backgroundRepeat` v = backgroundrepeat )
                                ( n = `backgroundSize` v = backgroundsize )
                                ( n = `mode` v = mode )
                                ( n = `useMap` v = usemap )
                                ( n = `width` v = width )
                                ( n = `error` v = error )
                                ( n = `press` v = press )
                                ( n = `load` v = load )
                                ( n = `decorative` v = z2ui5_cl_util=>boolean_abap_2_json( decorative ) )
                                ( n = `densityAware` v = z2ui5_cl_util=>boolean_abap_2_json( densityaware ) )
                                ( n = `lazyLoading` v = z2ui5_cl_util=>boolean_abap_2_json( lazyloading ) ) ) ).
  ENDMETHOD.

  METHOD image_content.

    result = _generic( name   = `ImageContent`
                       t_prop = VALUE #( ( n = `src` v = src )
                                         ( n = `description` v = description )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `class` v = class )
                                         ( n = `press` v = press ) ) ).

  ENDMETHOD.

  METHOD info_label.
    result = _generic( name   = `InfoLabel`
                       ns     = 'tnt'
                       t_prop = VALUE #(
                           ( n = `id`               v = id )
                           ( n = `class`               v = class )
                           ( n = `text`             v = text )
                           ( n = `renderMode `      v = rendermode )
                           ( n = `colorScheme`      v = colorscheme )
                           ( n = `displayOnly`      v = z2ui5_cl_util=>boolean_abap_2_json( displayonly ) )
                           ( n = `icon`             v = icon )
                           ( n = `textDirection`    v = textdirection )
                           ( n = `visible`          v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                           ( n = `width`            v = width ) ) ).

  ENDMETHOD.

  METHOD input.
    result = me.
    _generic(
        name   = `Input`
        t_prop = VALUE #(
            ( n = `id`               v = id )
            ( n = `placeholder`      v = placeholder )
            ( n = `type`             v = type )
            ( n = `maxLength`        v = maxlength )
            ( n = `showClearIcon`    v = z2ui5_cl_util=>boolean_abap_2_json( showclearicon ) )
            ( n = `description`      v = description )
            ( n = `editable`         v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
            ( n = `enabled`          v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
            ( n = `visible`          v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
            ( n = `enableTableAutoPopinMode` v = z2ui5_cl_util=>boolean_abap_2_json( enabletableautopopinmode ) )
            ( n = `enableSuggestionsHighlighting`  v = z2ui5_cl_util=>boolean_abap_2_json( enablesuggestionshighlighting ) )
            ( n = `showTableSuggestionValueHelp`   v = z2ui5_cl_util=>boolean_abap_2_json( showtablesuggestionvaluehelp ) )
            ( n = `valueState`       v = valuestate )
            ( n = `valueStateText`   v = valuestatetext )
            ( n = `value`            v = value )
            ( n = `required`          v = z2ui5_cl_util=>boolean_abap_2_json( required ) )
            ( n = `suggest`          v = suggest )
            ( n = `suggestionItems`  v = suggestionitems )
            ( n = `suggestionRows`   v = suggestionrows )
            ( n = `showSuggestion`   v = z2ui5_cl_util=>boolean_abap_2_json( showsuggestion ) )
            ( n = `valueHelpRequest` v = valuehelprequest )
            ( n = `autocomplete`     v = z2ui5_cl_util=>boolean_abap_2_json( autocomplete ) )
            ( n = `valueLiveUpdate`  v = z2ui5_cl_util=>boolean_abap_2_json( valueliveupdate ) )
            ( n = `submit`           v = z2ui5_cl_util=>boolean_abap_2_json( submit ) )
            ( n = `showValueHelp`    v = z2ui5_cl_util=>boolean_abap_2_json( showvaluehelp ) )
            ( n = `valueHelpOnly`    v = z2ui5_cl_util=>boolean_abap_2_json( valuehelponly ) )
            ( n = `class`            v = class )
            ( n = `change`            v = change )
            ( n = `maxSuggestionWidth` v = maxsuggestionwidth )
            ( n = `width`             v = width )
            ( n = `textFormatter`     v = textformatter )
            ( n = `startSuggestion`     v = startsuggestion )
            ( n = `valueHelpIconSrc` v = valuehelpiconsrc )
            ( n = `textFormatMode`  v = textformatmode )
            ( n = `fieldWidth`          v = fieldwidth )
            ( n = `ariaLabelledBy`      v = arialabelledby )
            ( n = `ariaDescribedBy`     v = ariadescribedby ) ) ).
  ENDMETHOD.

  METHOD input_list_item.
    result = _generic( name   = `InputListItem`
                       t_prop = VALUE #( ( n = `label` v = label ) ) ).
  ENDMETHOD.

  METHOD interact_bar_chart.
    result = _generic(
        name   = `InteractiveBarChart`
        ns     = `mchart`
        t_prop = VALUE #( ( n = `selectionChanged`  v = selectionchanged )
                          ( n = `selectionEnabled`  v = z2ui5_cl_util=>boolean_abap_2_json( selectionenabled ) )
                          ( n = `showError`         v = z2ui5_cl_util=>boolean_abap_2_json( showerror ) )
                          ( n = `press`             v = press )
                          ( n = `labelWidth`        v = labelwidth )
                          ( n = `bars`              v = bars )
                          ( n = `errorMessageTitle` v = errormessagetitle )
                          ( n = `displayedBars`     v = displayedbars )
                          ( n = `min`     v = min )
                          ( n = `max`     v = max )
                          ( n = `errorMessage`      v = errormessage ) ) ).
  ENDMETHOD.

  METHOD interact_bar_chart_bar.
    result = _generic( name   = `InteractiveBarChartBar`
                       ns     = `mchart`
                       t_prop = VALUE #( ( n = `label`          v = label )
                                         ( n = `displayedValue` v = displayedvalue )
                                         ( n = `value`          v = value )
                                         ( n = `selected`       v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                                         ( n = `color`          v = color ) ) ).
  ENDMETHOD.

  METHOD interact_donut_chart.
    result = _generic(
        name   = `InteractiveDonutChart`
        ns     = `mchart`
        t_prop = VALUE #( ( n = `selectionChanged`  v = selectionchanged )
                          ( n = `selectionEnabled`         v = z2ui5_cl_util=>boolean_abap_2_json( selectionenabled ) )
                          ( n = `showError`         v = z2ui5_cl_util=>boolean_abap_2_json( showerror ) )
                          ( n = `errorMessageTitle` v = errormessagetitle )
                          ( n = `errorMessage`      v = errormessage )
                          ( n = `displayedSegments` v = displayedsegments )
                          ( n = `segments` v = segments )
                          ( n = `press`             v = press ) ) ).
  ENDMETHOD.

  METHOD interact_donut_chart_segment.
    result = _generic( name   = `InteractiveDonutChartSegment`
                       ns     = `mchart`
                       t_prop = VALUE #( ( n = `label`          v = label )
                                         ( n = `displayedValue` v = displayedvalue )
                                         ( n = `value`          v = value )
                                         ( n = `selected`       v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                                         ( n = `color`          v = color ) ) ).
  ENDMETHOD.

  METHOD interact_line_chart.
    result = _generic( name   = `InteractiveLineChart`
                       ns     = `mchart`
                       t_prop = VALUE #( ( n = `selectionChanged`  v = selectionchanged )
                                         ( n = `showError`         v = z2ui5_cl_util=>boolean_abap_2_json( showerror ) )
                                         ( n = `press`             v = press )
                                         ( n = `errorMessageTitle` v = errormessagetitle )
                                         ( n = `errorMessage`      v = errormessage )
                                         ( n = `precedingPoint`    v = precedingpoint )
                                         ( n = `points`            v = points )
                                         ( n = `succeedingPoint`   v = succeddingpoint )
                                         ( n = `displayedPoints`   v = displayedpoints )
                                         ( n = `selectionEnabled`  v = selectionenabled ) ) ).
  ENDMETHOD.

  METHOD interact_line_chart_point.
    result = _generic(
                 name   = `InteractiveLineChartPoint`
                 ns     = `mchart`
                 t_prop = VALUE #( ( n = `label`          v = label )
                                   ( n = `secondaryLabel` v = secondarylabel )
                                   ( n = `value`          v = value )
                                   ( n = `displayedValue` v = displayedvalue )
                                   ( n = `selected`       v = z2ui5_cl_util=>boolean_abap_2_json( selected ) ) ) ).
  ENDMETHOD.

  METHOD intermediary.
    result = _generic( name = `intermediary`
                       ns   = `commons` ).
  ENDMETHOD.

  METHOD interval_headers.
    result = _generic( `intervalHeaders` ).
  ENDMETHOD.

  METHOD item.
    result = me.
    _generic( name   = `Item`
              ns     = `core`
              t_prop = VALUE #( ( n = `key`  v = key )
                                ( n = `text` v = text ) ) ).
  ENDMETHOD.

  METHOD items.
    result = _generic( name = `items`
                       ns   = ns ).
  ENDMETHOD.

  METHOD label.
    result = me.
    _generic( name   = `Label`
              t_prop = VALUE #( ( n = `text`     v = text )
                                ( n = `displayOnly`   v = z2ui5_cl_util=>boolean_abap_2_json( displayonly ) )
                                ( n = `required`   v = z2ui5_cl_util=>boolean_abap_2_json( required ) )
                                ( n = `showColon`   v = z2ui5_cl_util=>boolean_abap_2_json( showcolon ) )
                                ( n = `textAlign`   v = textalign )
                                ( n = `textDirection`   v = textdirection )
                                ( n = `vAlign`   v = valign )
                                ( n = `width`   v = width )
                                ( n = `wrapping`   v = z2ui5_cl_util=>boolean_abap_2_json( wrapping ) )
                                ( n = `wrappingType`   v = wrappingtype )
                                ( n = `design`   v = design )
                                ( n = `id`   v = id )
                                ( n = `class`   v = class )
                                ( n = `labelFor` v = labelfor )
                                ( n = `visible`   v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD lanes.
    result = _generic( name = `lanes`
                       ns   = `commons` ).
  ENDMETHOD.

  METHOD layered_layout.
    result = _generic( name   = `LayeredLayout`
                       ns     = `nglayout`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `class`  v = class )
                                         ( n = `lineSpacingFactor`  v = linespacingfactor )
                                         ( n = `nodePlacement`  v = nodeplacement )
                                         ( n = `nodeSpacing`  v = nodespacing )
                                         ( n = `mergeEdges`  v = z2ui5_cl_util=>boolean_abap_2_json( mergeedges ) ) ) ).
  ENDMETHOD.

  METHOD layout_algorithm.
    result = _generic( name = `layoutAlgorithm`
                       ns   = `networkgraph` ).
  ENDMETHOD.

  METHOD layout_data.
    result = _generic( ns   = ns
                       name = `layoutData` ).
  ENDMETHOD.

  METHOD legend.

    result = _generic( name   = `Legend`
                       ns     = `vbm`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `caption`  v = caption )
                                         ( n = `items`  v = items ) ) ).

  ENDMETHOD.

  METHOD legenditem.

    result = _generic( name   = `LegendItem`
                       ns     = `vbm`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `text`  v = text )
                                         ( n = `color`  v = color ) ) ).

  ENDMETHOD.

  METHOD legend_area.

    result = _generic( name = `legend`
                       ns   = `vbm` ).

  ENDMETHOD.

  METHOD library_shape.
    result = _generic(
        name   = `LibraryShape`
        ns     = `si`
        t_prop = VALUE #( ( n = `id`       v = id )
                          ( n = `class`    v = class )
                          ( n = `animationOnChange`     v = z2ui5_cl_util=>boolean_abap_2_json( animationonchange ) )
                          ( n = `definition`     v = definition )
                          ( n = `fillColor`     v = fillcolor )
                          ( n = `fillingAngle`     v = fillingangle )
                          ( n = `fillingDirection`     v = fillingdirection )
                          ( n = `fillingType`     v = fillingtype )
                          ( n = `height`     v = height )
                          ( n = `horizontalAlignment`     v = horizontalalignment )
                          ( n = `shapeId`     v = shapeid )
                          ( n = `strokeColor`     v = strokecolor )
                          ( n = `strokeWidth`     v = strokewidth )
                          ( n = `verticalAlignment`     v = verticalalignment )
                          ( n = `width`     v = width )
                          ( n = `x`     v = x )
                          ( n = `y`     v = y )
                          ( n = `afterShapeLoaded`     v = aftershapeloaded )
                          ( n = `visible`     v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                         ) ).
  ENDMETHOD.

  METHOD light_box.
    result = _generic( name   = `LightBox`
                       t_prop = VALUE #( ( n = `id`         v = id )
                                         ( n = `class`    v = class )
                                         ( n = `visible`    v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD light_box_item.
    result = _generic( name   = `LightBoxItem`
                       t_prop = VALUE #( ( n = `alt`         v = alt )
                                         ( n = `imageSrc`    v = imagesrc )
                                         ( n = `subtitle`    v = subtitle )
                                         ( n = `title`       v = title ) ) ).
  ENDMETHOD.

  METHOD line.

    result = _generic( name   = `Line`
                       ns     = `networkgraph`
                       t_prop = VALUE #(
                           ( n = `id`  v = id )
                           ( n = `class`  v = class )
                           ( n = `arrowOrientation`  v = arroworientation )
                           ( n = `arrowPosition`         v = arrowposition )
                           ( n = `description`  v = description )
                           ( n = `from`             v = from )
                           ( n = `lineType`        v = linetype )
                           ( n = `status`         v = status )
                           ( n = `title`       v = title )
                           ( n = `to`        v = to )
                           ( n = `hover`        v = hover )
                           ( n = `press`        v = press )
                           ( n = `stretchToCenter`           v = z2ui5_cl_util=>boolean_abap_2_json( stretchtocenter ) )
                           ( n = `selected`           v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                           ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).

  ENDMETHOD.

  METHOD lines.
    result = _generic( name = `lines`
                       ns   = SWITCH #( ns WHEN '' THEN `networkgraph` ELSE ns ) ).
  ENDMETHOD.

  METHOD line_micro_chart.
    result = me.
    _generic(
        name   = `LineMicroChart`
        ns     = `mchart`
        t_prop = VALUE #( ( n = `color`  v = color )
                          ( n = `height`       v = height )
                          ( n = `leftBottomLabel`        v = leftbottomlabel )
                          ( n = `leftTopLabel`      v = lefttoplabel )
                          ( n = `maxXValue`      v = maxxvalue )
                          ( n = `minXValue`      v = minxvalue )
                          ( n = `minYValue`      v = minyvalue )
                          ( n = `rightBottomLabel`      v = rightbottomlabel )
                          ( n = `rightTopLabel`      v = righttoplabel )
                          ( n = `size`      v = size )
                          ( n = `threshold`      v = threshold )
                          ( n = `thresholdDisplayValue`      v = thresholddisplayvalue )
                          ( n = `width`      v = width )
                          ( n = `press`      v = press )
                          ( n = `hideOnNoData`    v = z2ui5_cl_util=>boolean_abap_2_json( hideonnodata ) )
                          ( n = `showBottomLabels`    v = z2ui5_cl_util=>boolean_abap_2_json( showbottomlabels ) )
                          ( n = `showPoints`    v = z2ui5_cl_util=>boolean_abap_2_json( showpoints ) )
                          ( n = `showThresholdLine`    v = z2ui5_cl_util=>boolean_abap_2_json( showthresholdline ) )
                          ( n = `showThresholdValue`    v = z2ui5_cl_util=>boolean_abap_2_json( showthresholdvalue ) )
                          ( n = `showTopLabels`    v = z2ui5_cl_util=>boolean_abap_2_json( showtoplabels ) )
                          ( n = `maxYValue`  v = maxyvalue ) ) ).
  ENDMETHOD.

  METHOD line_micro_chart_empszd_point.
    result = _generic( name   = `LineMicroChartEmphasizedPoint`
                       ns     = `mchart`
                       t_prop = VALUE #( ( n = `x`       v = x )
                                         ( n = `y`       v = y )
                                         ( n = `color`       v = color )
                                         ( n = `show`       v = z2ui5_cl_util=>boolean_abap_2_json( show ) )
                                       ) ).
  ENDMETHOD.

  METHOD line_micro_chart_line.
    result = _generic( name   = `LineMicroChartLine`
                       ns     = `mchart`
                       t_prop = VALUE #( ( n = `points`       v = points )
                                         ( n = `color`    v = color )
                                         ( n = `type`  v = type )
                                        ) ).
  ENDMETHOD.

  METHOD line_micro_chart_point.
    result = _generic( name   = `LineMicroChartPoint`
                       ns     = `mchart`
                       t_prop = VALUE #( ( n = `x`       v = x )
                                         ( n = `y`       v = y )
                                       ) ).
  ENDMETHOD.

  METHOD link.
    result = me.
    _generic( name   = `Link`
              ns     = ns
              t_prop = VALUE #( ( n = `text`    v = text )
                                ( n = `target`  v = target )
                                ( n = `href`    v = href )
                                ( n = `press`   v = press )
                                ( n = `id`      v = id )
                                ( n = `class`      v = class )
                                ( n = `accessibleRole`      v = accessiblerole )
                                ( n = `ariaHasPopup`      v = ariahaspopup )
                                ( n = `emptyIndicatorMode`      v = emptyindicatormode )
                                ( n = `rel`      v = rel )
                                ( n = `subtle`      v = z2ui5_cl_util=>boolean_abap_2_json( subtle ) )
                                ( n = `textAlign`      v = textalign )
                                ( n = `textDirection`      v = textdirection )
                                ( n = `validateUrl`      v = z2ui5_cl_util=>boolean_abap_2_json( validateurl ) )
                                ( n = `width`      v = width )
                                ( n = `wrapping`      v = z2ui5_cl_util=>boolean_abap_2_json( wrapping ) )
                                ( n = `emphasized`      v = z2ui5_cl_util=>boolean_abap_2_json( emphasized ) )
                                ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `endIcon` v = endicon )
                                ( n = `icon`    v = icon ) ) ).
  ENDMETHOD.

  METHOD link_tile_content.
    result = _generic( name   = `LinkTileContent`
                       t_prop = VALUE #( ( n = `iconSrc`  v = iconsrc )
                                         ( n = `linkHref`  v = linkhref )
                                         ( n = `linkText`  v = linktext )
                                         ( n = `linkPress`  v = linkpress ) ) ).
  ENDMETHOD.

  METHOD list.
    result = _generic(
                 name   = `List`
                 t_prop = VALUE #(
                     ( n = `headerText`             v = headertext )
                     ( n = `items`                  v = items )
                     ( n = `mode`                   v = mode )
                     ( n = `class`                   v = class )
                     ( n = `itemPress`                   v = itempress )
                     ( n = `select`                   v = select )
                     ( n = `selectionChange`        v = selectionchange )
                     ( n = `showSeparators`         v = showseparators )
                     ( n = `footerText`             v = footertext )
                     ( n = `growingDirection`       v = growingdirection )
                     ( n = `growingThreshold`       v = growingthreshold )
                     ( n = `growingTriggerText`     v = growingtriggertext )
                     ( n = `headerLevel`            v = headerlevel )
                     ( n = `multiSelectMode`        v = multiselectmode )
                     ( n = `noDataText`             v = nodatatext )
                     ( n = `id`                     v = id )
                     ( n = `sticky`                 v = sticky )
                     ( n = `delete`                 v = delete )
                     ( n = `backgroundDesign`                 v = backgrounddesign )
                     ( n = `modeAnimationOn`        v = z2ui5_cl_util=>boolean_abap_2_json( modeanimationon ) )
                     ( n = `growingScrollToLoad`    v = z2ui5_cl_util=>boolean_abap_2_json( growingscrolltoload ) )
                     ( n = `includeItemInSelection` v = z2ui5_cl_util=>boolean_abap_2_json( includeiteminselection ) )
                     ( n = `growing`                v = z2ui5_cl_util=>boolean_abap_2_json( growing ) )
                     ( n = `inset`                  v = z2ui5_cl_util=>boolean_abap_2_json( inset ) )
                     ( n = `rememberSelections`     v = z2ui5_cl_util=>boolean_abap_2_json( rememberselections ) )
                     ( n = `showUnread`             v = z2ui5_cl_util=>boolean_abap_2_json( showunread ) )
                     ( n = `visible`                v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                     ( n = `noData`                 v = nodata ) ) ).
  ENDMETHOD.

  METHOD list_item.
    result = me.
    _generic( name   = `ListItem`
              ns     = `core`
              t_prop = VALUE #( ( n = `text` v = text )
                                ( n = `icon` v = icon )
                                ( n = `key`  v = key )
                                ( n = `textDirection`  v = textdirection )
                                ( n = `enabled`        v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `additionalText` v = additionaltext ) ) ).
  ENDMETHOD.

  METHOD main_content.
    result = _generic( name = `mainContent`
                       ns   = `f` ).
  ENDMETHOD.

  METHOD main_contents.

    result = _generic( name = `mainContents`
                       ns   = `tnt` ).

  ENDMETHOD.

  METHOD map_container.

    result = _generic( name   = `MapContainer`
                       ns     = `vk`
                       t_prop = VALUE #(
                           ( n = `id`  v = id )
                           ( n = `autoAdjustHeight`  v = z2ui5_cl_util=>boolean_abap_2_json( autoadjustheight ) )
                           ( n = `showHome`  v = z2ui5_cl_util=>boolean_abap_2_json( showHome )  )  ) ).

  ENDMETHOD.

  METHOD markers.
    result = _generic( name = `markers`
                       ns   = ns ).
  ENDMETHOD.

  METHOD markers_as_status.
    result = _generic( name = `markersAsStatus`
                       ns   = `upload` ).
  ENDMETHOD.

  METHOD mask_input.
    result = me.
    _generic( name   = `MaskInput`
              t_prop = VALUE #(
                  ( n = `placeholder`           v = placeholder )
                  ( n = `mask`                  v = mask )
                  ( n = `name`                  v = name )
                  ( n = `textAlign`             v = textalign )
                  ( n = `textDirection`         v = textdirection )
                  ( n = `value`                 v = value )
                  ( n = `width`                 v = width )
                  ( n = `liveChange`            v = livechange )
                  ( n = `change`                v = change )
                  ( n = `valueState`            v = valuestate )
                  ( n = `valueStateText`        v = valuestatetext )
                  ( n = `placeholderSymbol`     v = placeholdersymbol )
                  ( n = `required`              v = z2ui5_cl_util=>boolean_abap_2_json( required ) )
                  ( n = `showClearIcon`         v = z2ui5_cl_util=>boolean_abap_2_json( showclearicon ) )
                  ( n = `showValueStateMessage` v = z2ui5_cl_util=>boolean_abap_2_json( showvaluestatemessage ) )
                  ( n = `visible`               v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                  ( n = `fieldWidth`            v = fieldwidth ) ) ).
  ENDMETHOD.

  METHOD mask_input_rule.
    result = _generic( name   = `MaskInputRule`
                       t_prop = VALUE #( ( n = `maskFormatSymbol` v = maskformatsymbol )
                                         ( n = `regex`            v = regex ) ) ).
  ENDMETHOD.

  METHOD master_pages.
    result = _generic( `masterPages` ).
  ENDMETHOD.

  METHOD menu_button.
    result = _generic( name   = `MenuButton`
                       t_prop = VALUE #( ( n = `buttonMode`    v = buttonmode )
                                         ( n = `defaultAction` v = defaultaction )
                                         ( n = `text`          v = text )
                                         ( n = `enabled`       v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                         ( n = `activeIcon`    v = activeicon )
                                         ( n = `type`          v = type ) ) ).
  ENDMETHOD.

  METHOD menu_item.
    result = me.
    _generic( name   = `MenuItem`
              t_prop = VALUE #( ( n = `press`   v = press )
                                ( n = `text`    v = text )
                                ( n = `icon`    v = icon ) ) ).
  ENDMETHOD.

  METHOD message_item.
    result = _generic(
        name   = `MessageItem`
        t_prop = VALUE #( ( n = `type`                v = type )
                          ( n = `title`               v = title )
                          ( n = `subtitle`            v = subtitle )
                          ( n = `description`         v = description )
                          ( n = `longtextUrl`         v = longtexturl )
                          ( n = `textDirection`       v = textdirection )
                          ( n = `groupName`           v = groupname )
                          ( n = `activeTitle`         v = z2ui5_cl_util=>boolean_abap_2_json( activetitle ) )
                          ( n = `counter`             v = counter )
                          ( n = `markupDescription`   v = z2ui5_cl_util=>boolean_abap_2_json( markupdescription ) ) ) ).
  ENDMETHOD.

  METHOD message_page.
    result = _generic(
                 name   = `MessagePage`
                 t_prop = VALUE #(
                     ( n = `showHeader`          v = z2ui5_cl_util=>boolean_abap_2_json( show_header ) )
                     ( n = `description`         v = description )
                     ( n = `icon`                v = icon )
                     ( n = `text`                v = text )
                     ( n = `enableFormattedText` v = z2ui5_cl_util=>boolean_abap_2_json( enableformattedtext ) ) ) ).
  ENDMETHOD.

  METHOD message_popover.
    result = _generic(
        name   = `MessagePopover`
        t_prop = VALUE #( ( n = `items`             v = items )
                          ( n = `activeTitlePress`  v = activetitlepress )
                          ( n = `placement`         v = placement )
                          ( n = `listSelect`        v = listselect )
                          ( n = `afterClose`        v = afterclose )
                          ( n = `beforeClose`       v = beforeclose )
                          ( n = `initiallyExpanded` v = z2ui5_cl_util=>boolean_abap_2_json( initiallyexpanded ) )
                          ( n = `groupItems`        v = z2ui5_cl_util=>boolean_abap_2_json( groupitems ) ) ) ).
  ENDMETHOD.

  METHOD message_strip.
    result = me.
    _generic(
        name   = `MessageStrip`
        t_prop = VALUE #( ( n = `text`     v = text )
                          ( n = `type`     v = type )
                          ( n = `showIcon` v = z2ui5_cl_util=>boolean_abap_2_json( showicon ) )
                          ( n = `customIcon`       v = customicon )
                          ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                          ( n = `showCloseButton`  v = z2ui5_cl_util=>boolean_abap_2_json( showclosebutton ) )
                          ( n = `class`    v = class )
                          ( n = `enableFormattedText`    v = z2ui5_cl_util=>boolean_abap_2_json( enableformattedtext ) ) ) ).
  ENDMETHOD.

  METHOD message_view.

    result = _generic( name   = `MessageView`
                       t_prop = VALUE #( ( n = `items`      v = items )
                                         ( n = `groupItems` v = z2ui5_cl_util=>boolean_abap_2_json( groupitems ) ) ) ).
  ENDMETHOD.

  METHOD micro_process_flow.
    result = _generic( name   = `MicroProcessFlow`
                       ns     = `commons`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `renderType`    v = rendertype )
                                         ( n = `width`    v = width )
                                         ( n = `ariaLabel`    v = arialabel )
                                      ) ).
  ENDMETHOD.

  METHOD micro_process_flow_item.
    result = _generic(
        name   = `MicroProcessFlowItem`
        ns     = `commons`
        t_prop = VALUE #( ( n = `id`       v = id )
                          ( n = `class`    v = class )
                          ( n = `press`    v = press )
                          ( n = `title`    v = title )
                          ( n = `stepWidth`    v = stepwidth )
                          ( n = `state`    v = state )
                          ( n = `key`    v = key )
                          ( n = `icon`    v = icon )
                          ( n = `showSeparator`    v = z2ui5_cl_util=>boolean_abap_2_json( showseparator ) )
                          ( n = `showIntermediary`    v = z2ui5_cl_util=>boolean_abap_2_json( showintermediary ) )
                       ) ).
  ENDMETHOD.

  METHOD mid_column_pages.

    result = _generic( name   = `midColumnPages`
                       ns     = `f`
                       t_prop = VALUE #( ( n = `id` v = id ) ) ).

  ENDMETHOD.

  METHOD multi_combobox.
    result = _generic(
        name   = `MultiComboBox`
        t_prop = VALUE #(
            (  n = `selectionChange`     v = selectionchange )
            (  n = `selectedKeys`        v = selectedkeys )
            (  n = `selectedItems`        v = selecteditems )
            (  n = `items`               v = items )
            (  n = `id`                  v = id )
            (  n = `class`               v = class )
            (  n = `selectionFinish`     v = selectionfinish )
            (  n = `width`               v = width )
            (  n = `showSecondaryValues` v = z2ui5_cl_util=>boolean_abap_2_json( showsecondaryvalues ) )
            (  n = `placeholder`         v = placeholder )
            (  n = `selectedItemId`         v = selecteditemid )
            (  n = `selectedKey`         v = selectedkey )
            (  n = `name`                v = name )
            (  n = `value`                v = value )
            (  n = `valueState`                v = valuestate )
            (  n = `valueStateText`                v = valuestatetext )
            (  n = `textAlign`                v = textalign )
            (  n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
            (  n = `showValueStateMessage`  v = z2ui5_cl_util=>boolean_abap_2_json( showvaluestatemessage ) )
            (  n = `showClearIcon`        v = z2ui5_cl_util=>boolean_abap_2_json( showclearicon ) )
            (  n = `showButton`            v = z2ui5_cl_util=>boolean_abap_2_json( showbutton ) )
            (  n = `required`            v = z2ui5_cl_util=>boolean_abap_2_json( required ) )
            (  n = `editable`            v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
            (  n = `enabled`             v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
            (  n = `filterSecondaryValues`             v = z2ui5_cl_util=>boolean_abap_2_json( filtersecondaryvalues ) )
            (  n = `showSelectAll`       v = showselectall ) ) ).
  ENDMETHOD.

  METHOD multi_input.
    result = _generic(
        name   = `MultiInput`
        t_prop = VALUE #( ( n = `tokens` v = tokens )
                          ( n = `showClearIcon` v = z2ui5_cl_util=>boolean_abap_2_json( showclearicon ) )
                          ( n = `name` v = name )
                          ( n = `showValueHelp` v = z2ui5_cl_util=>boolean_abap_2_json( showvaluehelp ) )
                          ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                          ( n = `suggestionItems` v = suggestionitems )
                          ( n = `tokenUpdate` v = tokenupdate )
                          ( n = `submit` v = submit )
                          ( n = `width` v = width )
                          ( n = `value` v = value )
                          ( n = `id` v = id )
                          ( n = `change` v = change )
                          ( n = `valueHelpRequest` v = valuehelprequest )
                          ( n = `class` v = class )
                          ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                          ( n = `required` v = required )
                          ( n = `valueState` v = valuestate )
                          ( n = `valueStateText` v = valuestatetext )
                          ( n = `placeholder` v = placeholder )
                          ( n = `showSuggestion` v = z2ui5_cl_util=>boolean_abap_2_json( showsuggestion ) ) ) ).
  ENDMETHOD.

  METHOD navigation_actions.
    result = _generic( name = `navigationActions`
                       ns   = `f` ).
  ENDMETHOD.

  METHOD nav_container.

    result = _generic( name   = `NavContainer`
                       t_prop = VALUE #( ( n = `initialPage`  v = initialpage )
                                         ( n = `id`           v = id )
                                         ( n = `height`           v = height )
                                         ( n = `width`           v = width )
                                         ( n = `autoFocus` v = z2ui5_cl_util=>boolean_abap_2_json( autofocus ) )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `defaultTransitionName`   v = defaulttransitionname ) ) ).

  ENDMETHOD.

  METHOD network_graph.
    result = _generic( name   = `Graph`
                       ns     = `networkgraph`
                       t_prop = VALUE #(
                           ( n = `id`  v = id )
                           ( n = `class`  v = class )
                           ( n = `layout`  v = layout )
                           ( n = `height`  v = height )
                           ( n = `width`  v = width )
                           ( n = `nodes`  v = nodes )
                           ( n = `lines`  v = lines )
                           ( n = `groups`  v = groups )
                           ( n = `backgroundColor`  v = backgroundcolor )
                           ( n = `backgroundImage`  v = backgroundimage )
                           ( n = `noDataText`  v = nodatatext )
                           ( n = `orientation`  v = orientation )
                           ( n = `renderType`  v = rendertype )
                           ( n = `afterLayouting`  v = afterlayouting )
                           ( n = `beforeLayouting`  v = beforelayouting )
                           ( n = `failure`  v = failure )
                           ( n = `graphReady`  v = graphready )
                           ( n = `search`  v = search )
                           ( n = `searchSuggest`  v = searchsuggest )
                           ( n = `selectionChange`  v = selectionchange )
                           ( n = `zoomChanged`  v = zoomchanged )
                           ( n = `enableWheelZoom`           v = z2ui5_cl_util=>boolean_abap_2_json( enablewheelzoom ) )
                           ( n = `enableZoom`           v = z2ui5_cl_util=>boolean_abap_2_json( enablezoom ) )
                           ( n = `noData`           v = z2ui5_cl_util=>boolean_abap_2_json( nodata ) )
                           ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).

  ENDMETHOD.

  METHOD node.
    result = _generic(
        name   = `Node`
        ns     = `networkgraph`
        t_prop = VALUE #(
            ( n = `id`  v = id )
            ( n = `class`  v = class )
            ( n = `altText`  v = alttext )
            ( n = `coreNodeSize`         v = corenodesize )
            ( n = `description`  v = description )
            ( n = `descriptionLineSize`  v = descriptionlinesize )
            ( n = `group`             v = group )
            ( n = `headerCheckBoxState`        v = headercheckboxstate )
            ( n = `height`         v = height )
            ( n = `icon`       v = icon )
            ( n = `iconSize`        v = iconsize )
            ( n = `iconSize` v = iconsize )
            ( n = `key` v = key )
            ( n = `maxWidth` v = maxwidth )
            ( n = `title` v = title )
            ( n = `shape` v = shape )
            ( n = `statusIcon` v = statusicon )
            ( n = `titleLineSize` v = titlelinesize )
            ( n = `width` v = width )
            ( n = `x` v = x )
            ( n = `y` v = y )
            ( n = `attributes` v = attributes )
            ( n = `actionButtons` v = actionbuttons )
            ( n = `collapseExpand` v = collapseexpand )
            ( n = `headerCheckBoxPress` v = headercheckboxpress )
            ( n = `hover` v = hover )
            ( n = `press` v = press )
            ( n = `collapsed`           v = z2ui5_cl_util=>boolean_abap_2_json( collapsed ) )
            ( n = `selected`           v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
            ( n = `showActionLinksButton`           v = z2ui5_cl_util=>boolean_abap_2_json( showactionlinksbutton ) )
            ( n = `showDetailButton`           v = z2ui5_cl_util=>boolean_abap_2_json( showdetailbutton ) )
            ( n = `showExpandButton`           v = z2ui5_cl_util=>boolean_abap_2_json( showexpandbutton ) )
            ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).

  ENDMETHOD.

  METHOD nodes.
    result = _generic( name = `nodes`
                       ns   = ns ).
  ENDMETHOD.

  METHOD node_image.
    result = _generic( name   = `NodeImage`
                       ns     = `networkgraph`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `class`  v = class )
                                         ( n = `height`  v = height )
                                         ( n = `width`  v = width )
                                         ( n = `src`  v = src ) ) ).
  ENDMETHOD.

  METHOD noop_layout.
    result = _generic( name = `NoopLayout`
                       ns   = `nglayout` ).
  ENDMETHOD.

  METHOD notification_list.
    result = _generic(
        name   = `NotificationList`
        t_prop = VALUE #(
            ( n = `id`  v = id )
            ( n = `class`  v = class )
            ( n = `footerText`  v = footertext )
            ( n = `growingDirection`  v = growingdirection )
            ( n = `growingThreshold`  v = growingthreshold )
            ( n = `growingTriggerText`  v = growingtriggertext )
            ( n = `headerLevel`  v = headerlevel )
            ( n = `headerText`  v = headertext )
            ( n = `keyboardMode`  v = keyboardmode )
            ( n = `mode`  v = mode )
            ( n = `multiSelectMode`  v = multiselectmode )
            ( n = `noDataText`  v = nodatatext )
            ( n = `sticky`  v = sticky )
            ( n = `swipeDirection`  v = swipedirection )
            ( n = `width`  v = width )
            ( n = `showSeparators`  v = showseparators )
            ( n = `beforeOpenContextMenu`  v = beforeopencontextmenu )
            ( n = `delete`  v = delete )
            ( n = `growingFinished`  v = growingfinished )
            ( n = `growingStarted`  v = growingstarted )
            ( n = `itemPress`  v = itempress )
            ( n = `select`  v = select )
            ( n = `selectionChange`  v = selectionchange )
            ( n = `swipe`  v = swipe )
            ( n = `updateFinished`  v = updatefinished )
            ( n = `updateStarted`  v = updatestarted )
            ( n = `growingScrollToLoad`           v = z2ui5_cl_util=>boolean_abap_2_json( growingscrolltoload ) )
            ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
            ( n = `growing`           v = z2ui5_cl_util=>boolean_abap_2_json( growing ) )
            ( n = `includeItemInSelection`           v = z2ui5_cl_util=>boolean_abap_2_json( includeiteminselection ) )
            ( n = `inset`           v = z2ui5_cl_util=>boolean_abap_2_json( inset ) )
            ( n = `modeAnimationOn`           v = z2ui5_cl_util=>boolean_abap_2_json( modeanimationon ) )
            ( n = `rememberSelections`           v = z2ui5_cl_util=>boolean_abap_2_json( rememberselections ) )
            ( n = `showNoData`           v = z2ui5_cl_util=>boolean_abap_2_json( shownodata ) )
            ( n = `showUnread`           v = z2ui5_cl_util=>boolean_abap_2_json( showunread ) ) ) ).
  ENDMETHOD.

  METHOD notification_list_group.
    result = _generic(
                 name   = `NotificationListGroup`
                 t_prop = VALUE #(
                     ( n = `id`  v = id )
                     ( n = `class`  v = class )
                     ( n = `highlight`  v = highlight )
                     ( n = `highlightText`  v = highlighttext )
                     ( n = `priority`  v = priority )
                     ( n = `title`  v = title )
                     ( n = `type`  v = type )
                     ( n = `onCollapse`  v = oncollapse )
                     ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                     ( n = `autoPriority`           v = z2ui5_cl_util=>boolean_abap_2_json( autopriority ) )
                     ( n = `collapsed`           v = z2ui5_cl_util=>boolean_abap_2_json( collapsed ) )
                     ( n = `enableCollapseButtonWhenEmpty`
                       v = z2ui5_cl_util=>boolean_abap_2_json( enablecollapsebuttonwhenempty ) )
                     ( n = `navigated`           v = z2ui5_cl_util=>boolean_abap_2_json( navigated ) )
                     ( n = `selected`           v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                     ( n = `showButtons`           v = z2ui5_cl_util=>boolean_abap_2_json( showbuttons ) )
                     ( n = `showCloseButton`           v = z2ui5_cl_util=>boolean_abap_2_json( showclosebutton ) )
                     ( n = `showEmptyGroup`           v = z2ui5_cl_util=>boolean_abap_2_json( showemptygroup ) )
                     ( n = `showItemsCounter`           v = z2ui5_cl_util=>boolean_abap_2_json( showitemscounter ) )
                     ( n = `unread`           v = z2ui5_cl_util=>boolean_abap_2_json( unread ) ) ) ).
  ENDMETHOD.

  METHOD notification_list_item.
    result = _generic(
                 name   = `NotificationListItem`
                 t_prop = VALUE #(
                     ( n = `id`  v = id )
                     ( n = `class`  v = class )
                     ( n = `authorAvatarColor`  v = authoravatarcolor )
                     ( n = `authorInitials`  v = authorinitials )
                     ( n = `description`  v = description )
                     ( n = `authorName`  v = authorname )
                     ( n = `authorPicture`  v = authorpicture )
                     ( n = `datetime`  v = datetime )
                     ( n = `counter`  v = counter )
                     ( n = `highlightText`  v = highlighttext )
                     ( n = `priority`  v = priority )
                     ( n = `title`  v = title )
                     ( n = `type`  v = type )
                     ( n = `close`  v = close )
                     ( n = `detailPress`  v = detailpress )
                     ( n = `press`  v = press )
                     ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                     ( n = `hideShowMoreButton`           v = z2ui5_cl_util=>boolean_abap_2_json( hideshowmorebutton ) )
                     ( n = `truncate`           v = z2ui5_cl_util=>boolean_abap_2_json( truncate ) )
                     ( n = `highlight`           v = z2ui5_cl_util=>boolean_abap_2_json( highlight ) )
                     ( n = `navigated`           v = z2ui5_cl_util=>boolean_abap_2_json( navigated ) )
                     ( n = `selected`           v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                     ( n = `showButtons`           v = z2ui5_cl_util=>boolean_abap_2_json( showbuttons ) )
                     ( n = `showCloseButton`           v = z2ui5_cl_util=>boolean_abap_2_json( showclosebutton ) )
                     ( n = `truncate`           v = z2ui5_cl_util=>boolean_abap_2_json( truncate ) )
                     ( n = `unread`           v = z2ui5_cl_util=>boolean_abap_2_json( unread ) ) ) ).
  ENDMETHOD.

  METHOD no_data.
    result = _generic( name = `noData`
                       ns   = ns ).
  ENDMETHOD.

  METHOD numeric_content.

    result = _generic(
        name   = `NumericContent`
        t_prop = VALUE #( ( n = `value`      v = value )
                          ( n = `icon`       v = icon )
                          ( n = `width`       v = width )
                          ( n = `valueColor`       v = valuecolor )
                          ( n = `truncateValueTo`       v = truncatevalueto )
                          ( n = `state`       v = state )
                          ( n = `scale`       v = scale )
                          ( n = `indicator`       v = indicator )
                          ( n = `iconDescription`       v = icondescription )
                          ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                          ( n = `nullifyValue` v = z2ui5_cl_util=>boolean_abap_2_json( nullifyvalue ) )
                          ( n = `formatterValue` v = z2ui5_cl_util=>boolean_abap_2_json( formattervalue ) )
                          ( n = `animateTextChange` v = z2ui5_cl_util=>boolean_abap_2_json( animatetextchange ) )
                          ( n = `adaptiveFontSize` v = z2ui5_cl_util=>boolean_abap_2_json( adaptivefontsize ) )
                          ( n = `withMargin` v = z2ui5_cl_util=>boolean_abap_2_json( withmargin ) )
                          ( n = `class`      v = class )
                          ( n = `press`      v = press ) ) ).

  ENDMETHOD.

  METHOD numeric_header.

    result = _generic( name   = `NumericHeader`
                       ns     = `f`
                       t_prop = VALUE #(
                           ( n = `id`  v = id )
                           ( n = `class`  v = class )
                           ( n = `datatimestamp`  v = datatimestamp )
                           ( n = `press`  v = press )
                           ( n = `details`  v = details )
                           ( n = `detailsMaxLines`  v = detailsmaxlines )
                           ( n = `detailsState`  v = detailsstate )
                           ( n = `iconAlt`  v = iconalt )
                           ( n = `iconBackgroundColor`  v = iconbackgroundcolor )
                           ( n = `iconDisplayShape`  v = icondisplayshape )
                           ( n = `iconSize`  v = iconsize )
                           ( n = `iconSrc`  v = iconsrc )
                           ( n = `iconInitials`  v = iconinitials )
                           ( n = `number`  v = number )
                           ( n = `numberSize`  v = numbersize )
                           ( n = `scale`  v = scale )
                           ( n = `sideIndicatorsAlignment`  v = sideindicatorsalignment )
                           ( n = `state`  v = state )
                           ( n = `statusText`  v = statustext )
                           ( n = `subtitle`  v = subtitle )
                           ( n = `subtitleMaxLines`  v = subtitlemaxlines )
                           ( n = `title`  v = title )
                           ( n = `titleMaxLines`  v = titlemaxlines )
                           ( n = `trend`  v = trend )
                           ( n = `unitOfMeasurement`  v = unitofmeasurement )
                           ( n = `statusVisible`           v = z2ui5_cl_util=>boolean_abap_2_json( statusvisible ) )
                           ( n = `numberVisible`           v = z2ui5_cl_util=>boolean_abap_2_json( numbervisible ) )
                           ( n = `iconVisible`           v = z2ui5_cl_util=>boolean_abap_2_json( iconvisible ) )
                           ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD numeric_side_indicator.
    result = _generic( name   = `NumericSideIndicator`
                       ns     = `f`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `class`  v = class )
                                         ( n = `unit`  v = unit )
                                         ( n = `title`  v = title )
                                         ( n = `state`  v = state )
                                         ( n = `number`  v = number )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD object_attribute.
    result = me.

    _generic( name   = `ObjectAttribute`
              t_prop = VALUE #( ( n = `title`          v = title )
                                ( n = `textDirection`  v = textdirection )
                                ( n = `ariaHasPopup`   v = ariahaspopup )
                                ( n = `press`          v = press )
                                ( n = `active`         v = z2ui5_cl_util=>boolean_abap_2_json( active ) )
                                ( n = `visible`        v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                ( n = `text`           v = text ) ) ).
  ENDMETHOD.

  METHOD object_header.

    result = _generic(
        name   = `ObjectHeader`
        t_prop = VALUE #( ( n = `backgrounddesign`     v = backgrounddesign )
                          ( n = `condensed`            v = z2ui5_cl_util=>boolean_abap_2_json( condensed ) )
                          ( n = `fullscreenoptimized`  v = z2ui5_cl_util=>boolean_abap_2_json( fullscreenoptimized ) )
                          ( n = `icon`                 v = icon )
                          ( n = `iconactive`           v = z2ui5_cl_util=>boolean_abap_2_json( iconactive ) )
                          ( n = `iconalt`              v = iconalt )
                          ( n = `icondensityaware`     v = z2ui5_cl_util=>boolean_abap_2_json( icondensityaware ) )
                          ( n = `icontooltip`          v = icontooltip )
                          ( n = `imageShape`           v = imageshape )
                          ( n = `intro`                v = intro )
                          ( n = `introactive`          v = z2ui5_cl_util=>boolean_abap_2_json( introactive ) )
                          ( n = `introhref`            v = introhref )
                          ( n = `introtarget`          v = introtarget )
                          ( n = `introtextdirection`   v = introtextdirection )
                          ( n = `number`               v = number )
                          ( n = `numberstate`          v = numberstate )
                          ( n = `numbertextdirection`  v = numbertextdirection )
                          ( n = `numberunit`           v = numberunit )
                          ( n = `responsive`           v = z2ui5_cl_util=>boolean_abap_2_json( responsive ) )
                          ( n = `showtitleselector`    v = z2ui5_cl_util=>boolean_abap_2_json( showtitleselector ) )
                          ( n = `title`                v = title )
                          ( n = `titleactive`          v = z2ui5_cl_util=>boolean_abap_2_json( titleactive ) )
                          ( n = `titlehref`            v = titlehref )
                          ( n = `titlelevel`           v = titlelevel )
                          ( n = `titleselectortooltip` v = titleselectortooltip )
                          ( n = `titletarget`          v = titletarget )
                          ( n = `titletextdirection`   v = titletextdirection )
                          ( n = `iconpress`            v = iconpress )
                          ( n = `intropress`           v = intropress )
                          ( n = `titlepress`           v = titlepress )
                          ( n = `titleselectorpress`   v = titleselectorpress )
                          ( n = `class`                v = class ) ) ).
  ENDMETHOD.

  METHOD object_identifier.
    result = _generic( name   = `ObjectIdentifier`
                       t_prop = VALUE #( ( n = `emptyIndicatorMode` v = emptyindicatormode )
                                         ( n = `text` v = text )
                                         ( n = `textDirection` v = textdirection )
                                         ( n = `title` v = title )
                                         ( n = `titleActive` v = titleactive )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `titlePress` v = titlepress ) ) ).
  ENDMETHOD.

  METHOD object_list_item.
    result = _generic(
        name   = `ObjectListItem`
        t_prop = VALUE #( ( n = `activeIcon`          v = activeicon )
                          ( n = `icon`                v = icon )
                          ( n = `intro`               v = intro )
                          ( n = `introTextDirection`  v = introtextdirection )
                          ( n = `number`              v = number )
                          ( n = `numberState`         v = numberstate )
                          ( n = `numberTextDirection` v = numbertextdirection )
                          ( n = `numberUnit`          v = numberunit )
                          ( n = `title`               v = title )
                          ( n = `titleTextDirection`  v = titletextdirection )
                          ( n = `iconDensityAware`    v = z2ui5_cl_util=>boolean_abap_2_json( icondensityaware ) )
                          ( n = `press`               v = press )
                          ( n = `selected`            v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                          ( n = `type`                v = type ) ) ).
  ENDMETHOD.

  METHOD object_marker.
    result = _generic( name   = `ObjectMarker`
                       t_prop = VALUE #( ( n = `additionalInfo` v = additionalinfo )
                                         ( n = `type`           v = type )
                                         ( n = `visible`        v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `press`          v = press )
                                         ( n = `visibility`     v = visibility ) ) ).
  ENDMETHOD.

  METHOD object_number.
    result = me.
    _generic( name   = `ObjectNumber`
              t_prop = VALUE #( ( n = `emphasized`         v = z2ui5_cl_util=>boolean_abap_2_json( emphasized ) )
                                ( n = `number`             v = number )
                                ( n = `state`              v = state )
                                ( n = `id`          v = id )
                                ( n = `class`          v = class )
                                ( n = `textAlign`          v = textalign )
                                ( n = `textDirection`      v = textdirection )
                                ( n = `emptyIndicatorMode` v = emptyindicatormode )
                                ( n = `numberunit`         v = numberunit )
                                ( n = `active`             v = z2ui5_cl_util=>boolean_abap_2_json( active ) )
                                ( n = `inverted`           v = z2ui5_cl_util=>boolean_abap_2_json( inverted ) )
                                ( n = `visible`            v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                ( n = `unit`               v = unit ) ) ).
  ENDMETHOD.

  METHOD object_page_dyn_header_title.
    result = _generic( name = `ObjectPageDynamicHeaderTitle`
                       ns   = `uxap` ).
  ENDMETHOD.

  METHOD object_page_header.
    result = me.
    _generic(
        name   = `ObjectPageHeader`
        ns     = `uxap`
        t_prop = VALUE #(
            ( n = `isActionAreaAlwaysVisible`  v = z2ui5_cl_util=>boolean_abap_2_json( isactionareaalwaysvisible ) )
            ( n = `isObjectIconAlwaysVisible`       v = z2ui5_cl_util=>boolean_abap_2_json( isobjecticonalwaysvisible ) )
            ( n = `isObjectSubtitleAlwaysVisible`
              v = z2ui5_cl_util=>boolean_abap_2_json( isobjectsubtitlealwaysvisible ) )
            ( n = `isObjectTitleAlwaysVisible`       v = z2ui5_cl_util=>boolean_abap_2_json( isobjecttitlealwaysvisible ) )
            ( n = `markChanges`       v = z2ui5_cl_util=>boolean_abap_2_json( markchanges ) )
            ( n = `markFavorite`       v = z2ui5_cl_util=>boolean_abap_2_json( markfavorite ) )
            ( n = `markFlagged`       v = z2ui5_cl_util=>boolean_abap_2_json( markflagged ) )
            ( n = `markLocked`       v = z2ui5_cl_util=>boolean_abap_2_json( marklocked ) )
            ( n = `objectImageDensityAware`       v = z2ui5_cl_util=>boolean_abap_2_json( objectimagedensityaware ) )
            ( n = `showMarkers`       v = z2ui5_cl_util=>boolean_abap_2_json( showmarkers ) )
            ( n = `showPlaceholder`       v = z2ui5_cl_util=>boolean_abap_2_json( showplaceholder ) )
            ( n = `showTitleSelector`       v = z2ui5_cl_util=>boolean_abap_2_json( showtitleselector ) )
            ( n = `visible`       v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
            ( n = `objectImageAlt`        v = objectimagealt )
            ( n = `objectImageBackgroundColor`      v = objectimagebackgroundcolor )
            ( n = `objectImageURI`      v = objectimageuri )
            ( n = `objectSubtitle`      v = objectsubtitle )
            ( n = `objectTitle`      v = objecttitle )
            ( n = `markChangesPress`      v = markchangespress )
            ( n = `markLockedPress`      v = marklockedpress )
            ( n = `titleSelectorPress`      v = titleselectorpress )
            ( n = `objectImageShape`  v = objectimageshape ) ) ).
  ENDMETHOD.

  METHOD object_page_header_action_btn.
    result = me.
    _generic( name   = `ObjectPageHeaderActionButton`
              ns     = `uxap`
              t_prop = VALUE #( ( n = `activeIcon`  v = activeicon )
                                ( n = `ariaHasPopup`       v = ariahaspopup )
                                ( n = `icon`        v = icon )
                                ( n = `importance`      v = importance )
                                ( n = `text`      v = text )
                                ( n = `textDirection`      v = textdirection )
                                ( n = `type`      v = type )
                                ( n = `width`      v = width )
                                ( n = `enabled`    v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `hideIcon`    v = z2ui5_cl_util=>boolean_abap_2_json( hideicon ) )
                                ( n = `hideText`    v = z2ui5_cl_util=>boolean_abap_2_json( hidetext ) )
                                ( n = `iconDensityAware`    v = z2ui5_cl_util=>boolean_abap_2_json( icondensityaware ) )
                                ( n = `iconFirst`    v = z2ui5_cl_util=>boolean_abap_2_json( iconfirst ) )
                                ( n = `visible`    v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                ( n = `press`  v = press ) ) ).
  ENDMETHOD.

  METHOD object_page_layout.
    result = _generic(
        name   = `ObjectPageLayout`
        ns     = `uxap`
        t_prop = VALUE #(
            ( n = `showTitleInHeaderContent` v = z2ui5_cl_util=>boolean_abap_2_json( showtitleinheadercontent ) )
            ( n = `showEditHeaderButton`     v = z2ui5_cl_util=>boolean_abap_2_json( showeditheaderbutton ) )
            ( n = `alwaysShowContentHeader`     v = z2ui5_cl_util=>boolean_abap_2_json( alwaysshowcontentheader ) )
            ( n = `enableLazyLoading`     v = z2ui5_cl_util=>boolean_abap_2_json( enablelazyloading ) )
            ( n = `flexEnabled`     v = z2ui5_cl_util=>boolean_abap_2_json( flexenabled ) )
            ( n = `headerContentPinnable`     v = z2ui5_cl_util=>boolean_abap_2_json( headercontentpinnable ) )
            ( n = `headerContentPinned`     v = z2ui5_cl_util=>boolean_abap_2_json( headercontentpinned ) )
            ( n = `isChildPage`     v = z2ui5_cl_util=>boolean_abap_2_json( ischildpage ) )
            ( n = `preserveHeaderStateOnScroll`     v = z2ui5_cl_util=>boolean_abap_2_json( preserveheaderstateonscroll ) )
            ( n = `showAnchorBar`     v = z2ui5_cl_util=>boolean_abap_2_json( showanchorbar ) )
            ( n = `showAnchorBarPopover`     v = z2ui5_cl_util=>boolean_abap_2_json( showanchorbarpopover ) )
            ( n = `showHeaderContent`     v = z2ui5_cl_util=>boolean_abap_2_json( showheadercontent ) )
            ( n = `showOnlyHighImportance`     v = z2ui5_cl_util=>boolean_abap_2_json( showonlyhighimportance ) )
            ( n = `subSectionLayout`     v = subsectionlayout )
            ( n = `toggleHeaderOnTitleClick`     v = z2ui5_cl_util=>boolean_abap_2_json( toggleheaderontitleclick ) )
            ( n = `useIconTabBar`     v = z2ui5_cl_util=>boolean_abap_2_json( useicontabbar ) )
            ( n = `useTwoColumnsForLargeScreen`     v = z2ui5_cl_util=>boolean_abap_2_json( usetwocolumnsforlargescreen ) )
            ( n = `visible`     v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
            ( n = `backgroundDesignAnchorBar`    v = backgrounddesignanchorbar )
            ( n = `height`                     v = height )
            ( n = `sectionTitleLevel`                     v = sectiontitlelevel )
            ( n = `editHeaderButtonPress`    v = editheaderbuttonpress )
            ( n = `upperCaseAnchorBar`       v = z2ui5_cl_util=>boolean_abap_2_json( uppercaseanchorbar ) )
            ( n = `beforeNavigate`       v = beforenavigate )
            ( n = `headerContentPinnedStateChange`       v = headercontentpinnedstatechange )
            ( n = `navigate`       v = navigate )
            ( n = `sectionChange`       v = sectionchange )
            ( n = `subSectionVisibilityChange`       v = subsectionvisibilitychange )
            ( n = `toggleAnchorBar`       v = toggleanchorbar )
            ( n = `showFooter`               v = z2ui5_cl_util=>boolean_abap_2_json( showfooter ) )
            ( n = `class`                  v = class ) ) ).
  ENDMETHOD.

  METHOD object_page_section.
    result = _generic(
                 name   = `ObjectPageSection`
                 ns     = `uxap`
                 t_prop = VALUE #( ( n = `titleUppercase`  v = z2ui5_cl_util=>boolean_abap_2_json( titleuppercase ) )
                                   ( n = `title`           v = title )
                                   ( n = `id`              v = id )
                                   ( n = `anchorBarButtonColor`              v = anchorbarbuttoncolor )
                                   ( n = `titleLevel`      v = titlelevel )
                                   ( n = `titleVisible`       v = z2ui5_cl_util=>boolean_abap_2_json( titlevisible ) )
                                   ( n = `showTitle`       v = z2ui5_cl_util=>boolean_abap_2_json( showtitle ) )
                                   ( n = `visible`       v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                   ( n = `wrapTitle`       v = z2ui5_cl_util=>boolean_abap_2_json( wraptitle ) )
                                   ( n = `importance`      v = importance ) ) ).
  ENDMETHOD.

  METHOD object_page_sub_section.
    result = _generic(
                 name   = `ObjectPageSubSection`
                 ns     = `uxap`
                 t_prop = VALUE #( ( n = `id`    v = id )
                                   ( n = `mode`    v = mode )
                                   ( n = `importance`    v = importance )
                                   ( n = `titleLevel`    v = titlelevel )
                                   ( n = `titleVisible`    v = z2ui5_cl_util=>boolean_abap_2_json( titlevisible ) )
                                   ( n = `showTitle`    v = z2ui5_cl_util=>boolean_abap_2_json( showtitle ) )
                                   ( n = `titleUppercase`    v = z2ui5_cl_util=>boolean_abap_2_json( titleuppercase ) )
                                   ( n = `visible`    v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                   ( n = `title` v = title ) ) ).
  ENDMETHOD.

  METHOD object_status.
    result = _generic(
        name   = `ObjectStatus`
        t_prop = VALUE #( ( n = `active`                v = z2ui5_cl_util=>boolean_abap_2_json( active ) )
                          ( n = `emptyIndicatorMode`    v = emptyindicatormode )
                          ( n = `icon`                  v = icon )
                          ( n = `iconDensityAware`      v = z2ui5_cl_util=>boolean_abap_2_json( icondensityaware ) )
                          ( n = `inverted`              v = z2ui5_cl_util=>boolean_abap_2_json( inverted ) )
                          ( n = `state`                 v = state )
                          ( n = `stateAnnouncementText` v = stateannouncementtext )
                          ( n = `text`                  v = text )
                          ( n = `id`                  v = id )
                          ( n = `class`                  v = class )
                          ( n = `textDirection`         v = textdirection )
                          ( n = `title`                 v = title )
                          ( n = `visible`               v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                          ( n = `press`                 v = press ) ) ).
  ENDMETHOD.

  METHOD overflow_toolbar.
    result = _generic( name   = `OverflowToolbar`
                       t_prop = VALUE #( ( n = `press`   v = press )
                                         ( n = `text`    v = text )
                                         ( n = `active` v = z2ui5_cl_util=>boolean_abap_2_json( active ) )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `asyncMode` v = z2ui5_cl_util=>boolean_abap_2_json( asyncmode ) )
                                         ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                         ( n = `design`    v = design )
                                         ( n = `type`    v = type )
                                         ( n = `style`    v = style )
                                         ( n = `id`    v = id )
                                         ( n = `class`    v = class )
                                         ( n = `width`    v = width )
                                         ( n = `height` v = height ) ) ).
  ENDMETHOD.

  METHOD overflow_toolbar_button.
    result = me.
    _generic( name   = `OverflowToolbarButton`
              t_prop = VALUE #( ( n = `id`      v = id )
                                ( n = `press`   v = press )
                                ( n = `text`    v = text )
                                ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `icon`    v = icon )
                                ( n = `type`    v = type )
                                ( n = `tooltip` v = tooltip ) ) ).
  ENDMETHOD.

  METHOD overflow_toolbar_menu_button.
    result = _generic( name   = `OverflowToolbarMenuButton`
                       t_prop = VALUE #( ( n = `buttonMode` v = buttonmode )
                                         ( n = `defaultAction` v = defaultaction )
                                         ( n = `text`    v = text )
                                         ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                         ( n = `icon`    v = icon )
                                         ( n = `type`    v = type )
                                         ( n = `tooltip` v = tooltip ) ) ).
  ENDMETHOD.

  METHOD overflow_toolbar_toggle_button.
    result = me.
    _generic( name   = `OverflowToolbarToggleButton`
              t_prop = VALUE #( ( n = `press`   v = press )
                                ( n = `text`    v = text )
                                ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `icon`    v = icon )
                                ( n = `type`    v = type )
                                ( n = `tooltip` v = tooltip ) ) ).
  ENDMETHOD.

  METHOD page.
    result = _generic(
                 name   = `Page`
                 ns     = ns
                 t_prop = VALUE #( ( n = `title` v = title )
                                   ( n = `showNavButton`  v = z2ui5_cl_util=>boolean_abap_2_json( shownavbutton ) )
                                   ( n = `navButtonPress` v = navbuttonpress )
                                   ( n = `showHeader` v = z2ui5_cl_util=>boolean_abap_2_json( showheader ) )
                                   ( n = `class` v = class )
                                   ( n = `backgroundDesign` v = backgrounddesign )
                                   ( n = `navButtonTooltip` v = navbuttontooltip )
                                   ( n = `titleAlignment` v = titlealignment )
                                   ( n = `titleLevel` v = titlelevel )
                                   ( n = `contentOnlyBusy` v = z2ui5_cl_util=>boolean_abap_2_json( contentonlybusy ) )
                                   ( n = `enableScrolling` v = z2ui5_cl_util=>boolean_abap_2_json( enablescrolling ) )
                                   ( n = `floatingFooter` v = z2ui5_cl_util=>boolean_abap_2_json( floatingfooter ) )
                                   ( n = `showFooter` v = z2ui5_cl_util=>boolean_abap_2_json( showfooter ) )
                                   ( n = `showSubHeader` v = z2ui5_cl_util=>boolean_abap_2_json( showsubheader ) )
                                   ( n = `id` v = id ) ) ).
  ENDMETHOD.

  METHOD pages.
    result = _generic( `pages` ).

  ENDMETHOD.

  METHOD paging_button.
    result = me.
    _generic( name   = `PagingButton`
              t_prop = VALUE #( ( n = `count`  v = count )
                                ( n = `nextButtonTooltip`    v = nextbuttontooltip )
                                ( n = `position`    v = position )
                                ( n = `previousButtonTooltip`  v = previousbuttontooltip ) ) ).
  ENDMETHOD.

  METHOD panel.

    result = _generic(
                 name   = `Panel`
                 t_prop = VALUE #( ( n = `expandable` v = z2ui5_cl_util=>boolean_abap_2_json( expandable ) )
                                   ( n = `expanded`   v = z2ui5_cl_util=>boolean_abap_2_json( expanded ) )
                                   ( n = `stickyHeader`   v = z2ui5_cl_util=>boolean_abap_2_json( stickyheader ) )
                                   ( n = `expandAnimation`   v = z2ui5_cl_util=>boolean_abap_2_json( expandanimation ) )
                                   ( n = `visible`   v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                   ( n = `height`   v = height )
                                   ( n = `backgroundDesign`   v = backgrounddesign )
                                   ( n = `width`   v = width )
                                   ( n = `id`   v = id )
                                   ( n = `class`   v = class )
                                   ( n = `expand`   v = expand )
                                   ( n = `headerText` v = headertext )
                                 ) ).

  ENDMETHOD.

  METHOD pane_container.
    result = _generic( name   = `PaneContainer`
                       ns     = `layout`
                       t_prop = VALUE #( ( n = `resize`       v = resize )
                                         ( n = `orientation`  v = orientation ) ) ).
  ENDMETHOD.

  METHOD planning_calendar.
    result = _generic(
        name   = `PlanningCalendar`
        t_prop = VALUE #(
            ( n = `rows`                      v = rows )
            ( n = `startDate`                 v = startdate )
            ( n = `id`                 v = id )
            ( n = `class`                 v = class )
            ( n = `appointmentHeight` v = appointmentheight )
            ( n = `appointmentRoundWidth` v = appointmentroundwidth )
            ( n = `builtInViews` v = builtinviews )
            ( n = `calendarWeekNumbering` v = calendarweeknumbering )
            ( n = `firstDayOfWeek` v = firstdayofweek )
            ( n = `groupAppointmentsMode` v = groupappointmentsmode )
            ( n = `height` v = height )
            ( n = `iconShape` v = iconshape )
            ( n = `maxDate` v = maxdate )
            ( n = `minDate` v = mindate )
            ( n = `noDataText` v = nodatatext )
            ( n = `primaryCalendarType` v = primarycalendartype )
            ( n = `secondaryCalendarType` v = secondarycalendartype )
            ( n = `appointmentsVisualization` v = appointmentsvisualization )
            ( n = `appointmentSelect`         v = appointmentselect )
            ( n = `intervalSelect`         v = intervalselect )
            ( n = `rowHeaderPress`         v = rowheaderpress )
            ( n = `rowSelectionChange`         v = rowselectionchange )
            ( n = `startDateChange`         v = startdatechange )
            ( n = `viewChange`         v = viewchange )
            ( n = `stickyHeader`         v = stickyheader )
            ( n = `viewKey`         v = viewkey )
            ( n = `width`         v = width )
            ( n = `singleSelection`  v = z2ui5_cl_util=>boolean_abap_2_json( singleselection ) )
            ( n = `showRowHeaders`  v = z2ui5_cl_util=>boolean_abap_2_json( showrowheaders ) )
            ( n = `multipleAppointmentsSelection`  v = z2ui5_cl_util=>boolean_abap_2_json( multipleappointmentsselection ) )
            ( n = `showIntervalHeaders`  v = z2ui5_cl_util=>boolean_abap_2_json( showintervalheaders ) )
            ( n = `showEmptyIntervalHeaders`  v = z2ui5_cl_util=>boolean_abap_2_json( showemptyintervalheaders ) )
            ( n = `showWeekNumbers`           v = z2ui5_cl_util=>boolean_abap_2_json( showweeknumbers ) )
            ( n = `legend`                    v = legend )
            ( n = `showDayNamesLine`          v = z2ui5_cl_util=>boolean_abap_2_json( showdaynamesline ) ) ) ).
  ENDMETHOD.

  METHOD planning_calendar_legend.
    result = _generic(
                 name   = `PlanningCalendarLegend`
                 t_prop = VALUE #( ( n = `id`                              v = id )
                                   ( n = `items`                           v = items )
                                   ( n = `appointmentItems`                v = appointmentitems )
                                   ( n = `columnWidth`                v = columnwidth )
                                   ( n = `visible`                v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                   ( n = `standardItems`                   v = standarditems ) ) ).

  ENDMETHOD.

  METHOD planning_calendar_row.
    result = _generic(
        name   = `PlanningCalendarRow`
        t_prop = VALUE #(
            ( n = `appointments`                    v = appointments )
            ( n = `intervalHeaders`                 v = intervalheaders )
            ( n = `id`                            v = id )
            ( n = `class`                            v = class )
            ( n = `icon`                            v = icon )
            ( n = `title`                           v = title )
            ( n = `key`                             v = key )
            ( n = `noAppointmentsText`                             v = noappointmentstext )
            ( n = `nonWorkingHours`                             v = nonworkinghours )
            ( n = `rowHeaderDescription`                             v = rowheaderdescription )
            ( n = `nonworkingdays`                             v = nonworkingdays )
            ( n = `enableAppointmentsCreate`        v = z2ui5_cl_util=>boolean_abap_2_json( enableappointmentscreate ) )
            ( n = `appointmentResize`               v = appointmentresize )
            ( n = `appointmentDrop`                 v = appointmentdrop )
            ( n = `appointmentDragEnter`            v = appointmentdragenter )
            ( n = `appointmentCreate`               v = appointmentcreate )
            ( n = `selected`                        v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
            ( n = `nonWorkingDays`                  v = nonworkingdays )
            ( n = `enableAppointmentsResize`        v = z2ui5_cl_util=>boolean_abap_2_json( enableappointmentsresize ) )
            ( n = `enableAppointmentsDragAndDrop`
              v = z2ui5_cl_util=>boolean_abap_2_json( enableappointmentsdraganddrop ) )
            ( n = `text`                            v = text )
                        ) ).

  ENDMETHOD.

  METHOD planning_calendar_view.
    result = _generic(
        name   = `PlanningCalendarView`
        t_prop = VALUE #( ( n = `appointmentHeight`                      v = appointmentheight )
                          ( n = `description`                 v = description )
                          ( n = `intervalLabelFormatter`                 v = intervallabelformatter )
                          ( n = `intervalSize`  v = intervalsize )
                          ( n = `intervalsL`  v = intervalsl )
                          ( n = `intervalsM`  v = intervalsm )
                          ( n = `intervalsS`  v = intervalss )
                          ( n = `intervalType`  v = intervaltype )
                          ( n = `key`  v = key )
                          ( n = `relative`  v = z2ui5_cl_util=>boolean_abap_2_json( relative ) )
                          ( n = `showSubIntervals`  v = z2ui5_cl_util=>boolean_abap_2_json( showsubintervals ) )
                        ) ).
  ENDMETHOD.

  METHOD points.
    result = _generic( name = `points`
                       ns   = `mchart` ).
  ENDMETHOD.

  METHOD popover.
    result = _generic(
        name   = `Popover`
        t_prop = VALUE #( ( n = `id`         v = id )
                          ( n = `title`         v = title )
                          ( n = `class`         v = class )
                          ( n = `placement`     v = placement )
                          ( n = `initialFocus`  v = initialfocus )
                          ( n = `contentHeight` v = contentheight )
                          ( n = `showHeader`    v = z2ui5_cl_util=>boolean_abap_2_json( showheader ) )
                          ( n = `showArrow`    v = z2ui5_cl_util=>boolean_abap_2_json( showarrow ) )
                          ( n = `resizable`    v = z2ui5_cl_util=>boolean_abap_2_json( resizable ) )
                          ( n = `modal`    v = z2ui5_cl_util=>boolean_abap_2_json( modal ) )
                          ( n = `horizontalScrolling`    v = z2ui5_cl_util=>boolean_abap_2_json( horizontalscrolling ) )
                          ( n = `verticalScrolling`    v = z2ui5_cl_util=>boolean_abap_2_json( verticalscrolling ) )
                          ( n = `visible`    v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                          ( n = `offsetX`    v = offsetx )
                          ( n = `offsetY`    v = offsety )
                          ( n = `contentMinWidth`    v = contentminwidth )
                          ( n = `titleAlignment`    v = titlealignment )
                          ( n = `contentWidth`  v = contentwidth )
                          ( n = `afterClose`  v = afterclose )
                          ( n = `afterOpen`  v = afteropen )
                          ( n = `beforeClose`  v = beforeclose )
                          ( n = `beforeOpen`  v = beforeopen ) ) ).
  ENDMETHOD.

  METHOD process_flow.
    result = _generic(
                 name   = `ProcessFlow`
                 ns     = 'commons'
                 t_prop = VALUE #( ( n = `id`               v = id )
                                   ( n = `foldedCorners`    v = z2ui5_cl_util=>boolean_abap_2_json( foldedcorners ) )
                                   ( n = `scrollable`       v = z2ui5_cl_util=>boolean_abap_2_json( scrollable ) )
                                   ( n = `showLabels`       v = z2ui5_cl_util=>boolean_abap_2_json( showlabels ) )
                                   ( n = `visible`          v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                   ( n = `wheelZoomable`    v = z2ui5_cl_util=>boolean_abap_2_json( wheelzoomable ) )
                                   ( n = `headerPress`      v = headerpress )
                                   ( n = `labelPress`       v = labelpress )
                                   ( n = `nodePress`        v = nodepress )
                                   ( n = `onError`          v = onerror )
                                   ( n = `lanes`            v = lanes )
                                   ( n = `nodes`            v = nodes ) ) ).
  ENDMETHOD.

  METHOD process_flow_lane_header.

    result = _generic( name   = `ProcessFlowLaneHeader`
                       ns     = 'commons'
                       t_prop = VALUE #( ( n = `iconSrc`          v = iconsrc )
                                         ( n = `laneId`           v = laneid )
                                         ( n = `position`         v = position )
                                         ( n = `state`            v = state )
                                         ( n = `text`             v = text )
                                         ( n = `zoomLevel`        v = zoomlevel ) ) ).
  ENDMETHOD.

  METHOD process_flow_node.
    result = _generic(
                 name   = `ProcessFlowNode`
                 ns     = 'commons'
                 t_prop = VALUE #( ( n = `laneId`               v = laneid )
                                   ( n = `nodeId`               v = nodeid )
                                   ( n = `title`                v = title )
                                   ( n = `titleAbbreviation`    v = titleabbreviation )
                                   ( n = `children`             v = children )
                                   ( n = `state`                v = state )
                                   ( n = `stateText`            v = statetext )
                                   ( n = `texts`                v = texts )
                                   ( n = `highlighted`          v = z2ui5_cl_util=>boolean_abap_2_json( highlighted ) )
                                   ( n = `focused`              v = z2ui5_cl_util=>boolean_abap_2_json( focused ) )
                                   ( n = `selected`             v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                                   ( n = `tag`                  v = tag )
                                   ( n = `texts`                v = texts )
                                   ( n = `type`                 v = type ) ) ).
  ENDMETHOD.

  METHOD progress_indicator.
    result = me.
    _generic( name   = `ProgressIndicator`
              t_prop = VALUE #( ( n = `class`        v = class )
                                ( n = `percentValue` v = percentvalue )
                                ( n = `displayValue` v = displayvalue )
                                ( n = `showValue`    v = z2ui5_cl_util=>boolean_abap_2_json( showvalue ) )
                                ( n = `visible`      v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                ( n = `state`        v = state ) ) ).
  ENDMETHOD.

  METHOD property_threshold.
    result = _generic( name   = `PropertyThreshold`
                       ns     = `si`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `ariaLabel`     v = arialabel )
                                         ( n = `fillColor`     v = fillcolor )
                                         ( n = `toValue`     v = tovalue )
                                         ( n = `visible`     v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                        ) ).
  ENDMETHOD.

  METHOD property_thresholds.
    result = _generic( name = `propertyThresholds`
                       ns   = `si` ).
  ENDMETHOD.

  METHOD proportion_zoom_strategy.
    result = _generic( name   = `ProportionZoomStrategy`
                       ns     = `axistime`
                       t_prop = VALUE #( ( n = `zoomLevel` v = zoomlevel ) ) ).
  ENDMETHOD.

  METHOD quick_view.
    result = _generic( name   = `QuickView`
                       t_prop = VALUE #( ( n = `placement`      v = placement )
                                         ( n = `width`    v = width )
                                         ( n = `afterClose`    v = afterclose )
                                         ( n = `afterOpen`    v = afteropen )
                                         ( n = `beforeClose`    v = beforeclose )
                                         ( n = `beforeOpen`  v = beforeopen ) ) ).
  ENDMETHOD.

  METHOD quick_view_group.
    result = _generic( name   = `QuickViewGroup`
                       t_prop = VALUE #( ( n = `heading` v = heading )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD quick_view_group_element.
    result = _generic( name   = `QuickViewGroupElement`
                       t_prop = VALUE #( ( n = `emailSubject`  v = emailsubject )
                                         ( n = `label`       v = label )
                                         ( n = `pageLinkId`  v = pagelinkid )
                                         ( n = `target`      v = target )
                                         ( n = `type`      v = type )
                                         ( n = `url`      v = url )
                                         ( n = `value`      v = value )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD quick_view_page.
    result = _generic( name   = `QuickViewPage`
                       t_prop = VALUE #( ( n = `description`   v = description )
                                         ( n = `header`       v = header )
                                         ( n = `pageId`       v = pageid )
                                         ( n = `title`       v = title )
                                         ( n = `titleUrl` v = titleurl ) ) ).
  ENDMETHOD.

  METHOD quick_view_page_avatar.
    result = _generic( `avatar` ).
  ENDMETHOD.

  METHOD radial_micro_chart.
    result = me.
    _generic( name   = `RadialMicroChart`
              ns     = `mchart`
              t_prop = VALUE #( ( n = `percentage`  v = percentage )
                                ( n = `press`       v = press )
                                ( n = `size`        v = size )
                                ( n = `height`      v = height )
                                ( n = `alignContent`      v = aligncontent )
                                ( n = `hideOnNoData`    v = z2ui5_cl_util=>boolean_abap_2_json( hideonnodata ) )
                                ( n = `valueColor`  v = valuecolor ) ) ).
  ENDMETHOD.

  METHOD radio_button.
    result = _generic(
                 name   = `RadioButton`
                 t_prop = VALUE #( ( n = `id`             v = id )
                                   ( n = `activeHandling`  v = z2ui5_cl_util=>boolean_abap_2_json( activehandling ) )
                                   ( n = `editable`        v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                                   ( n = `enabled`         v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                   ( n = `selected`        v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                                   ( n = `useEntireWidth`  v = z2ui5_cl_util=>boolean_abap_2_json( useentirewidth ) )
                                   ( n = `text`            v = text )
                                   ( n = `textDirection`   v = textdirection )
                                   ( n = `textAlign`       v = textalign )
                                   ( n = `groupName`       v = groupname )
                                   ( n = `valueState`      v = valuestate )
                                   ( n = `width`           v = width )
                                   ( n = `select`          v = select )
                                   ( n = `visible`         v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD radio_button_group.
    result = _generic( name   = `RadioButtonGroup`
                       t_prop = VALUE #( ( n = `id`             v = id )
                                         ( n = `columns`        v = columns )
                                         ( n = `editable`       v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                                         ( n = `enabled`        v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                         ( n = `selectedIndex`  v = selectedindex )
                                         ( n = `textDirection`  v = textdirection )
                                         ( n = `valueState`     v = valuestate )
                                         ( n = `select`         v = select )
                                         ( n = `width`          v = width )
                                         ( n = `class`          v = class ) ) ).
  ENDMETHOD.

  METHOD range_slider.
    result = me.
    _generic( name   = `RangeSlider`
*              ns     = `webc`
              t_prop = VALUE #( ( n = `class`           v = class )
                                ( n = `endValue`        v = endvalue )
                                ( n = `id`          v = id )
                                ( n = `labelInterval`  v = labelinterval )
                                ( n = `max`   v = max )
                                ( n = `min`   v = min )
                                ( n = `showTickmarks`   v = z2ui5_cl_util=>boolean_abap_2_json( showtickmarks ) )
                                ( n = `startValue`   v = startvalue )
                                ( n = `step`   v = step )
                                ( n = `width`   v = width )
                                ( n = `value`   v = value )
                                ( n = `value2`   v = value2 )
                                ( n = `change`   v = change ) ) ).
  ENDMETHOD.

  METHOD rating_indicator.

    result = _generic( name   = `RatingIndicator`
                       t_prop = VALUE #( ( n = `class`        v = class )
                                         ( n = `maxValue`     v = maxvalue )
                                         ( n = `displayOnly`  v = z2ui5_cl_util=>boolean_abap_2_json( displayonly ) )
                                         ( n = `editable`     v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                                         ( n = `iconSize`     v = iconsize )
                                         ( n = `value`        v = value )
                                         ( n = `id`           v = id )
                                         ( n = `change`       v = change )
                                         ( n = `enabled`      v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                         ( n = `tooltip`      v = tooltip ) ) ).

  ENDMETHOD.

  METHOD relationship.

    result = _generic( name   = `Relationship`
                       ns     = `gantt`
                       t_prop = VALUE #( ( n = `shapeId`    v = shapeid )
                                         ( n = `type`        v = type )
                                         ( n = `successor`   v = successor )
                                         ( n = `predecessor` v = predecessor ) ) ).

  ENDMETHOD.

  METHOD relationships.
    result = _generic( name = `relationships`
                       ns   = `gantt` ).
  ENDMETHOD.

  METHOD responsive_scale.
    result = _generic( name   = `ResponsiveScale`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `tickmarksBetweenLabels`     v = tickmarksbetweenlabels )
                                        ) ).
  ENDMETHOD.

  METHOD responsive_splitter.
    result = _generic( name   = `ResponsiveSplitter`
                       ns     = `layout`
                       t_prop = VALUE #( ( n = `defaultPane`  v = defaultpane )
                                         ( n = `height`       v = height )
                                         ( n = `width`        v = width ) ) ).
  ENDMETHOD.

  METHOD rich_text_editor.
    result = _generic(
        name   = `RichTextEditor`
        ns     = `text`
        t_prop = VALUE #( ( n = `buttonGroups`        v = buttongroups )
                          ( n = `customToolbar`       v = z2ui5_cl_util=>boolean_abap_2_json( customtoolbar ) )
                          ( n = `editable`            v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                          ( n = `height`              v = height )
                          ( n = `editorType`          v = editortype )
                          ( n = `plugins`             v = plugins )
                          ( n = `textDirection`       v = textdirection )
                          ( n = `value`               v = value )
                          ( n = `beforeEditorInit`    v = beforeeditorinit )
                          ( n = `change`              v = change )
                          ( n = `ready`               v = ready )
                          ( n = `readyRecurring`      v = readyrecurring )
                          ( n = `required`            v = z2ui5_cl_util=>boolean_abap_2_json( required ) )
                          ( n = `sanitizeValue`       v = z2ui5_cl_util=>boolean_abap_2_json( sanitizevalue ) )
                          ( n = `showGroupClipboard`  v = z2ui5_cl_util=>boolean_abap_2_json( showgroupclipboard ) )
                          ( n = `showGroupFont`       v = z2ui5_cl_util=>boolean_abap_2_json( showgroupfont ) )
                          ( n = `showGroupFontStyle`  v = z2ui5_cl_util=>boolean_abap_2_json( showgroupfontstyle ) )
                          ( n = `showGroupInsert`     v = z2ui5_cl_util=>boolean_abap_2_json( showgroupinsert ) )
                          ( n = `showGroupLink`       v = z2ui5_cl_util=>boolean_abap_2_json( showgrouplink ) )
                          ( n = `showGroupStructure`  v = z2ui5_cl_util=>boolean_abap_2_json( showgroupstructure ) )
                          ( n = `showGroupTextAlign`  v = z2ui5_cl_util=>boolean_abap_2_json( showgrouptextalign ) )
                          ( n = `showGroupUndo`       v = z2ui5_cl_util=>boolean_abap_2_json( showgroupundo ) )
                          ( n = `useLegacyTheme`      v = z2ui5_cl_util=>boolean_abap_2_json( uselegacytheme ) )
                          ( n = `wrapping`            v = z2ui5_cl_util=>boolean_abap_2_json( wrapping ) )
                          ( n = `width`               v = width ) ) ).

  ENDMETHOD.

  METHOD route.

    result = me.
    _generic( name   = `Route`
              ns     = `vbm`
              t_prop = VALUE #( ( n = `id`  v = id )
                                ( n = `position`  v = position )
                                ( n = `routetype`  v = routetype )
                                ( n = `lineDash`  v = linedash )
                                ( n = `linewidth`  v = linewidth )
                                ( n = `color`  v = color )
                                ( n = `colorBorder`  v = colorborder ) ) ).

  ENDMETHOD.

  METHOD routes.

    result = _generic( name   = `Routes`
                       ns     = `vbm`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `items`  v = items ) ) ).

  ENDMETHOD.

  METHOD rows.
    result = _generic( `rows` ).
  ENDMETHOD.

  METHOD row_settings_template.
    result = _generic( name = `rowSettingsTemplate`
                       ns   = `table` ).
  ENDMETHOD.

  METHOD rules.
    result = _generic( `rules` ).
  ENDMETHOD.

  METHOD scroll_container.
    result = _generic( name   = `ScrollContainer`
                       t_prop = VALUE #( ( n = `height`      v = height )
                                         ( n = `width`       v = width )
                                         ( n = `id`          v = id )
                                         ( n = `visible`     v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `vertical`    v = z2ui5_cl_util=>boolean_abap_2_json( vertical ) )
                                         ( n = `horizontal`  v = z2ui5_cl_util=>boolean_abap_2_json( horizontal ) )
                                         ( n = `focusable`   v = z2ui5_cl_util=>boolean_abap_2_json( focusable ) ) ) ).
  ENDMETHOD.

  METHOD search_field.
    result = me.
    _generic( name   = `SearchField`
              t_prop = VALUE #( ( n = `width`  v = width )
                                ( n = `search` v = search )
                                ( n = `value`  v = value )
                                ( n = `id`     v = id )
                                ( n = `class`  v = class )
                                ( n = `change` v = change )
                                ( n = `maxLength` v = maxlength )
                                ( n = `placeholder` v = placeholder )
                                ( n = `suggest` v = suggest )
                                ( n = `enableSuggestions` v = z2ui5_cl_util=>boolean_abap_2_json( enablesuggestions ) )
                                ( n = `showRefreshButton` v = z2ui5_cl_util=>boolean_abap_2_json( showrefreshbutton ) )
                                ( n = `showSearchButton` v = z2ui5_cl_util=>boolean_abap_2_json( showsearchbutton ) )
                                ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `liveChange` v = livechange ) ) ).
  ENDMETHOD.

  METHOD second_status.
    result = _generic( `secondStatus` ).
  ENDMETHOD.

  METHOD sections.
    result = _generic( name = `sections`
                       ns   = `uxap` ).
  ENDMETHOD.

  METHOD segmented_button.
    result = _generic( name   = `SegmentedButton`
                       t_prop = VALUE #( ( n = `id` v = id )
                                         ( n = `selectedKey` v = selected_key )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                         ( n = `selectionChange` v = selection_change ) ) ).
  ENDMETHOD.

  METHOD segmented_button_item.
    result = me.
    _generic( name   = `SegmentedButtonItem`
              t_prop = VALUE #( ( n = `icon`  v = icon )
                                ( n = `press`   v = press )
                                ( n = `width`   v = width )
                                ( n = `key`   v = key )
                                ( n = `textDirection`   v = textdirection )
                                ( n = `enabled`   v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `visible`   v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                ( n = `text`  v = text ) ) ).
  ENDMETHOD.

  METHOD segments.
    result = _generic( name = `segments`
                       ns   = `mchart` ).
  ENDMETHOD.

  METHOD select.
    result = _generic( name   = `Select`
                       t_prop = VALUE #(
                           ( n = `id`                  v = id )
                           ( n = `class`                  v = class )
                           ( n = `autoAdjustWidth`     v = z2ui5_cl_util=>boolean_abap_2_json( autoadjustwidth ) )
                           ( n = `columnRatio`         v = columnratio )
                           ( n = `editable`            v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                           ( n = `enabled`             v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                           ( n = `forceSelection`      v = z2ui5_cl_util=>boolean_abap_2_json( forceselection ) )
                           ( n = `icon`                v = icon )
                           ( n = `maxWidth`            v = maxwidth )
                           ( n = `name`                v = name )
                           ( n = `required`            v = z2ui5_cl_util=>boolean_abap_2_json( required ) )
                           ( n = `resetOnMissingKey`   v = z2ui5_cl_util=>boolean_abap_2_json( resetonmissingkey ) )
                           ( n = `selectedItemId`      v = selecteditemid )
                           ( n = `selectedKey`         v = selectedkey )
                           ( n = `showSecondaryValues` v = z2ui5_cl_util=>boolean_abap_2_json( showsecondaryvalues ) )
                           ( n = `textAlign`           v = textalign )
                           ( n = `textDirection`       v = textdirection )
                           ( n = `type`                v = type )
                           ( n = `valueState`          v = valuestate )
                           ( n = `valueStateText`      v = valuestatetext )
                           ( n = `width`               v = width )
                           ( n = `wrapItemsText`       v = z2ui5_cl_util=>boolean_abap_2_json( wrapitemstext ) )
                           ( n = `items`               v = items )
                           ( n = `selectedItem`        v = selecteditem )
                           ( n = `change`              v = change )
                           ( n = `liveChange`          v = livechange )
                           ( n = `visible`             v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD shapes1.
    result = _generic( name = `shapes1`
                       ns   = `gantt` ).
  ENDMETHOD.

  METHOD shapes2.
    result = _generic( name = `shapes2`
                       ns   = `gantt` ).
  ENDMETHOD.

  METHOD shape_group.
    result = _generic( name = `ShapeGroup`
                       ns   = `si` ).
  ENDMETHOD.

  METHOD shell.
    result = _generic(
        name   = `Shell`
        ns     = ns
        t_prop = VALUE #( ( n = `appWidthLimited`  v = z2ui5_cl_util=>boolean_abap_2_json( appwidthlimited ) ) ) ).
  ENDMETHOD.

  METHOD shell_bar.
    result = _generic( name   = `ShellBar`
                       ns     = `f`
                       t_prop = VALUE #(
                           ( n = `homeIcon`  v = homeicon )
                           ( n = `homeIconTooltip`  v = homeicontooltip )
                           ( n = `title`  v = title )
                           ( n = `secondTitle`  v = secondtitle )
                           ( n = `showCopilot`  v = z2ui5_cl_util=>boolean_abap_2_json( showcopilot ) )
                           ( n = `showMenuButton`  v = z2ui5_cl_util=>boolean_abap_2_json( showmenubutton ) )
                           ( n = `showNavButton`  v = z2ui5_cl_util=>boolean_abap_2_json( shownavbutton ) )
                           ( n = `showNotifications`  v = z2ui5_cl_util=>boolean_abap_2_json( shownotifications ) )
                           ( n = `showProductSwitcher`  v = z2ui5_cl_util=>boolean_abap_2_json( showproductswitcher ) )
                           ( n = `showSearch`  v = z2ui5_cl_util=>boolean_abap_2_json( showsearch ) )
                           ( n = `notificationsNumber`  v = notificationsnumber )
                           ( n = 'avatarPressed' v = avatarpressed )
                           ( n = 'copilotPressed' v = copilotpressed )
                           ( n = 'homeIconPressed' v = homeiconpressed )
                           ( n = 'menuButtonPressed' v = menubuttonpressed )
                           ( n = 'navButtonPressed' v = navbuttonpressed )
                           ( n = 'notificationsPressed' v = notificationspressed )
                           ( n = 'productSwitcherPressed' v = productswitcherpressed )
                           ( n = 'searchButtonPressed' v = searchbuttonpressed ) ) ).

  ENDMETHOD.

  METHOD side_content.
    result = _generic( name   = `sideContent`
                       ns     = 'layout'
                       t_prop = VALUE #( ( n = `width`                           v = width ) ) ).

  ENDMETHOD.

  METHOD side_panel.
    result = _generic(
        name   = `SidePanel`
        ns     = `f`
        t_prop = VALUE #( ( n = `sidePanelWidth`  v = sidepanelwidth )
                          ( n = `sidePanelResizeStep`      v = sidepanelresizestep )
                          ( n = `sidePanelResizeLargerStep`      v = sidepanelresizelargerstep )
                          ( n = `sidePanelPosition`      v = sidepanelposition )
                          ( n = `sidePanelMinWidth`      v = sidepanelminwidth )
                          ( n = `sidePanelMaxWidth`      v = sidepanelmaxwidth )
                          ( n = `sidePanelResizable`    v = z2ui5_cl_util=>boolean_abap_2_json( sidepanelresizable ) )
                          ( n = `actionBarExpanded`    v = z2ui5_cl_util=>boolean_abap_2_json( actionbarexpanded ) )
                          ( n = `toggle`    v = toggle )
                          ( n = `ariaLabel`  v = arialabel ) ) ).
  ENDMETHOD.

  METHOD side_panel_item.
    result = _generic( name   = `SidePanelItem`
                       ns     = `f`
                       t_prop = VALUE #( ( n = `icon` v = icon )
                                         ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                         ( n = `key` v = key )
                                         ( n = `text` v = text ) ) ).
  ENDMETHOD.

  METHOD simple_form.
    result = _generic(
        name   = `SimpleForm`
        ns     = `form`
        t_prop = VALUE #(
            ( n = `title`    v = title )
            ( n = `layout`   v = layout )
            ( n = `class`           v = class )
            ( n = `adjustLabelSpan`   v = adjustlabelspan )
            ( n = `backgroundDesign`   v = backgrounddesign )
            ( n = `breakpointL`   v = breakpointl )
            ( n = `breakpointM`   v = breakpointm )
            ( n = `breakpointXL`   v = breakpointxl )
            ( n = `emptySpanL`   v = emptyspanl )
            ( n = `emptySpanM`   v = emptyspanm )
            ( n = `emptySpanS`   v = emptyspans )
            ( n = `emptySpanXL`   v = emptyspanxl )
            ( n = `labelSpanL`   v = labelspanl )
            ( n = `labelSpanM`   v = labelspanm )
            ( n = `labelSpanS`   v = labelspans )
            ( n = `labelSpanXL`   v = labelspanxl )
            ( n = `maxContainerCols`   v = maxcontainercols )
            ( n = `minWidth`   v = minwidth )
            ( n = `singleContainerFullSize`   v = z2ui5_cl_util=>boolean_abap_2_json( singlecontainerfullsize ) )
            ( n = `visible`   v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
            ( n = `width`       v = width )
            ( n = `id`       v = id )
            ( n = `columnsXL`   v = columnsxl )
            ( n = `columnsL`   v = columnsl )
            ( n = `columnsM`   v = columnsm )
            ( n = `editable` v = z2ui5_cl_util=>boolean_abap_2_json( editable ) ) ) ).
  ENDMETHOD.

  METHOD slider.
    result = me.
    _generic( name   = `Slider`
              t_prop = VALUE #( ( n = `class`           v = class )
                                ( n = `id`          v = id )
                                ( n = `max`   v = max )
                                ( n = `min`   v = min )
                                ( n = `enableTickmarks`   v = z2ui5_cl_util=>boolean_abap_2_json( enabletickmarks ) )
                                ( n = `enabled`   v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `value`   v = value )
                                ( n = `step`   v = step )
                                ( n = `change`   v = change )
                                ( n = `width`   v = width )
                                ( n = `inputsAsTooltips`   v = inputsastooltips )
                                ( n = `showAdvancedTooltip`   v = showadvancedtooltip )
                                ( n = `showHandleTooltip`   v = showhandletooltip )
                                ( n = `liveChange` v = liveChange ) ) ).
  ENDMETHOD.

  METHOD slide_tile.

    result = _generic( name   = `SlideTile`
                       t_prop = VALUE #( ( n = `displayTime` v = displaytime )
                                         ( n = `height` v = height )
                                         ( n = `scope` v = scope )
                                         ( n = `sizeBehavior` v = sizebehavior )
                                         ( n = `transitionTime` v = transitiontime )
                                         ( n = `width` v = width )
                                         ( n = `press` v = press )
                                         ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `class`   v = class ) ) ).
  ENDMETHOD.

  METHOD smart_variant_management.
    result = me.
    _generic(
        name   = `SmartVariantManagement`
        ns     = `smartVariantManagement`
        t_prop = VALUE #(
            ( n = `id`      v = id )
            ( n = `showExecuteOnSelection`  v = z2ui5_cl_util=>boolean_abap_2_json( showexecuteonselection ) )
            ( n = `persistencyKey`  v = persistencyKey )
             ) ).

  ENDMETHOD.

  METHOD snapped_content.
    result = _generic( name = `snappedContent`
                       ns   = ns ).
  ENDMETHOD.

  METHOD snapped_heading.
    result = me.
    result = _generic( name = `snappedHeading`
                       ns   = `uxap` ).
  ENDMETHOD.

  METHOD snapped_title_on_mobile.
    result = _generic( name = `snappedTitleOnMobile`
                       ns   = `uxap` ).
  ENDMETHOD.

  METHOD sort_items.
    result = _generic( `sortItems` ).
  ENDMETHOD.

  METHOD splitter_layout_data.
    result = _generic( name   = `SplitterLayoutData`
                       ns     = `layout`
                       t_prop = VALUE #( ( n = `size`         v = size )
                                         ( n = `minSize`      v = minsize )
                                         ( n = `resizable`    v = z2ui5_cl_util=>boolean_abap_2_json( resizable ) ) ) ).
  ENDMETHOD.

  METHOD split_container.

    result = me.
    _generic( name   = `SplitContainer`
              t_prop = VALUE #( ( n = `id`                          v = id )
                                ( n = `initialDetail`               v = initialdetail )
                                ( n = `initialMaster`               v = initialmaster )
                                ( n = `backgroundColor`             v = backgroundcolor )
                                ( n = `backgroundImage`             v = backgroundimage )
                                ( n = `backgroundOpacity`           v = backgroundopacity )
                                ( n = `backgroundRepeat`            v = backgroundrepeat )
                                ( n = `defaultTransitionNameDetail` v = defaulttransitionnamedetail )
                                ( n = `defaultTransitionNameMaster` v = defaulttransitionnamemaster )
                                ( n = `masterButtonText`            v = masterbuttontext )
                                ( n = `masterButtonTooltip`         v = masterbuttontooltip )
                                ( n = `afterDetailNavigate`         v = afterdetailnavigate )
                                ( n = `afterMasterClose`            v = aftermasterclose )
                                ( n = `afterMasterNavigate`         v = aftermasternavigate )
                                ( n = `afterMasterOpen`             v = aftermasteropen )
                                ( n = `beforeMasterClose`           v = beforemasterclose )
                                ( n = `beforeMasterOpen`            v = beforemasteropen )
                                ( n = `detailNavigate`              v = detailnavigate )
                                ( n = `masterButton`                v = masterbutton )
                                ( n = `masterNavigate`              v = masternavigate )
                                ( n = `mode`                        v = mode ) ) ).

  ENDMETHOD.

  METHOD split_pane.
    result = _generic( name   = `SplitPane`
                       ns     = `layout`
                       t_prop = VALUE #( ( n = `id`                   v = id )
                                         ( n = `requiredParentWidth`  v = requiredparentwidth ) ) ).
  ENDMETHOD.

  METHOD spot.

    result = me.
    _generic( name   = `Spot`
              ns     = `vbm`
              t_prop = VALUE #( ( n = `id`  v = id )
                                ( n = `position`  v = position )
                                ( n = `contentOffset`  v = contentoffset )
                                ( n = `type`  v = type )
                                ( n = `scale`  v = scale )
                                ( n = `tooltip`  v = tooltip )
                                ( n = `image`  v = image )
                                ( n = `icon`  v = icon )
                                ( n = `text`  v = text )
                                ( n = `click`  v = click ) ) ).

  ENDMETHOD.

  METHOD spots.

    result = _generic( name   = `Spots`
                       ns     = `vbm`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `items`  v = items ) ) ).

  ENDMETHOD.

  METHOD stacked_bar_micro_chart.

    result = me.
    _generic( name   = `StackedBarMicroChart`
              ns     = `mchart`
              t_prop = VALUE #( ( n = `height`  v = height )
                                ( n = `press`       v = press )
                                ( n = `maxValue`        v = maxvalue )
                                ( n = `precision`      v = precision )
                                ( n = `size`      v = size )
                                ( n = `hideOnNoData`    v = z2ui5_cl_util=>boolean_abap_2_json( hideonnodata ) )
                                ( n = `displayZeroValue`    v = z2ui5_cl_util=>boolean_abap_2_json( displayzerovalue ) )
                                ( n = `showLabels`    v = z2ui5_cl_util=>boolean_abap_2_json( showlabels ) )
                                ( n = `width`  v = width ) ) ).
  ENDMETHOD.

  METHOD standard_list_item.
    result = me.
    _generic(
        name   = `StandardListItem`
        t_prop = VALUE #( ( n = `title`       v = title )
                          ( n = `description` v = description )
                          ( n = `icon`        v = icon )
                          ( n = `info`        v = info )
                          ( n = `press`       v = press )
                          ( n = `type`        v = type )
                          ( n = `counter`     v = counter )
                          ( n = `activeIcon`     v = activeicon )
                          ( n = `adaptTitleSize`     v = z2ui5_cl_util=>boolean_abap_2_json( adapttitlesize ) )
                          ( n = `unread`     v = z2ui5_cl_util=>boolean_abap_2_json( unread ) )
                          ( n = `iconInset`     v = z2ui5_cl_util=>boolean_abap_2_json( iconinset ) )
                          ( n = `infoStateInverted`     v = z2ui5_cl_util=>boolean_abap_2_json( infostateinverted ) )
                          ( n = `wrapping`     v = z2ui5_cl_util=>boolean_abap_2_json( wrapping ) )
                          ( n = `infoState`     v = infostate )
                          ( n = `highlight`     v = highlight )
                          ( n = `wrapCharLimit`     v = wrapcharlimit )
                          ( n = `selected`    v = selected ) ) ).
  ENDMETHOD.

  METHOD standard_tree_item.
    result = me.
    _generic( name   = `StandardTreeItem`
              t_prop = VALUE #( ( n = `title`       v = title )
                                ( n = `icon`        v = icon )
                                ( n = `press`       v = press )
                                ( n = `detailPress` v = detailpress )
                                ( n = `type`        v = type )
                                ( n = `counter`     v = counter )
                                ( n = `selected`    v = selected )
                                ( n = `tooltip`    v = tooltip ) ) ).

  ENDMETHOD.

  METHOD status.

    result = _generic(
                 name   = `Status`
                 ns     = `networkgraph`
                 t_prop = VALUE #( ( n = `id`  v = id )
                                   ( n = `class`  v = class )
                                   ( n = `backgroundColor`  v = backgroundcolor )
                                   ( n = `borderColor`         v = bordercolor )
                                   ( n = `borderStyle`         v = borderstyle )
                                   ( n = `borderWidth`         v = borderwidth )
                                   ( n = `contentColor`         v = contentcolor )
                                   ( n = `headerContentColor`         v = headercontentcolor )
                                   ( n = `hoverBackgroundColor`         v = hoverbackgroundcolor )
                                   ( n = `hoverBorderColor`         v = hoverbordercolor )
                                   ( n = `hoverContentColor`         v = hovercontentcolor )
                                   ( n = `key`         v = key )
                                   ( n = `legendColor`         v = legendcolor )
                                   ( n = `selectedBackgroundColor`         v = selectedbackgroundcolor )
                                   ( n = `selectedBorderColor`         v = selectedbordercolor )
                                   ( n = `selectedContentColor`         v = selectedcontentcolor )
                                   ( n = `title`         v = title )
                                   ( n = `useFocusColorAsContentColor`
                                     v = z2ui5_cl_util=>boolean_abap_2_json( usefocuscolorascontentcolor ) )
                                   ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).

  ENDMETHOD.

  METHOD statuses.
    result = _generic( name = `statuses`
                       ns   = SWITCH #( ns WHEN '' THEN `networkgraph` ELSE ns ) ).
  ENDMETHOD.

  METHOD status_indicator.
    result = _generic( name   = `StatusIndicator`
                       ns     = `si`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `class`    v = class )
                                         ( n = `height`     v = height )
                                         ( n = `labelPosition` v = labelposition )
                                         ( n = `showLabel`    v = z2ui5_cl_util=>boolean_abap_2_json( showlabel ) )
                                         ( n = `size`    v = size )
                                         ( n = `value`    v = value )
                                         ( n = `viewBox`    v = viewbox )
                                         ( n = `width`    v = width )
                                         ( n = `press`    v = press )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                        ) ).
  ENDMETHOD.

  METHOD step_input.
    result = me.
    _generic( name   = `StepInput`
              t_prop = VALUE #( ( n = `id`                    v = id )
                                ( n = `max`                   v = max )
                                ( n = `min`                   v = min )
                                ( n = `step`                  v = step )
                                ( n = `width`                 v = width )
                                ( n = `value`                 v = value )
                                ( n = `valueState`            v = valuestate )
                                ( n = `enabled`               v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `description`           v = description )
                                ( n = `displayValuePrecision` v = displayvalueprecision )
                                ( n = `largerStep`            v = largerstep )
                                ( n = `stepMode`              v = stepmode )
                                ( n = `editable`              v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                                ( n = `fieldWidth`            v = fieldwidth )
                                ( n = `textalign`             v = textalign )
                                ( n = `validationMode`        v = validationmode )
                                ( n = `change`                v = change ) ) ).
  ENDMETHOD.

  METHOD stringify.

    result = get_root( )->xml_get( ).

  ENDMETHOD.

  METHOD sub_header.

    result = _generic( name = `subHeader`
                       ns   = ns ).

  ENDMETHOD.

  METHOD sub_sections.
    result = me.
    result = _generic( name = `subSections`
                       ns   = `uxap` ).
  ENDMETHOD.

  METHOD suggestion_columns.
    result = _generic( `suggestionColumns` ).
  ENDMETHOD.

  METHOD suggestion_item.
    result = me.
    _generic( name   = `SuggestionItem`
              t_prop = VALUE #( ( n = `description`   v = description )
                                ( n = `icon`          v = icon )
                                ( n = `key`           v = key )
                                ( n = `text`          v = text )
                                ( n = `textDirection` v = textdirection ) ) ).
  ENDMETHOD.

  METHOD suggestion_items.
    result = _generic( `suggestionItems` ).
  ENDMETHOD.

  METHOD suggestion_rows.
    result = _generic( `suggestionRows` ).
  ENDMETHOD.

  METHOD swim_lane_chain_layout.
    result = _generic( name = `SwimLaneChainLayout`
                       ns   = `nglayout` ).
  ENDMETHOD.

  METHOD switch.
    result = me.
    _generic( name   = `Switch`
              t_prop = VALUE #( ( n = `type`           v = type )
                                ( n = `enabled`        v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `state`          v = state )
                                ( n = `change`         v = change )
                                ( n = `customTextOff`  v = customtextoff )
                                ( n = `customTextOn`   v = customtexton ) ) ).
  ENDMETHOD.

  METHOD tab.
    result = _generic( name   = `Tab`
                       ns     = `webc`
                       t_prop = VALUE #( ( n = `text`     v = text )
                                         ( n = `selected` v = selected ) ) ).
  ENDMETHOD.

  METHOD table.
    result = _generic( name   = `Table`
                       t_prop = VALUE #(
                           ( n = `items`            v = items )
                           ( n = `headerText`       v = headertext )
                           ( n = `class`            v = class )
                           ( n = `growing`          v = growing )
                           ( n = `growingThreshold` v = growingthreshold )
                           ( n = `growingScrollToLoad` v = growingscrolltoload )
                           ( n = `sticky`           v = sticky )
                           ( n = `showSeparators`           v = showseparators )
                           ( n = `mode`             v = mode )
                           ( n = `inset`             v = inset )
                           ( n = `width`            v = width )
                           ( n = `id`            v = id )
                           ( n = `hiddenInPopin`            v = hiddeninpopin )
                           ( n = `popinLayout`            v = popinlayout )
                           ( n = `selectionChange`  v = selectionchange )
                           ( n = `backgroundDesign`  v = backgrounddesign )
                           ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                           ( n = `alternateRowColors`  v = z2ui5_cl_util=>boolean_abap_2_json( alternaterowcolors ) )
                           ( n = `fixedLayout`  v = z2ui5_cl_util=>boolean_abap_2_json( fixedlayout ) )
                           ( n = `showOverlay`  v = z2ui5_cl_util=>boolean_abap_2_json( showoverlay ) )
                           ( n = `autoPopinMode`  v = z2ui5_cl_util=>boolean_abap_2_json( autopopinmode ) ) ) ).
  ENDMETHOD.

  METHOD table_select_dialog.

    result = _generic( name   = `TableSelectDialog`
                       t_prop = VALUE #(
                           ( n = `confirmButtonText`    v = confirmbuttontext )
                           ( n = `contentHeight`        v = contentheight )
                           ( n = `contentWidth`         v = contentwidth )
                           ( n = `draggable`            v = z2ui5_cl_util=>boolean_abap_2_json( draggable ) )
                           ( n = `growing`              v = z2ui5_cl_util=>boolean_abap_2_json( growing ) )
                           ( n = `growingThreshold`     v = growingthreshold )
                           ( n = `multiSelect`          v = z2ui5_cl_util=>boolean_abap_2_json( multiselect ) )
                           ( n = `noDataText`           v = nodatatext )
                           ( n = `rememberSelections`   v = z2ui5_cl_util=>boolean_abap_2_json( rememberselections ) )
                           ( n = `resizable`            v = z2ui5_cl_util=>boolean_abap_2_json( resizable ) )
                           ( n = `searchPlaceholder`    v = searchplaceholder )
                           ( n = `showClearButton`      v = z2ui5_cl_util=>boolean_abap_2_json( showclearbutton ) )
                           ( n = `title`                v = title )
                           ( n = `titleAlignment`       v = titlealignment )
                           ( n = `items`                v = items )
                           ( n = `search`               v = search )
                           ( n = `confirm`              v = confirm )
                           ( n = `cancel`               v = cancel )
                           ( n = `liveChange`           v = livechange )
                           ( n = `selectionChange`      v = selectionchange )
                           ( n = `visible`              v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD tab_container.
    result = _generic( name = `TabContainer`
                       ns   = `webc` ).
  ENDMETHOD.

  METHOD task.
    result = _generic( name   = `Task`
                       ns     = `shapes`
                       t_prop = VALUE #( ( n = `time` v = time )
                                         ( n = `endTime` v = endtime )
                                         ( n = `id` v = id )
                                         ( n = `type` v = type )
                                         ( n = `connectable` v = connectable )
                                         ( n = `title` v = title )
                                         ( n = `showTitle` v = z2ui5_cl_util=>boolean_abap_2_json( showtitle ) )
                                         ( n = `color` v = color ) ) ).
  ENDMETHOD.

  METHOD template_else.

    result = _generic( name = `else`
                       ns   = `template` ).

  ENDMETHOD.

  METHOD template_elseif.

    result = _generic( name   = `elseif`
                       ns     = `template`
                       t_prop = VALUE #( ( n = `test`  v = test ) ) ).

  ENDMETHOD.

  METHOD template_if.

    result = _generic( name   = `if`
                       ns     = `template`
                       t_prop = VALUE #( ( n = `test`  v = test ) ) ).

  ENDMETHOD.

  METHOD template_repeat.

    result = _generic( name   = `repeat`
                       ns     = `template`
                       t_prop = VALUE #( ( n = `list`  v = list )
                                         ( n = `var`  v = var ) ) ).

  ENDMETHOD.

  METHOD template_then.

    result = _generic( name = `then`
                       ns   = `template` ).

  ENDMETHOD.

  METHOD template_with.

    result = _generic( name   = `with`
                       ns     = `template`
                       t_prop = VALUE #( ( n = `path`  v = path )
                                         ( n = `helper`  v = helper )
                                         ( n = `var`  v = var ) ) ).

  ENDMETHOD.

  METHOD text.
    result = me.
    _generic( name   = `Text`
              ns     = ns
              t_prop = VALUE #( ( n = `text`  v = text )
                                ( n = `emptyIndicatorMode`  v = emptyindicatormode )
                                ( n = `maxLines`  v = maxlines )
                                ( n = `renderWhitespace`  v = renderwhitespace )
                                ( n = `textAlign`  v = textalign )
                                ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                ( n = `textDirection`  v = textdirection )
                                ( n = `width`  v = width )
                                ( n = `id`  v = id )
                                ( n = `wrapping`  v = z2ui5_cl_util=>boolean_abap_2_json( wrapping ) )
                                ( n = `wrappingType`  v = wrappingtype )
                                ( n = `class` v = class ) ) ).
  ENDMETHOD.

  METHOD text_area.
    result = me.
    _generic( name   = `TextArea`
              t_prop = VALUE #(
                  ( n = `value` v = value )
                  ( n = `rows` v = rows )
                  ( n = `cols` v = cols )
                  ( n = `height` v = height )
                  ( n = `width` v = width )
                  ( n = `wrapping` v = wrapping )
                  ( n = `maxLength` v = maxlength )
                  ( n = `textAlign` v = textalign )
                  ( n = `textDirection` v = textdirection )
                  ( n = `showValueStateMessage` v = z2ui5_cl_util=>boolean_abap_2_json( showvaluestatemessage ) )
                  ( n = `showExceededText` v = z2ui5_cl_util=>boolean_abap_2_json( showexceededtext ) )
                  ( n = `valueLiveUpdate` v = z2ui5_cl_util=>boolean_abap_2_json( valueliveupdate ) )
                  ( n = `editable` v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                  ( n = `class` v = class )
                  ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                  ( n = `id` v = id )
                  ( n = `growing` v = z2ui5_cl_util=>boolean_abap_2_json( growing ) )
                  ( n = `growingMaxLines` v = growingmaxlines )
                  ( n = `required`        v = required )
                  ( n = `valueState`      v = valuestate )
                  ( n = `placeholder`      v = placeholder )
                  ( n = `valueStateText`  v = valuestatetext ) ) ).
  ENDMETHOD.

  METHOD tile_content.

    result = _generic( name   = `TileContent`
                       ns     = ``
                       t_prop = VALUE #( ( n = `unit`   v = unit )
                                         ( n = `footerColor`   v = footercolor )
                                         ( n = `blocked`   v = z2ui5_cl_util=>boolean_abap_2_json( blocked ) )
                                         ( n = `frameType`   v = frametype )
                                         ( n = `priority`   v = priority )
                                         ( n = `priorityText`   v = prioritytext )
                                         ( n = `state`   v = state )
                                         ( n = `disabled`   v = z2ui5_cl_util=>boolean_abap_2_json( disabled ) )
                                         ( n = `visible`   v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `footer` v = footer )
                                         ( n = `class` v = class ) ) ).

  ENDMETHOD.

  METHOD tile_info.
    result = _generic( name   = `TileInfo`
                       t_prop = VALUE #( ( n = `id`               v = id )
                                         ( n = `class`               v = class )
                                         ( n = `backgroundColor`            v = backgroundcolor )
                                         ( n = `borderColor`       v = bordercolor )
                                         ( n = `src`       v = src )
                                         ( n = `text`             v = text )
                                         ( n = `textColor`  v = textcolor )
                         ) ).

  ENDMETHOD.

  METHOD timeline.

    result = _generic(
        name   = `Timeline`
        ns     = 'commons'
        t_prop = VALUE #( ( n = 'id'                 v = id )
                          ( n = 'enableDoubleSided'  v = z2ui5_cl_util=>boolean_abap_2_json( enabledoublesided ) )
                          ( n = 'groupBy'            v = groupby )
                          ( n = 'growingThreshold'   v = growingthreshold )
                          ( n = 'filterTitle'        v = filtertitle )
                          ( n = 'sortOldestFirst'    v = z2ui5_cl_util=>boolean_abap_2_json( sortoldestfirst ) )
                          ( n = 'enableModelFilter'  v = z2ui5_cl_util=>boolean_abap_2_json( enablemodelfilter ) )
                          ( n = 'enableScroll'       v = z2ui5_cl_util=>boolean_abap_2_json( enablescroll ) )
                          ( n = 'forceGrowing'       v = z2ui5_cl_util=>boolean_abap_2_json( forcegrowing ) )
                          ( n = 'group'              v = z2ui5_cl_util=>boolean_abap_2_json( group ) )
                          ( n = 'lazyLoading'        v = z2ui5_cl_util=>boolean_abap_2_json( lazyloading ) )
                          ( n = 'showHeaderBar'      v = z2ui5_cl_util=>boolean_abap_2_json( showheaderbar ) )
                          ( n = 'showIcons'          v = z2ui5_cl_util=>boolean_abap_2_json( showicons ) )
                          ( n = 'showItemFilter'     v = z2ui5_cl_util=>boolean_abap_2_json( showitemfilter ) )
                          ( n = 'showSearch'         v = z2ui5_cl_util=>boolean_abap_2_json( showsearch ) )
                          ( n = 'showSort'           v = z2ui5_cl_util=>boolean_abap_2_json( showsort ) )
                          ( n = 'showTimeFilter'     v = z2ui5_cl_util=>boolean_abap_2_json( showtimefilter ) )
                          ( n = 'sort'               v = z2ui5_cl_util=>boolean_abap_2_json( sort ) )
                          ( n = 'groupByType'        v = groupbytype )
                          ( n = 'textHeight'         v = textheight )
                          ( n = 'width'              v = width )
                          ( n = 'height'             v = height )
                          ( n = 'noDataText'         v = nodatatext )
                          ( n = 'alignment'          v = alignment )
                          ( n = 'axisOrientation'    v = axisorientation )
                          ( n = 'filterList'         v = filterlist )
                          ( n = 'customFilter'       v = customfilter )
                          ( n = 'content'            v = content ) ) ).
  ENDMETHOD.

  METHOD timeline_item.

    result = _generic(
        name   = `TimelineItem`
        ns     = 'commons'
        t_prop = VALUE #( ( n = 'id'                     v = id )
                          ( n = 'dateTime'               v = datetime )
                          ( n = 'title'                  v = title )
                          ( n = 'userNameClickable'      v = z2ui5_cl_util=>boolean_abap_2_json( usernameclickable ) )
                          ( n = 'useIconTooltip'         v = z2ui5_cl_util=>boolean_abap_2_json( useicontooltip ) )
                          ( n = 'userNameClicked'        v = usernameclicked )
                          ( n = 'userPicture'            v = userpicture )
                          ( n = 'select'                 v = select )
                          ( n = 'text'                   v = text )
                          ( n = 'userName'               v = username )
                          ( n = 'filterValue'            v = filtervalue )
                          ( n = 'iconDisplayShape'       v = icondisplayshape )
                          ( n = 'iconInitials'           v = iconinitials )
                          ( n = 'iconSize'               v = iconsize )
                          ( n = 'iconTooltip'            v = icontooltip )
                          ( n = 'maxCharacters'          v = maxcharacters )
                          ( n = 'replyCount'             v = replycount )
                          ( n = 'status'                 v = status )
                          ( n = 'customActionClicked'    v = customactionclicked )
                          ( n = 'press'                  v = press )
                          ( n = 'replyListOpen'          v = replylistopen )
                          ( n = 'replyPost'              v = replypost )
                          ( n = 'icon'                   v = icon ) ) ).
  ENDMETHOD.

  METHOD time_horizon.
    result = _generic( name   = `TimeHorizon`
                       ns     = `config`
                       t_prop = VALUE #( ( n = `startTime` v = starttime )
                                         ( n = `endTime`   v = endtime ) ) ).
  ENDMETHOD.

  METHOD time_picker.
    result = me.
    _generic( name   = `TimePicker`
              t_prop = VALUE #(
                  ( n = `value` v = value )
                  ( n = `dateValue`  v = datevalue )
                  ( n = `localeId`  v = localeid )
                  ( n = `placeholder`  v = placeholder )
                  ( n = `mask`  v = mask )
                  ( n = `maskMode`  v = maskmode )
                  ( n = `minutesStep`  v = minutesstep )
                  ( n = `name`  v = name )
                  ( n = `placeholderSymbol`  v = placeholdersymbol )
                  ( n = `secondsStep`  v = secondsstep )
                  ( n = `textAlign`  v = textalign )
                  ( n = `textDirection`  v = textdirection )
                  ( n = `title`  v = title )
                  ( n = `showCurrentTimeButton` v = z2ui5_cl_util=>boolean_abap_2_json( showcurrenttimebutton ) )
                  ( n = `showValueStateMessage` v = z2ui5_cl_util=>boolean_abap_2_json( showvaluestatemessage ) )
                  ( n = `support2400` v = z2ui5_cl_util=>boolean_abap_2_json( support2400 ) )
                  ( n = `initialFocusedDateValue` v = z2ui5_cl_util=>boolean_abap_2_json( initialfocuseddatevalue ) )
                  ( n = `hideInput` v = z2ui5_cl_util=>boolean_abap_2_json( hideinput ) )
                  ( n = `editable` v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                  ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                  ( n = `required` v = z2ui5_cl_util=>boolean_abap_2_json( required ) )
                  ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                  ( n = `width` v = width )
                  ( n = `valueState` v = valuestate )
                  ( n = `valueStateText` v = valuestatetext )
                  ( n = `displayFormat` v = displayformat )
                  ( n = `afterValueHelpClose` v = aftervaluehelpclose )
                  ( n = `afterValueHelpOpen` v = aftervaluehelpopen )
                  ( n = `change` v = change )
                  ( n = `liveChange` v = livechange )
                  ( n = `valueFormat` v = valueformat ) ) ).
  ENDMETHOD.

  METHOD title.
    DATA(lv_name) = COND #( WHEN ns = 'f' THEN 'title' ELSE `Title` ).

    result = me.
    _generic( ns     = ns
              name   = lv_name
              t_prop = VALUE #( ( n = `text`     v = text )
                                ( n = `class`     v = class )
                                ( n = `id`     v = id )
                                ( n = `wrappingType`     v = wrappingtype )
                                ( n = `textAlign`     v = textalign )
                                ( n = `textDirection`     v = textdirection )
                                ( n = `titleStyle`     v = titlestyle )
                                ( n = `width`     v = width )
                                ( n = `wrapping` v = z2ui5_cl_util=>boolean_abap_2_json( wrapping ) )
                                ( n = `visible` v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                ( n = `level` v = level ) ) ).
  ENDMETHOD.

  METHOD toggle_button.

    result = me.
    _generic( name   = `ToggleButton`
              t_prop = VALUE #( ( n = `press`   v = press )
                                ( n = `text`    v = text )
                                ( n = `enabled` v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                ( n = `icon`    v = icon )
                                ( n = `type`    v = type )
                                ( n = `class`   v = class )
                                ( n = `pressed` v = z2ui5_cl_util=>boolean_abap_2_json( pressed ) ) ) ).
  ENDMETHOD.

  METHOD token.

    result = me.
    _generic( name   = `Token`
              t_prop = VALUE #( ( n = `key`      v = key )
                                ( n = `text`     v = text )
                                ( n = `selected` v = selected )
                                ( n = `visible`  v = visible )
                                ( n = `editable`  v = editable ) ) ).
  ENDMETHOD.

  METHOD tokens.

    result = _generic( name = `tokens`
                       ns   = ns ).

  ENDMETHOD.

  METHOD toolbar.
    DATA(lv_name) = COND #(
        WHEN ns = 'table' THEN 'toolbar'
        WHEN ns = 'form'  THEN 'toolbar'
        ELSE                   `Toolbar` ).
    result = _generic( name   = lv_name
                       ns     = ns
                       t_prop = VALUE #( ( n = `active`  v = z2ui5_cl_util=>boolean_abap_2_json( active ) )
                                         ( n = `ariaHasPopup`  v = ariahaspopup )
                                         ( n = `design`  v = design )
                                         ( n = `enabled`  v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `height`  v = height )
                                         ( n = `style`  v = style )
                                         ( n = `width`  v = width )
                                         ( n = `id`  v = id )
                                         ( n = `press`  v = press ) ) ).

  ENDMETHOD.

  METHOD toolbar_spacer.

    result = me.
    _generic( name   = `ToolbarSpacer`
              ns     = ns
              t_prop = VALUE #( ( n = `width`     v = width ) ) ).
  ENDMETHOD.

  METHOD tool_header.

    result = _generic( name = `ToolHeader`
                       ns   = `tnt` ).

  ENDMETHOD.

  METHOD tool_page.
    result = _generic( name = `ToolPage`
                       ns   = `tnt` ).
  ENDMETHOD.

  METHOD total_horizon.
    result = _generic( name = `totalHorizon`
                       ns   = `axistime` ).
  ENDMETHOD.

  METHOD tree.
    result = _generic(
                 name   = `Tree`
                 t_prop = VALUE #(
                     ( n = `id`               v = id )
                     ( n = `items`            v = items )
                     ( n = `headerText`       v = headertext )
                     ( n = `footerText`       v = footertext )
                     ( n = `mode`             v = mode )
                     ( n = `toggleOpenState`  v = toggleopenstate )
                     ( n = `width`            v = width )
                     ( n = `selectionChange`            v = selectionchange )
                     ( n = `itemPress`            v = itempress )
                     ( n = `select`            v = select )
                     ( n = `multiSelectMode`            v = multiselectmode )
                     ( n = `noDataText`            v = nodatatext )
                     ( n = `headerLevel`            v = headerlevel )
                     ( n = `includeItemInSelection`  v = z2ui5_cl_util=>boolean_abap_2_json( includeiteminselection ) )
                     ( n = `showNoData`  v = z2ui5_cl_util=>boolean_abap_2_json( shownodata ) )
                     ( n = `inset`  v = z2ui5_cl_util=>boolean_abap_2_json( inset ) )
                   ) ).

  ENDMETHOD.

  METHOD tree_column.

    result = _generic( name   = `Column`
                       ns     = `table`
                       t_prop = VALUE #( ( n = `label`      v = label )
                                         ( n = `template`   v = template )
                                         ( n = `hAlign`     v = halign ) ) ).

  ENDMETHOD.

  METHOD tree_columns.

    result = _generic( name = `columns`
                       ns   = `table` ).

  ENDMETHOD.

  METHOD tree_table.

    result = _generic(
                 name   = `TreeTable`
                 ns     = `table`
                 t_prop = VALUE #(
                     ( n = `rows`                    v = rows )
                     ( n = `selectionMode`           v = selectionmode )
                     ( n = `enableColumnReordering`  v = z2ui5_cl_util=>boolean_abap_2_json( enablecolumnreordering ) )
                     ( n = `expandFirstLevel`        v = z2ui5_cl_util=>boolean_abap_2_json( expandfirstlevel ) )
                     ( n = `columnSelect`            v = columnselect )
                     ( n = `rowSelectionChange`      v = rowselectionchange )
                     ( n = `selectionBehavior`       v = selectionbehavior )
                     ( n = `id`                      v = id )
                     ( n = `alternateRowColors`      v = z2ui5_cl_util=>boolean_abap_2_json( alternaterowcolors ) )
                     ( n = `columnHeaderVisible`      v = z2ui5_cl_util=>boolean_abap_2_json( columnheadervisible ) )
                     ( n = `enableCellFilter`      v = z2ui5_cl_util=>boolean_abap_2_json( enablecellfilter ) )
                     ( n = `enableColumnFreeze`      v = z2ui5_cl_util=>boolean_abap_2_json( enablecolumnfreeze ) )
                     ( n = `enableCustomFilter`      v = z2ui5_cl_util=>boolean_abap_2_json( enablecustomfilter ) )
                     ( n = `enableSelectAll`      v = z2ui5_cl_util=>boolean_abap_2_json( enableselectall ) )
                     ( n = `showNoData`      v = z2ui5_cl_util=>boolean_abap_2_json( shownodata ) )
                     ( n = `showOverlay`      v = z2ui5_cl_util=>boolean_abap_2_json( showoverlay ) )
                     ( n = `visible`      v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                     ( n = `columnHeaderHeight`           v = columnheaderheight )
                     ( n = `firstVisibleRow`           v = firstvisiblerow )
                     ( n = `fixedColumnCount`           v = fixedcolumncount )
                     ( n = `threshold`           v = threshold )
                     ( n = `width`           v = width )
                     ( n = `useGroupMode`           v = z2ui5_cl_util=>boolean_abap_2_json( usegroupmode ) )
                     ( n = `groupHeaderProperty`           v = groupheaderproperty )
                     ( n = `rowActionCount`           v = rowactioncount )
                     ( n = `selectedIndex`           v = selectedindex )
                     ( n = `rowHeight`           v = rowheight )
                     ( n = `fixedRowCount`           v = fixedrowcount )
                     ( n = `fixedBottomRowCount`           v = fixedbottomrowcount )
                     ( n = `minAutoRowCount`           v = minautorowcount )
                     ( n = `visibleRowCount`         v = visiblerowcount )
                     ( n = `toggleOpenState`         v = toggleopenstate )
                     ( n = `visibleRowCountMode`     v = visiblerowcountmode ) ) ).

  ENDMETHOD.

  METHOD tree_template.

    result = _generic( name = `template`
                       ns   = `table` ).

  ENDMETHOD.

  METHOD two_columns_layout.
    result = _generic( name = `TwoColumnsLayout`
                       ns   = `nglayout` ).
  ENDMETHOD.

  METHOD ui_column.
    result = _generic( name   = `Column`
                       ns     = 'table'
                       t_prop = VALUE #(
                           ( n = `id` v = id )
                           ( n = `width` v = width )
                           ( n = `showSortMenuEntry`    v = showsortmenuentry )
                           ( n = `sortProperty`         v = sortproperty )
                           ( n = `showFilterMenuEntry`  v = showfiltermenuentry )
                           ( n = `autoresizable`  v = z2ui5_cl_util=>boolean_abap_2_json( autoresizable ) )
                           ( n = `defaultFilterOperator` v = defaultfilteroperator )
                           ( n = `filterProperty` v = filterproperty )
                           ( n = `filterType` v = filtertype )
                           ( n = `hAlign` v = halign )
                           ( n = `minWidth` v = minwidth )
                           ( n = `resizable` v = z2ui5_cl_util=>boolean_abap_2_json( resizable ) )
                           ( n = `visible` v = visible ) ) ).
  ENDMETHOD.

  METHOD ui_columns.
    result = _generic( name = `columns`
                       ns   = 'table' ).
  ENDMETHOD.

  METHOD ui_custom_data.
    result = _generic( name = `customData`
                       ns   = 'table' ).
  ENDMETHOD.

  METHOD ui_extension.

    result = _generic( name = `extension`
                       ns   = 'table' ).
  ENDMETHOD.

  METHOD ui_row_action.
    result = _generic( name = `RowAction`
                       ns   = `table` ).
  ENDMETHOD.

  METHOD ui_row_action_item.
    result = _generic( name   = `RowActionItem`
                       ns     = `table`
                       t_prop = VALUE #( ( n = `icon`     v = icon )
                                         ( n = `text`     v = text )
                                         ( n = `type`     v = type )
                                         ( n = `press`    v = press )
                                         ( n = `visible`    v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD ui_row_action_template.
    result = _generic( name = `rowActionTemplate`
                       ns   = `table` ).
  ENDMETHOD.

  METHOD ui_table.

    result = _generic(
        name   = `Table`
        ns     = `table`
        t_prop = VALUE #(
            ( n = `rows`                      v = rows )
            ( n = `alternateRowColors`        v = z2ui5_cl_util=>boolean_abap_2_json( alternaterowcolors ) )
            ( n = `columnHeaderVisible`       v = columnheadervisible )
            ( n = `editable`                  v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
            ( n = `class`                     v = class )
            ( n = `enableCellFilter`          v = z2ui5_cl_util=>boolean_abap_2_json( enablecellfilter ) )
            ( n = `enableGrouping`            v = z2ui5_cl_util=>boolean_abap_2_json( enablegrouping ) )
            ( n = `enableSelectAll`           v = z2ui5_cl_util=>boolean_abap_2_json( enableselectall ) )
            ( n = `firstVisibleRow`           v = firstvisiblerow )
            ( n = `fixedBottomRowCount`       v = fixedbottomrowcount )
            ( n = `fixedColumnCount`          v = fixedcolumncount )
            ( n = `rowActionCount`            v = rowactioncount )
            ( n = `fixedRowCount`             v = fixedrowcount )
            ( n = `minAutoRowCount`           v = minautorowcount )
            ( n = `rowHeight`                 v = rowheight )
            ( n = `selectedIndex`             v = selectedindex )
            ( n = `selectionMode`             v = selectionmode )
            ( n = `selectionBehavior`         v = selectionbehavior )
            ( n = `showColumnVisibilityMenu`  v = z2ui5_cl_util=>boolean_abap_2_json( showcolumnvisibilitymenu ) )
            ( n = `showNoData`                v = z2ui5_cl_util=>boolean_abap_2_json( shownodata ) )
            ( n = `threshold`                 v = threshold )
            ( n = `visibleRowCount`           v = visiblerowcount )
            ( n = `visibleRowCountMode`       v = visiblerowcountmode )
            ( n = `footer`                    v = footer )
            ( n = `filter`                    v = filter )
            ( n = `sort`                      v = sort )
            ( n = `customFilter`              v = customfilter )
            ( n = `id`                        v = id )
            ( n = `fl:flexibility`            v = flex )
            ( n = `rowSelectionChange`        v = rowselectionchange )
            ( n = `rowMode`                   v = rowmode ) ) ).

  ENDMETHOD.

  METHOD ui_template.

    result = _generic( name = `template`
                       ns   = 'table' ).

  ENDMETHOD.

  METHOD upload_set.
    result = _generic(
                 name   = `UploadSet`
                 ns     = 'upload'
                 t_prop = VALUE #(
                     ( n = `id`                       v = id )
                     ( n = `instantUpload`            v = z2ui5_cl_util=>boolean_abap_2_json( instantupload ) )
                     ( n = `showIcons`                v = z2ui5_cl_util=>boolean_abap_2_json( showicons ) )
                     ( n = `uploadEnabled`            v = z2ui5_cl_util=>boolean_abap_2_json( uploadenabled ) )
                     ( n = `terminationEnabled`       v = z2ui5_cl_util=>boolean_abap_2_json( terminationenabled ) )
                     ( n = `uploadButtonInvisible`    v = z2ui5_cl_util=>boolean_abap_2_json( uploadbuttoninvisible ) )
                     ( n = `fileTypes`                v = filetypes )
                     ( n = `maxFileNameLength`        v = maxfilenamelength )
                     ( n = `maxFileSize`              v = maxfilesize )
                     ( n = `mediaTypes`               v = mediatypes )
                     ( n = `items`                    v = items )
                     ( n = `uploadUrl`                v = uploadurl )
                     ( n = `mode`                     v = mode )
                     ( n = `fileRenamed`              v = filerenamed )
                     ( n = `directory`                v = z2ui5_cl_util=>boolean_abap_2_json( directory ) )
                     ( n = `multiple`                 v = z2ui5_cl_util=>boolean_abap_2_json( multiple ) )
                     ( n = `dragDropDescription`      v = dragdropdescription )
                     ( n = `dragDropText`             v = dragdroptext )
                     ( n = `noDataText`               v = nodatatext )
                     ( n = `noDataDescription`        v = nodatadescription )
                     ( n = `noDataIllustrationType`   v = nodataillustrationtype )
                     ( n = `afterItemEdited`          v = afteritemedited )
                     ( n = `afterItemRemoved`         v = afteritemremoved )
                     ( n = `beforeItemAdded`          v = beforeitemadded )
                     ( n = `beforeItemEdited`         v = beforeitemedited )
                     ( n = `beforeItemRemoved`        v = beforeitemremoved )
                     ( n = `beforeUploadStarts`       v = beforeuploadstarts )
                     ( n = `beforeUploadTermination`  v = beforeuploadtermination )
                     ( n = `fileNameLengthExceeded`   v = filenamelengthexceeded )
                     ( n = `fileSizeExceeded`         v = filesizeexceeded )
                     ( n = `fileTypeMismatch`         v = filetypemismatch )
                     ( n = `itemDragStart`            v = itemdragstart )
                     ( n = `itemDrop`                 v = itemdrop )
                     ( n = `mediaTypeMismatch`        v = mediatypemismatch )
                     ( n = `uploadTerminated`         v = uploadterminated )
                     ( n = `uploadCompleted`          v = uploadcompleted )
                     ( n = `afterItemAdded`           v = afteritemadded )
                     ( n = `sameFilenameAllowed`      v = z2ui5_cl_util=>boolean_abap_2_json( samefilenameallowed ) )
                     ( n = `selectionChanged`         v = selectionchanged ) ) ).
  ENDMETHOD.

  METHOD upload_set_item.
    result = _generic( name   = `UploadSetItem`
                       ns     = 'upload'
                       t_prop = VALUE #( ( n = `fileName`      v = filename )
                                         ( n = `mediaType`     v = mediatype )
                                         ( n = `url`           v = url )
                                         ( n = `thumbnailUrl`  v = thumbnailurl )
                                         ( n = `markers`       v = markers )
                                         ( n = `enabledEdit`   v = z2ui5_cl_util=>boolean_abap_2_json( enablededit ) )
                                         ( n = `enabledRemove` v = z2ui5_cl_util=>boolean_abap_2_json( enabledremove ) )
                                         ( n = `selected`      v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                                         ( n = `visibleEdit`   v = z2ui5_cl_util=>boolean_abap_2_json( visibleedit ) )
                                         ( n = `visibleRemove` v = z2ui5_cl_util=>boolean_abap_2_json( visibleremove ) )
                                         ( n = `uploadState`   v = uploadstate )
                                         ( n = `uploadUrl`     v = uploadurl )
                                         ( n = `openPressed`   v = openpressed )
                                         ( n = `removePressed` v = removepressed )
                                         ( n = `statuses`      v = statuses ) ) ).
  ENDMETHOD.

  METHOD upload_set_toolbar_placeholder.
    result = _generic( name = `UploadSetToolbarPlaceholder`
                       ns   = `upload` ).
  ENDMETHOD.

  METHOD variant_item.

    result = _generic(
                 name   = `VariantItem`
                 ns     = `vm`
                 t_prop = VALUE #(
                     ( n = `executeOnSelection`      v = z2ui5_cl_util=>boolean_abap_2_json( executeonselection ) )
                     ( n = `global`                  v = z2ui5_cl_util=>boolean_abap_2_json( global ) )
                     ( n = `labelReadOnly`           v = z2ui5_cl_util=>boolean_abap_2_json( labelreadonly ) )
                     ( n = `lifecyclePackage`        v = lifecyclepackage )
                     ( n = `lifecycleTransportId`    v = lifecycletransportid )
                     ( n = `namespace`               v = namespace )
                     ( n = `readOnly`                v = readonly )
                     ( n = `executeOnSelect`         v = z2ui5_cl_util=>boolean_abap_2_json( executeonselect ) )
                     ( n = `author`                  v = author )
                     ( n = `changeable`              v = z2ui5_cl_util=>boolean_abap_2_json( changeable ) )
                     ( n = `enabled`                 v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                     ( n = `favorite`                v = z2ui5_cl_util=>boolean_abap_2_json( favorite ) )
                     ( n = `key`                     v = key )
                     ( n = `text`                    v = text )
                     ( n = `title`                   v = title )
                     ( n = `textDirection`           v = textdirection )
                     ( n = `originalTitle`           v = originaltitle )
                     ( n = `originalExecuteOnSelect` v = z2ui5_cl_util=>boolean_abap_2_json( originalexecuteonselect ) )
                     ( n = `remove`                  v = z2ui5_cl_util=>boolean_abap_2_json( remove ) )
                     ( n = `rename`                  v = z2ui5_cl_util=>boolean_abap_2_json( rename ) )
                     ( n = `originalFavorite`        v = z2ui5_cl_util=>boolean_abap_2_json( originalfavorite ) )
                     ( n = `sharing`                 v = z2ui5_cl_util=>boolean_abap_2_json( sharing ) )
                     ( n = `change`                  v = change ) ) ).

  ENDMETHOD.

  METHOD variant_items.

    result = _generic( name = `variantItems`
                       ns   = `vm` ).

  ENDMETHOD.

  METHOD variant_item_sapm.
    result = _generic(
        name   = `VariantItem`
        t_prop = VALUE #( ( n = `id`       v = id )
                          ( n = `author`    v = author )
                          ( n = `changeable`     v = z2ui5_cl_util=>boolean_abap_2_json( changeable ) )
                          ( n = `enabled`     v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                          ( n = `favorite`     v = z2ui5_cl_util=>boolean_abap_2_json( favorite ) )
                          ( n = `remove`     v = z2ui5_cl_util=>boolean_abap_2_json( remove ) )
                          ( n = `rename`     v = z2ui5_cl_util=>boolean_abap_2_json( rename ) )
                          ( n = `visible`     v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                          ( n = `contexts` v = contexts )
                          ( n = `key`    v = key )
                          ( n = `sharing`    v = sharing )
                          ( n = `text`    v = text )
                          ( n = `textDirection`    v = textdirection )
                          ( n = `title`    v = title )
                          ( n = `executeOnSelect`  v = z2ui5_cl_util=>boolean_abap_2_json( executeonselect ) ) ) ).
  ENDMETHOD.

  METHOD variant_management.

    result = _generic(
                 name   = `VariantManagement`
                 ns     = `vm`
                 t_prop = VALUE #(
                     ( n = `defaultVariantKey`      v = defaultvariantkey )
                     ( n = `enabled`                v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                     ( n = `inErrorState`           v = z2ui5_cl_util=>boolean_abap_2_json( inerrorstate ) )
                     ( n = `initialSelectionKey`    v = initialselectionkey )
                     ( n = `lifecycleSupport`       v = z2ui5_cl_util=>boolean_abap_2_json( lifecyclesupport ) )
                     ( n = `selectionKey`           v = selectionkey )
                     ( n = `showCreateTile`         v = z2ui5_cl_util=>boolean_abap_2_json( showcreatetile ) )
                     ( n = `showExecuteOnSelection` v = z2ui5_cl_util=>boolean_abap_2_json( showexecuteonselection ) )
                     ( n = `showSetAsDefault`       v = z2ui5_cl_util=>boolean_abap_2_json( showsetasdefault ) )
                     ( n = `showShare`              v = z2ui5_cl_util=>boolean_abap_2_json( showshare ) )
                     ( n = `standardItemAuthor`     v = standarditemauthor )
                     ( n = `standardItemText`       v = standarditemtext )
                     ( n = `useFavorites`           v = z2ui5_cl_util=>boolean_abap_2_json( usefavorites ) )
                     ( n = `variantItems`           v = variantitems )
                     ( n = `manage`                 v = manage )
                     ( n = `save`                   v = save )
                     ( n = `select`                 v = select )
                     ( n = `id`                     v = id )
                     ( n = `variantCreationByUserAllowed` v = uservarcreate )
                     ( n = `visible`                v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).

  ENDMETHOD.

  METHOD variant_management_fl.
    result = _generic(
                 name   = `VariantManagement`
                 ns     = `flvm`
                 t_prop = VALUE #(
                     ( n = `displayTextForExecuteOnSelectionForStandardVariant`  v = displaytextfsv )
                     ( n = `editable`       v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                     ( n = `executeOnSelectionForStandardDefault`
                       v = z2ui5_cl_util=>boolean_abap_2_json( executeonselectionforstandflt ) )
                     ( n = `headerLevel`      v = headerlevel )
                     ( n = `inErrorState`      v = z2ui5_cl_util=>boolean_abap_2_json( inerrorstate ) )
                     ( n = `maxWidth`      v = maxwidth )
                     ( n = `modelName`      v = modelname )
                     ( n = `resetOnContextChange`      v = z2ui5_cl_util=>boolean_abap_2_json( resetoncontextchange ) )
                     ( n = `showSetAsDefault`      v = z2ui5_cl_util=>boolean_abap_2_json( showsetasdefault ) )
                     ( n = `titleStyle`      v = titlestyle )
                     ( n = `updateVariantInURL`    v = z2ui5_cl_util=>boolean_abap_2_json( updatevariantinurl ) )
                     ( n = `cancel`    v = cancel )
                     ( n = `initialized`    v = initialized )
                     ( n = `manage`    v = manage )
                     ( n = `save`    v = save )
                     ( n = `select`    v = select )
                     ( n = `for`  v = for ) ) ).
  ENDMETHOD.

  METHOD variant_management_sapm.
    result = _generic(
        name   = `VariantManagement`
        t_prop = VALUE #(
            ( n = `id`       v = id )
            ( n = `defaultKey`    v = defaultkey )
            ( n = `level`    v = level )
            ( n = `maxWidth`    v = maxwidth )
            ( n = `popoverTitle`    v = popovertitle )
            ( n = `selectedKey`    v = selectedkey )
            ( n = `titleStyle`    v = titlestyle )
            ( n = `cancel`    v = cancel )
            ( n = `manage`    v = manage )
            ( n = `manageCancel`    v = managecancel )
            ( n = `save`    v = save )
            ( n = `select`    v = select )
            ( n = `items`    v = items )
            ( n = `creationAllowed`     v = z2ui5_cl_util=>boolean_abap_2_json( creationallowed ) )
            ( n = `inErrorState`     v = z2ui5_cl_util=>boolean_abap_2_json( inerrorstate ) )
            ( n = `modified`     v = z2ui5_cl_util=>boolean_abap_2_json( modified ) )
            ( n = `showFooter`     v = z2ui5_cl_util=>boolean_abap_2_json( showfooter ) )
            ( n = `showSaveAs`     v = z2ui5_cl_util=>boolean_abap_2_json( showsaveas ) )
            ( n = `supportApplyAutomatically`     v = z2ui5_cl_util=>boolean_abap_2_json( supportapplyautomatically ) )
            ( n = `supportContexts`     v = z2ui5_cl_util=>boolean_abap_2_json( supportcontexts ) )
            ( n = `supportDefault`     v = z2ui5_cl_util=>boolean_abap_2_json( supportdefault ) )
            ( n = `supportFavorites`     v = z2ui5_cl_util=>boolean_abap_2_json( supportfavorites ) )
            ( n = `supportPublic`     v = z2ui5_cl_util=>boolean_abap_2_json( supportpublic ) )
            ( n = `visible`     v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                        ) ).

  ENDMETHOD.

  METHOD vbox.

    result = _generic(
        name   = `VBox`
        t_prop = VALUE #( ( n = `height`          v = height )
                          ( n = `id`  v = id )
                          ( n = `justifyContent`  v = justifycontent )
                          ( n = `renderType`      v = rendertype )
                          ( n = `alignContent`    v = aligncontent )
                          ( n = `alignItems`      v = alignitems )
                          ( n = `width`           v = width )
                          ( n = `wrap`            v = wrap )
                          ( n = `backgroundDesign`            v = backgrounddesign )
                          ( n = `direction`            v = direction )
                          ( n = `displayInline`            v = z2ui5_cl_util=>boolean_abap_2_json( displayinline ) )
                          ( n = `visible`            v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                          ( n = `fitContainer`            v = z2ui5_cl_util=>boolean_abap_2_json( fitcontainer ) )
                          ( n = `class`           v = class ) ) ).

  ENDMETHOD.

  METHOD vertical_layout.

    result = _generic( name   = `VerticalLayout`
                       ns     = `layout`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `visible`  v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                         ( n = `enabled`  v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                         ( n = `class`  v = class )
                                         ( n = `width`  v = width ) ) ).
  ENDMETHOD.

  METHOD view_settings_dialog.

    result = _generic( name   = `ViewSettingsDialog`
                       t_prop = VALUE #(
                           ( n = `confirm`                  v = confirm )
                           ( n = `cancel`                   v = cancel )
                           ( n = `filterDetailPageOpened`   v = filterdetailpageopened )
                           ( n = `reset`                    v = reset )
                           ( n = `resetFilters`             v = resetfilters )
                           ( n = `filterSearchOperator`     v = filtersearchoperator )
                           ( n = `groupDescending`          v = z2ui5_cl_util=>boolean_abap_2_json( groupdescending ) )
                           ( n = `sortDescending`           v = z2ui5_cl_util=>boolean_abap_2_json( sortdescending ) )
                           ( n = `title`                    v = title )
                           ( n = `selectedGroupItem`        v = selectedgroupitem )
                           ( n = `selectedPresetFilterItem` v = selectedpresetfilteritem )
                           ( n = `selectedSortItem`         v = selectedsortitem )
                           ( n = `selectedSortItem`         v = selectedsortitem )
                           ( n = `filterItems`              v = filteritems )
                           ( n = `sortItems`                v = sortitems )
                           ( n = `groupItems`               v = groupitems )
                           ( n = `titleAlignment`           v = titlealignment ) ) ).

  ENDMETHOD.

  METHOD view_settings_filter_item.
    result = _generic(
                 name   = `ViewSettingsFilterItem`
                 t_prop = VALUE #( ( n = `enabled`         v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                   ( n = `key`             v = key )
                                   ( n = `selected`        v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                                   ( n = `text`            v = text )
                                   ( n = `textDirection`   v = textdirection )
                                   ( n = `multiSelect`     v = z2ui5_cl_util=>boolean_abap_2_json( multiselect ) ) ) ).
  ENDMETHOD.

  METHOD view_settings_item.
    result = _generic( name   = `ViewSettingsItem`
                       t_prop = VALUE #( ( n = `enabled`         v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                                         ( n = `key`             v = key )
                                         ( n = `selected`        v = z2ui5_cl_util=>boolean_abap_2_json( selected ) )
                                         ( n = `text`            v = text )
                                         ( n = `textDirection`   v = textdirection ) ) ).

  ENDMETHOD.

  METHOD visible_horizon.
    result = _generic( name = `visibleHorizon`
                       ns   = `axistime` ).
  ENDMETHOD.

  METHOD vos.

    result = _generic( name = `vos`
                       ns   = `vbm` ).

  ENDMETHOD.

  METHOD wizard.
    result = _generic( name   = `Wizard`
                       t_prop = VALUE #(
                           ( n = `id`                   v = id )
                           ( n = `class`                v = class )
                           ( n = `backgroundDesign`     v = backgrounddesign )
                           ( n = `busy`                 v = z2ui5_cl_util=>boolean_abap_2_json( busy ) )
                           ( n = `busyIndicatorDelay`   v = busyindicatordelay )
                           ( n = `busyIndicatorSize`    v = busyindicatorsize )
                           ( n = `enableBranching`      v = z2ui5_cl_util=>boolean_abap_2_json( enablebranching ) )
                           ( n = `fieldGroupIds`        v = fieldgroupids )
                           ( n = `finishButtonText`     v = finishbuttontext )
                           ( n = `height`               v = height )
                           ( n = `renderMode`           v = rendermode )
                           ( n = `showNextButton`       v = z2ui5_cl_util=>boolean_abap_2_json( shownextbutton ) )
                           ( n = `stepTitleLevel`       v = steptitlelevel )
                           ( n = `visible`              v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                           ( n = `width`                v = width )
                           ( n = `complete`             v = complete )
                           ( n = `navigationChange`     v = navigationchange )
                           ( n = `stepActivate`         v = stepactivate ) ) ).

  ENDMETHOD.

  METHOD wizard_step.

    result = _generic( name   = `WizardStep`
                       t_prop = VALUE #(
                           (  n = `id`                   v = id )
                           (  n = `busy`                 v = z2ui5_cl_util=>boolean_abap_2_json( busy ) )
                           (  n = `busyIndicatorDelay`   v = busyindicatordelay )
                           (  n = `busyIndicatorSize`    v = busyindicatorsize )
                           (  n = `fieldGroupIds`        v = fieldgroupids )
                           (  n = `icon`                 v = icon )
                           (  n = `optional`             v = z2ui5_cl_util=>boolean_abap_2_json( optional ) )
                           (  n = `title`                v = title )
                           (  n = `validated`            v = z2ui5_cl_util=>boolean_abap_2_json( validated ) )
                           (  n = `visible`              v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                           (  n = `activate`             v = activate )
                           (  n = `complete`             v = complete )
                           (  n = `nextStep`             v = nextstep )
                           (  n = `subsequentSteps`      v = subsequentsteps ) ) ).
  ENDMETHOD.

  METHOD xml_get.

    CASE mv_name.
      WHEN `ZZPLAIN`.
        result = mt_prop[ n = `VALUE` ]-v.
        RETURN.
      WHEN OTHERS.
    ENDCASE.

    IF me = mo_root.

      DATA lt_prop TYPE HASHED TABLE OF z2ui5_if_types=>ty_s_name_value WITH UNIQUE KEY n.
      lt_prop = VALUE #(
          ( n = `z2ui5`             v = `z2ui5` )
          ( n = `layout`            v = `sap.ui.layout` )
          ( n = `networkgraph`      v = `sap.suite.ui.commons.networkgraph` )
          ( n = `nglayout`          v = `sap.suite.ui.commons.networkgraph.layout` )
          ( n = `ngcustom`          v = `sap.suite.ui.commons.sample.NetworkGraphCustomRendering` )
          ( n = `table`             v = `sap.ui.table` )
          ( n = `template`          v = `http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1` )
          ( n = `customData`        v = `http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1` )
          ( n = `f`                 v = `sap.f` )
          ( n = `columnmenu`        v = `sap.m.table.columnmenu` )
          ( n = `card`              v = `sap.f.cards` )
          ( n = `dnd`               v = `sap.ui.core.dnd` )
          ( n = `dnd-grid`          v = `sap.f.dnd` )
          ( n = `grid`              v = `sap.ui.layout.cssgrid` )
          ( n = `form`              v = `sap.ui.layout.form` )
          ( n = `editor`            v = `sap.ui.codeeditor` )
          ( n = `mchart`            v = `sap.suite.ui.microchart` )
          ( n = `smartFilterBar`    v = `sap.ui.comp.smartfilterbar` )
          ( n = `smartVariantManagement`    v = `sap.ui.comp.smartvariants` )
          ( n = `smartTable`        v = `sap.ui.comp.smarttable` )
          ( n = `webc`              v = `sap.ui.webc.main` )
          ( n = `uxap`              v = `sap.uxap` )
          ( n = `sap`               v = `sap` )
          ( n = `text`              v = `sap.ui.richtexteditor` )
          ( n = `html`              v = `http://www.w3.org/1999/xhtml` )
*          ( n = `unified`           v = `sap.ui.unified` )
          ( n = `fb`                v = `sap.ui.comp.filterbar` )
          ( n = `u`                 v = `sap.ui.unified` )
          ( n = `gantt`             v = `sap.gantt.simple` )
          ( n = `axistime`          v = `sap.gantt.axistime` )
          ( n = `config`            v = `sap.gantt.config` )
          ( n = `shapes`            v = `sap.gantt.simple.shapes` )
          ( n = `commons`           v = `sap.suite.ui.commons` )
          ( n = `si`                v = `sap.suite.ui.commons.statusindicator` )
          ( n = `vm`                v = `sap.ui.comp.variants` )
          ( n = `viz`               v = `sap.viz.ui5.controls` )
          ( n = `viz.data`          v = `sap.viz.ui5.data` )
          ( n = `viz.feeds`         v = `sap.viz.ui5.controls.common.feeds` )
          ( n = `vk`                v = `sap.ui.vk` )
          ( n = `vbm`               v = `sap.ui.vbm` )
          ( n = `ndc`               v = `sap.ndc` )
          ( n = `svm`               v = `sap.ui.comp.smartvariants` )
          ( n = `flvm`              v = `sap.ui.fl.variants` )
          ( n = `p13n`              v = `sap.m.p13n` )
          ( n = `upload`            v = `sap.m.upload` )
          ( n = `fl`                v = `sap.ui.fl` )
          ( n = `plugins`           v = `sap.m.plugins` )
          ( n = `tnt`               v = `sap.tnt` )
          ( n = `mdc`               v = `sap.ui.mdc` )
          ( n = `trm`               v = `sap.ui.table.rowmodes` )
          ( n = `smi`               v = `sap.ui.comp.smartmultiinput` ) ).

      LOOP AT mt_ns REFERENCE INTO DATA(lr_ns) WHERE     table_line IS NOT INITIAL
                                                     AND table_line <> `mvc`
                                                     AND table_line <> `core`.
        TRY.
            DATA(ls_prop) = lt_prop[ n = lr_ns->* ].
            INSERT VALUE #( n = |xmlns:{ ls_prop-n }|
                            v = ls_prop-v ) INTO TABLE mt_prop.
          CATCH cx_root.
            z2ui5_cl_util=>x_raise( |XML_VIEW_ERROR_NO_NAMESPACE_FOUND_FOR:  { lr_ns->* }| ).
        ENDTRY.
      ENDLOOP.

    ENDIF.

    DATA(lv_tmp2) = COND #( WHEN mv_ns <> `` THEN |{ mv_ns }:| ).
    DATA(lv_tmp3) = REDUCE #( INIT val = `` FOR row IN mt_prop WHERE ( v <> `` )
                          NEXT val = |{ val } { row-n }="{ escape( val    = COND string( WHEN row-v = abap_true
                                                                                         THEN `true`
                                                                                         ELSE row-v )
                                                                   format = cl_abap_format=>e_xml_attr ) }"| ).

    result = |{ result } <{ lv_tmp2 }{ mv_name }{ lv_tmp3 }|.

    IF mt_child IS INITIAL.
      result = |{ result }/>|.
      RETURN.
    ENDIF.

    result = |{ result }>|.

    LOOP AT mt_child INTO DATA(lr_child).
      result = result && CAST z2ui5_cl_xml_view( lr_child )->xml_get( ).
    ENDLOOP.

    DATA(lv_ns) = COND #( WHEN mv_ns <> || THEN |{ mv_ns }:| ).
    result = |{ result }</{ lv_ns }{ mv_name }>|.

  ENDMETHOD.

  METHOD _cc_plain_xml.

    result = me.
    _generic( name   = `ZZPLAIN`
              t_prop = VALUE #( ( n = `VALUE` v = val ) ) ).

  ENDMETHOD.

  METHOD _generic.

    TRY.
        INSERT CONV #( ns ) INTO TABLE mo_root->mt_ns.
      CATCH cx_root.
    ENDTRY.

    DATA(result2) = NEW z2ui5_cl_xml_view( ).
    result2->mv_name   = name.
    result2->mv_ns     = ns.
    result2->mt_prop   = t_prop.
    result2->mo_parent = me.
    result2->mo_root   = mo_root.
    INSERT result2 INTO TABLE mt_child.

    mo_root->mo_previous = result2.
    result = result2.

  ENDMETHOD.

  METHOD _generic_property.

    INSERT val INTO TABLE mt_prop.
    result = me.

  ENDMETHOD.

  METHOD _z2ui5.

    result = NEW #( me ).

  ENDMETHOD.

  METHOD p_cell_selector.

    result = me.
    _generic( name   = `CellSelector`
              ns     = `plugins`
              t_prop = VALUE #( ( n = `id` v = id ) ) ).

  ENDMETHOD.

  METHOD p_copy_provider.

    result = me.
    _generic( name   = `CopyProvider`
              ns     = `plugins`
              t_prop = VALUE #( ( n = `id` v = id )
                                ( n = `copy` v = copy )
                                ( n = `extractData` v = extract_data )
                ) ).

  ENDMETHOD.

  METHOD date_range_selection.
    result = me.
    _generic( name   = `DateRangeSelection`
              t_prop = VALUE #(
                  ( n = `value`                 v = value )
                  ( n = `displayFormat`         v = displayformat )
                  ( n = `displayFormatType`         v = displayformattype )
                  ( n = `valueFormat`           v = valueformat )
                  ( n = `required`              v = z2ui5_cl_util=>boolean_abap_2_json( required ) )
                  ( n = `valueState`            v = valuestate )
                  ( n = `valueStateText`        v = valuestatetext )
                  ( n = `placeholder`           v = placeholder )
                  ( n = `textAlign`                v = textalign )
                  ( n = `textDirection`                v = textdirection )
                  ( n = `change`                v = change )
                  ( n = `maxDate`               v = maxdate )
                  ( n = `minDate`               v = mindate )
                  ( n = `width`               v = width )
                  ( n = `id`               v = id )
                  ( n = `dateValue`               v = datevalue )
                  ( n = `secondDateValue`         v = seconddatevalue )
                  ( n = `name`               v = name )
                  ( n = `class`               v = class )
                  ( n = `calendarWeekNumbering`               v = calendarweeknumbering )
                  ( n = `initialFocusedDateValue`               v = initialfocuseddatevalue )
                  ( n = `enabled`               v = z2ui5_cl_util=>boolean_abap_2_json( enabled ) )
                  ( n = `visible`               v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                  ( n = `editable`              v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                  ( n = `hideInput`             v = z2ui5_cl_util=>boolean_abap_2_json( hideinput ) )
                  ( n = `showFooter`            v = z2ui5_cl_util=>boolean_abap_2_json( showfooter ) )
                  ( n = `showValueStateMessage` v = z2ui5_cl_util=>boolean_abap_2_json( showvaluestatemessage ) )
                  ( n = `showCurrentDateButton` v = z2ui5_cl_util=>boolean_abap_2_json( showcurrentdatebutton ) )
                  ( n = `delimiter` v = delimiter ) ) ).
  ENDMETHOD.

  METHOD toolbar_layout_data.
    result = _generic(
                 name   = `ToolbarLayoutData`
                 t_prop = VALUE #( ( n = `id`            v = id )
                                   ( n = `maxWidth`      v = maxwidth )
                                   ( n = `minWidth`      v = minwidth )
                                   ( n = `shrinkable`    v = z2ui5_cl_util=>boolean_abap_2_json( shrinkable ) ) ) ).
  ENDMETHOD.

  METHOD feed_content.
    result = _generic( name   = `FeedContent`
                       t_prop = VALUE #( ( n = `contentText`    v = contenttext )
                                         ( n = `subheader`      v = subheader )
                                         ( n = `value`          v = value )
                                         ( n = `class`          v = class )
                                         ( n = `press`          v = press ) ) ).

  ENDMETHOD.

  METHOD news_content.
    result = _generic( name   = `NewsContent`
                       t_prop = VALUE #( ( n = `contentText`    v = contenttext )
                                         ( n = `subheader`      v = subheader )
                                         ( n = `press`          v = press ) ) ).

  ENDMETHOD.

  METHOD splitter.
    result = _generic( name   = `Splitter`
                       ns     = `layout`
                       t_prop = VALUE #( ( n = `height`       v = height )
                                         ( n = `orientation`  v = orientation )
                                         ( n = `width`        v = width ) ) ).
  ENDMETHOD.

  METHOD invisible_text.
    result = _generic( ns     = ns
                       name   = `InvisibleText`
                       t_prop = VALUE #( ( n = `id`       v = id )
                                         ( n = `text`        v = text ) ) ).
  ENDMETHOD.

  METHOD fix_content.
    result = _generic( ns   = ns
                       name = `fixContent` ).
  ENDMETHOD.

  METHOD fix_flex.

    result = _generic( ns     = ns
                       name   = `FixFlex`
                       t_prop = VALUE #( ( n = `class`           v = class )
                                         ( n = `fixContentSize`  v = fixcontentsize ) ) ).
  ENDMETHOD.

  METHOD flex_content.
    result = _generic( ns   = ns
                       name = `flexContent` ).
  ENDMETHOD.

  METHOD side_navigation.

    result = _generic( name   = `SideNavigation`
                       ns     = `tnt`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `class` v = class )
                                         ( n = `selectedKey`  v = selectedkey ) ) ).

  ENDMETHOD.

  METHOD navigation_list.

    result = _generic( name = `NavigationList`
                       ns   = `tnt` ).

  ENDMETHOD.

  METHOD navigation_list_item.

    result = me.
    _generic( name   = `NavigationListItem`
              ns     = `tnt`
              t_prop = VALUE #( ( n = `text`  v = text )
                                ( n = `icon`  v = icon )
                                ( n = `href`  v = href )
                                ( n = `key`   v = key )
                                ( n = `select`  v = select ) ) ).

  ENDMETHOD.

  METHOD fixed_item.

    result = _generic( name = `fixedItem`
                       ns   = `tnt` ).

  ENDMETHOD.

  METHOD content_areas.
    result = _generic( name = `contentAreas`
                       ns   = ns ).
  ENDMETHOD.

  METHOD field.
    result = _generic(
        name   = `Field`
        ns     = ns
        t_prop = VALUE #( ( n = `id`        v = id )
                          ( n = `value`     v = value )
                          ( n = `editMode`  v = editmode )
                          ( n = `showEmptyIndicator`  v = z2ui5_cl_util=>boolean_abap_2_json( showemptyindicator ) ) ) ).
  ENDMETHOD.

  METHOD color_picker.

    result = me.
    _generic( ns     = `u`
              name   = `ColorPicker`
              t_prop = VALUE #( ( n = `colorString`       v = colorstring )
                                ( n = `displayMode`        v = displaymode )
                                ( n = `change`             v = change )
                                ( n = `liveChange`        v = livechange ) ) ).

  ENDMETHOD.

  METHOD tiles.
    result = _generic( `tiles` ).
  ENDMETHOD.

  METHOD analytical_column.
    result = _generic( ns   = ns
                       name = `AnalyticalColumn` ).
  ENDMETHOD.

  METHOD analytical_table.
    result = _generic( name   = `AnalyticalTable`
                       ns     = ns
                       t_prop = VALUE #( ( n = `selectionMode`              v = selectionmode )
                                         ( n = `rowMode`                    v = rowmode )
                                         ( n = `toolbar`                    v = toolbar )
                                         ( n = `columns`                    v = columns ) ) ).
  ENDMETHOD.

  METHOD auto.
    result = _generic( ns     = ns
                       name   = `Auto`
                       t_prop = VALUE #( ( n = `rowContentHeight`           v = rowcontentheight ) ) ).
  ENDMETHOD.

  METHOD rowmode.
    result = _generic( name = `rowMode`
                       ns   = ns ).
  ENDMETHOD.

  METHOD breadcrumbs.
    result = _generic( ns     = ns
                       name   = `Breadcrumbs`
                       t_prop = VALUE #( ( n = `link`                    v = link )
                                         ( n = `id`                      v = id )
                                         ( n = `class`                   v = class )
                                         ( n = `currentLocationText`     v = currentlocationtext )
                                         ( n = `separatorStyle`          v = separatorStyle )
                                         ( n = `visible`                 v = z2ui5_cl_util=>boolean_abap_2_json( visible ) ) ) ).
  ENDMETHOD.

  METHOD current_location.
    result = _generic( ns     = ns
                       name   = `currentLocation`
                       t_prop = VALUE #( ( n = `link`           v = link ) ) ).
  ENDMETHOD.

  METHOD color_palette.
    result = _generic( ns     = ns
                       name   = `ColorPalette`
                       t_prop = VALUE #( ( n = `colorSelect`           v = colorselect ) ) ).
  ENDMETHOD.

  METHOD HarveyBallMicroChartItem.

    result = _generic( name   = `HarveyBallMicroChartItem`
                       ns     = `mchart`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `class`  v = class )
                                         ( n = `fraction`  v = fraction )
                                         ( n = `color`  v = color )
                                         ( n = `fractionScale` v = fractionScale ) ) ).
  ENDMETHOD.

  METHOD smart_filter_bar.

    result = _generic( name   = `SmartFilterBar`
                       ns     = `smartFilterBar`
                       t_prop = VALUE #( ( n = `id`  v = id )
                                         ( n = `entitySet`  v = entitySet )
                                         ( n = `persistencyKey`  v = persistencyKey ) ) ).

  ENDMETHOD.

  METHOD control_configuration.

    result = me.
    _generic( name   = `ControlConfiguration`
                        ns     = `smartFilterBar`
                        t_prop = VALUE #( ( n = `id`  v = id )
                                          ( n = `key`  v = key )
                                          ( n = `visibleInAdvancedArea`  v = z2ui5_cl_util=>boolean_abap_2_json( visibleInAdvancedArea ) )
                                          ( n = `preventInitialDataFetchInValueHelpDialog`  v = z2ui5_cl_util=>boolean_abap_2_json( prevInitDataFetchInValHelpDia ) )
                                          ) ).

  ENDMETHOD.

  METHOD smart_table.

    result = _generic( name   = `SmartTable`
                        ns     = `smartTable`
                        t_prop = VALUE #(
                        ( n = `id`  v = id )
                        ( n = `smartFilterId`  v = smartFilterId )
                                          ( n = `tableType`  v = tableType )
                                          ( n = `editable`  v = z2ui5_cl_util=>boolean_abap_2_json( editable ) )
                                          ( n = `initiallyVisibleFields`  v = initiallyVisibleFields )
                                          ( n = `entitySet`  v = entitySet )
                                          ( n = `useVariantManagement`  v = z2ui5_cl_util=>boolean_abap_2_json( useVariantManagement ) )
                                          ( n = `useExportToExcel`  v = z2ui5_cl_util=>boolean_abap_2_json( useExportToExcel ) )
                                          ( n = `useTablePersonalisation`  v = z2ui5_cl_util=>boolean_abap_2_json( useTablePersonalisation ) )
                                          ( n = `header`  v = header )
                                          ( n = `showRowCount`  v =  z2ui5_cl_util=>boolean_abap_2_json( showRowCount ) )
                                          ( n = `enableExport`  v =  z2ui5_cl_util=>boolean_abap_2_json( enableExport ) )
                                          ( n = `enableAutoBinding`  v =  z2ui5_cl_util=>boolean_abap_2_json( enableAutoBinding ) )
                                          ) ).

  ENDMETHOD.

  METHOD _control_configuration.

    result = _generic( name   = `controlConfiguration`
                        ns     = `smartFilterBar`
                      ).

  ENDMETHOD.

  METHOD viz_dataset.
    result = _generic( name   = 'dataset'
                       ns     = 'viz' ).
  ENDMETHOD.
  METHOD viz_dimensions.
    result = _generic( name   = 'dimensions'
                       ns     = 'viz.data' ).
  ENDMETHOD.
  METHOD viz_dimension_definition.
    result = _generic( name   = 'DimensionDefinition'
                       ns     = 'viz.data'
                       t_prop = VALUE #(  ( n = `axis`          v = axis )
                                          ( n = `dataType`      v = datatype )
                                          ( n = `displayValue`  v = displayvalue )
                                          ( n = `identity`      v = identity )
                                          ( n = `name`          v = name )
                                          ( n = `sorter`        v = sorter )
                                          ( n = `value`         v = value ) ) ).
  ENDMETHOD.
  METHOD viz_feeds.
    result = _generic( name   = 'feeds'
                       ns     = 'viz' ).
  ENDMETHOD.
  METHOD viz_feed_item.
    result = _generic( name   = 'FeedItem'
                       ns     = 'viz.feeds'
                       t_prop = VALUE #(  ( n = `id`      v = id )
                                          ( n = `uid`     v = uid )
                                          ( n = `type`    v = type )
                                          ( n = `values ` v = values ) ) ).
  ENDMETHOD.
  METHOD viz_flattened_dataset.
    result = _generic( name   = 'FlattenedDataset'
                       ns     = 'viz.data'
                       t_prop = VALUE #( ( n = `data` v = data ) ) ).
  ENDMETHOD.
  METHOD viz_frame.
    DATA(lv_vizproperties) = ``.
    IF vizproperties IS INITIAL.
      lv_vizproperties = `{` && |\n|  &&
      `"plotArea": {` && |\n|  &&
          `"dataLabel": {` && |\n|  &&
              `"formatString": "",` && |\n|  &&
              `"visible": false` && |\n|  &&
          `}` && |\n|  &&
      `},` && |\n|  &&
      `"valueAxis": {` && |\n|  &&
          `"label": {` && |\n|  &&
              `"formatString": ""` && |\n|  &&
          `},` && |\n|  &&
          `"title": {` && |\n|  &&
              `"visible": false` && |\n|  &&
          `}` && |\n|  &&
      `},` && |\n|  &&
      `"categoryAxis": {` && |\n|  &&
          `"title": {` && |\n|  &&
              `"visible": false` && |\n|  &&
          `}` && |\n|  &&
      `},` && |\n|  &&
      `"title": {` && |\n|  &&
          `"visible": false,` && |\n|  &&
          `"text": ""` && |\n|  &&
      `}` && |\n|  &&
  `}`.
    ELSE.
      lv_vizproperties = vizproperties.
    ENDIF.

    result = _generic(  name   = 'VizFrame'
                        ns     = 'viz'
                        t_prop = VALUE #( ( n = `id`                v = id )
                                          ( n = `legendVisible`     v = legendvisible )
                                          ( n = `vizCustomizations` v = vizcustomizations )
                                          ( n = `vizProperties`     v = lv_vizproperties )
                                          ( n = `vizScales`         v = vizscales )
                                          ( n = `vizType`           v = viztype )
                                          ( n = `height`            v = height )
                                          ( n = `width`             v = width )
                                          ( n = `uiConfig`          v = uiconfig )
                                          ( n = `visible`           v = z2ui5_cl_util=>boolean_abap_2_json( visible ) )
                                          ( n = `selectData`        v = selectdata ) ) ).

  ENDMETHOD.
  METHOD viz_measures.
    result = _generic( name   = 'measures'
                       ns     = 'viz.data' ).
  ENDMETHOD.

  METHOD viz_measure_definition.
    result = _generic( name   = 'MeasureDefinition'
                       ns     = 'viz.data'
                       t_prop = VALUE #(  ( n = `format`    v = format )
                                          ( n = `group`     v = group )
                                          ( n = `identity`  v = identity )
                                          ( n = `name`      v = name )
                                          ( n = `range`     v = range )
                                          ( n = `unit`      v = unit )
                                          ( n = `value`     v = value ) ) ).
  ENDMETHOD.

  METHOD smart_multi_input.

    result = _generic( name   = 'SmartMultiInput'
                       ns     = 'smi'
                       t_prop = VALUE #( ( n = 'id'                   v = id )
                                         ( n = 'value'                v = value )
                                         ( n = 'entitySet'            v = entityset )
                                         ( n = 'supportRanges'        v = supportranges )
                                         ( n = 'enableODataSelect'    v = enableodataselect )
                                         ( n = 'requestAtLeastFields' v = requestatleastfields )
                                         ( n = 'singleTokenMode'      v = singletokenmode )
                                         ( n = 'supportMultiSelect'   v = supportmultiselect )
                                         ( n = 'textSeparator'        v = textseparator )
                                         ( n = 'textLabel'            v = textlabel )
                                         ( n = 'tooltipLabel'         v = tooltiplabel )
                                         ( n = 'textInEditModeSource' v = textineditmodesource )
                                         ( n = 'mandatory'         v = mandatory )
                                         ( n = 'maxLength'         v = maxlength ) ) ).

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_http_handler IMPLEMENTATION.

  METHOD main.

    ms_config = s_config.

    set_request( ).

    CASE ms_req-method.
      WHEN `HEAD`.
        mo_server->set_session_stateful( 0 ).
        RETURN.
      WHEN OTHERS.
        ms_res = _main( is_req    = ms_req
                        is_config = ms_config ).
    ENDCASE.

    set_response( ).

  ENDMETHOD.

  METHOD factory.

    result = NEW #( ).

    IF server IS BOUND.
      result->mo_server = z2ui5_cl_util_abap_http=>factory( server ).
    ELSEIF req IS BOUND AND res IS BOUND.
      result = factory_cloud( req = req
                              res = res ).
    ELSE.
      ASSERT 1 = `EMPTY_HTTP_HANDLER_CALL_ERROR`.
    ENDIF.

  ENDMETHOD.

  METHOD factory_cloud.

    result = NEW #( ).
    result->mo_server = z2ui5_cl_util_abap_http=>factory_cloud( req = req
                                                               res = res ).

  ENDMETHOD.

  METHOD _http_get.

    IF is_config-title IS INITIAL.
      is_config-title = `abap2UI5`.
    ENDIF.

    IF is_config-theme IS INITIAL.
      is_config-theme = `sap_horizon`.
    ENDIF.

    IF is_config-src IS INITIAL.
      is_config-src = `https://sdk.openui5.org/resources/sap-ui-cachebuster/sap-ui-core.js`.
*      ms_req_config-src     = `https://sdk.openui5.org/1.71.67/resources/sap-ui-core.js`.
*      ms_req_config-src     = `https://sdk.openui5.org/nightly/2/resources/sap-ui-core.js`.
    ENDIF.

    IF is_config-content_security_policy IS INITIAL.
      is_config-content_security_policy = |<meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' 'unsafe-eval' data: | &&
     |ui5.sap.com *.ui5.sap.com sapui5.hana.ondemand.com *.sapui5.hana.ondemand.com openui5.hana.ondemand.com *.openui5.hana.ondemand.com | &&
     |sdk.openui5.org *.sdk.openui5.org cdn.jsdelivr.net *.cdn.jsdelivr.net cdnjs.cloudflare.com *.cdnjs.cloudflare.com schemas *.schemas; worker-src 'self' blob:; "/>|.
    ENDIF.

    IF is_config-styles_css IS INITIAL.
      DATA(lv_style_css) = z2ui5_cl_app_style_css=>get( ).
    ELSE.
      lv_style_css = is_config-styles_css.
    ENDIF.

    result = |<!DOCTYPE html>| && |\n| &&
               |<html lang="en">| && |\n| &&
               |<head>| && |\n| &&
                  |{ is_config-content_security_policy }\n| &&
               |    <meta charset="UTF-8">| && |\n| &&
               |    <meta name="viewport" content="width=device-width, initial-scale=1.0">| && |\n| &&
               |    <meta http-equiv="X-UA-Compatible" content="IE=edge">| && |\n| &&
                | <title> { is_config-title }</title> \n| &&
                | <style>        html, body, body > div, #container, #container-uiarea \{\n| &
                |            height: 100%;\n| &
                |        \}</style> \n| &&
                |<script>| && |\n| &&
             |  function onInitComponent()\{| && |\n| &&
             |    sap.ui.require.preload(\{| && |\n| &&
             |      "z2ui5/css/style.css": '{ lv_style_css }',| && |\n| &&
             |      "z2ui5/manifest.json": '{ z2ui5_cl_app_manifest_json=>get( ) }',| && |\n| &&
             |      "z2ui5/Component.js": function()\{{ z2ui5_cl_app_component_js=>get( ) }{ is_config-custom_js }\},| && |\n| &&
             |      "z2ui5/model/models.js": function()\{{  z2ui5_cl_app_models_js=>get( ) }\},| && |\n| &&
             |      "z2ui5/view/App.view.xml": '{ z2ui5_cl_app_app_xml=>get( ) }',| && |\n| &&
             |      "z2ui5/controller/App.controller.js": function()\{{ z2ui5_cl_app_app_js=>get( ) }\},| && |\n| &&
             |      "z2ui5/view/View1.view.xml": '{ z2ui5_cl_app_view1_xml=>get( ) }',| && |\n| &&
             |      "z2ui5/controller/View1.controller.js": function()\{{ z2ui5_cl_app_view1_js=>get( ) }\},| && |\n| &&
             |      "z2ui5/cc/Server.js": function()\{{ z2ui5_cl_app_server_js=>get( ) }\},| && |\n| &&
             |      "z2ui5/cc/DebugTool.fragment.xml": '{ z2ui5_cl_app_debugtool_xml=>get( ) }',| && |\n| &&
             |      "z2ui5/cc/DebugTool.js": function()\{{ z2ui5_cl_app_debugtool_js=>get( ) }\},| && |\n| &&
             |    \});| && |\n| &&
             |    sap.ui.require(["sap/ui/core/ComponentSupport"], function(ComponentSupport)\{| && |\n| &&
             |     window.z2ui5 = \{ checkLocal : true \}; ComponentSupport.run();| && |\n| &&
             |    \});| && |\n| &&
             |  \}| && |\n| &&
             |</script>| && |\n| &&
                |<script id="sap-ui-bootstrap" data-sap-ui-resourceroots='\{ "z2ui5": "./" \}' data-sap-ui-oninit="onInitComponent" | && |\n| &&
                 |data-sap-ui-compatVersion="edge" data-sap-ui-async="true" data-sap-ui-frameOptions="trusted" data-sap-ui-bindingSyntax="complex"| && |\n| &&
                 |data-sap-ui-theme="{ is_config-theme  }" src=" { is_config-src }"   |.

    LOOP AT is_config-t_add_config REFERENCE INTO DATA(lr_config).
      result = |{ result } { lr_config->n }='{ lr_config->v }'|.
    ENDLOOP.

    result = result &&
        | ></script></head>| && |\n| &&
        |<body class="sapUiBody sapUiSizeCompact" id="content">| && |\n| &&
        |    <div data-sap-ui-component data-name="z2ui5" data-id="container" data-settings='\{"id" : "z2ui5"\}' data-handle-validation="true"></div>| && |\n| &&
        | </body></html>|.

  ENDMETHOD.

  METHOD run.

    DATA(lo_handler) = factory( server = server
                                req    = req
                                res    = res
         ).

    lo_handler->main( config ).

  ENDMETHOD.

  METHOD set_request.

    ms_req-body   = mo_server->get_cdata( ).
    ms_req-method = mo_server->get_method( ).

  ENDMETHOD.

  METHOD set_response.

    mo_server->set_cdata( ms_res-body ).
    mo_server->set_header_field( n = `cache-control`
                                 v = `no-cache` ).
    mo_server->set_status( code   = 200
                           reason = `success` ).

    " transform cookie to header based contextid handling
    IF ms_res-s_stateful-switched = abap_true.
      mo_server->set_session_stateful( ms_res-s_stateful-active  ).
      IF mo_server->get_header_field( 'sap-contextid-accept' ) = 'header'.
        DATA(lv_contextid) = mo_server->get_response_cookie( 'sap-contextid' ).
        IF lv_contextid IS NOT INITIAL.
          mo_server->delete_response_cookie( 'sap-contextid' ).
          mo_server->set_header_field( n = 'sap-contextid'
                                       v = lv_contextid ).
        ENDIF.
      ENDIF.
    ELSE.
      lv_contextid = mo_server->get_header_field( 'sap-contextid' ).
      IF lv_contextid IS NOT INITIAL.
        mo_server->set_header_field( n = 'sap-contextid'
                                     v = lv_contextid ).
      ENDIF.
    ENDIF.

  ENDMETHOD.

  METHOD _http_post.

    IF so_sticky_handler IS NOT BOUND.
      DATA(lo_post) = NEW z2ui5_cl_core_handler( is_req-body ).
    ELSE.
      lo_post = so_sticky_handler.
      lo_post->mv_request_json = is_req-body.
    ENDIF.

    result = lo_post->main( ).

    TRY.
        IF lo_post IS BOUND.
          DATA(li_app) = CAST z2ui5_if_app( lo_post->mo_action->mo_app->mo_app ).
          IF li_app->check_sticky = abap_true.
            so_sticky_handler = lo_post.
          ELSE.
            CLEAR so_sticky_handler.
          ENDIF.
        ENDIF.
      CATCH cx_root.
    ENDTRY.

  ENDMETHOD.

  METHOD _main.

    CASE is_req-method.
      WHEN `GET`.
        result-body = _http_get( is_config ).
      WHEN `POST`.
        result = _http_post( is_req ).
    ENDCASE.

  ENDMETHOD.

  METHOD get_request.

    DATA(lo_handler) = factory( server = server
                                req    = req
                                res    = res
     ).

    result-body   = lo_handler->mo_server->get_cdata( ).
    result-method = lo_handler->mo_server->get_method( ).

  ENDMETHOD.

  METHOD get_response.

    DATA(lo_handler) = factory( server = server
                                req    = req
                                res    = res
     ).

    lo_handler->mo_server->set_cdata( is_res-body ).
    lo_handler->mo_server->set_header_field( n = `cache-control`
                                             v = `no-cache` ).
    lo_handler->mo_server->set_status( code   = 200
                                       reason = `success` ).

    " transform cookie to header based contextid handling
    IF is_res-s_stateful-switched = abap_true.
      lo_handler->mo_server->set_session_stateful( is_res-s_stateful-active  ).
      IF lo_handler->mo_server->get_header_field( 'sap-contextid-accept' ) = 'header'.
        DATA(lv_contextid) = lo_handler->mo_server->get_response_cookie( 'sap-contextid' ).
        IF lv_contextid IS NOT INITIAL.
          lo_handler->mo_server->delete_response_cookie( 'sap-contextid' ).
          lo_handler->mo_server->set_header_field( n = 'sap-contextid'
                                                   v = lv_contextid ).
        ENDIF.
      ENDIF.
    ELSE.
      lv_contextid = lo_handler->mo_server->get_header_field( 'sap-contextid' ).
      IF lv_contextid IS NOT INITIAL.
        lo_handler->mo_server->set_header_field( n = 'sap-contextid'
                                                 v = lv_contextid ).
      ENDIF.
    ENDIF.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_startup IMPLEMENTATION.

  METHOD factory.

    result = NEW #( ).

  ENDMETHOD.

  METHOD on_event_check.
    " TODO: variable is assigned but never used (ABAP cleaner)
    DATA li_app_test TYPE REF TO z2ui5_if_app.

    TRY.
        ms_home-classname = z2ui5_cl_util=>c_trim_upper( ms_home-classname ).
        CREATE OBJECT li_app_test TYPE (ms_home-classname).

        client->message_toast_display( `App is ready to start!` ).
        ms_home-btn_text          = `edit`.
        ms_home-btn_event_id      = `BUTTON_CHANGE`.
        ms_home-btn_icon          = `sap-icon://edit`.
        ms_home-class_value_state = `Success`.
        ms_home-class_editable    = abap_false.

        ms_home-url               = z2ui5_cl_core_srv_util=>app_get_url( client    = client
                                                                         classname = ms_home-classname ).

      CATCH cx_root INTO DATA(lx) ##CATCH_ALL.
        ms_home-class_value_state_text = lx->get_text( ).
        ms_home-class_value_state      = `Warning`.
        client->message_box_display( text = ms_home-class_value_state_text
                                     type = `error` ).
    ENDTRY.

  ENDMETHOD.

  METHOD view_display_start.

    DATA(page) = z2ui5_cl_xml_view=>factory( )->shell( )->page(
                     title         = `abap2UI5 - Developing UI5 Apps Purely in ABAP`
                     shownavbutton = abap_false ).

    page->header_content(
      )->toolbar_spacer(
      )->button( text  = `Debugging Tools`
                 icon  = `sap-icon://enablement`
                 press = client->_event( `OPEN_DEBUG` )
      )->button( text  = `System`
                 icon  = `sap-icon://information`
                 press = client->_event( `OPEN_INFO` ) ).

    DATA(simple_form) = page->simple_form( editable                = abap_true
                                           layout                  = `ResponsiveGridLayout`
                                           labelspanxl             = `4`
                                           labelspanl              = `3`
                                           labelspanm              = `4`
                                           labelspans              = `12`
                                           adjustlabelspan         = abap_false
                                           emptyspanxl             = `0`
                                           emptyspanl              = `4`
                                           emptyspanm              = `0`
                                           emptyspans              = `0`
                                           columnsxl               = `1`
                                           columnsl                = `1`
                                           columnsm                = `1`
                                           singlecontainerfullsize = abap_false
      )->content( `form` ).

    simple_form->toolbar( )->title( `Quickstart` ).
    simple_form->label( `Step 1`
      )->text( `Create a new class in your ABAP system`
      )->label( `Step 2`
      )->text( `Add the interface: Z2UI5_IF_APP`
      )->label( `Step 3`
      )->text( `Define the view, implement behavior`
      )->label(
      )->link( text   = `(Example)`
               target = `_blank`
               href   = `https://github.com/abap2UI5/abap2UI5/blob/main/src/02/z2ui5_cl_app_hello_world.clas.abap`
      )->label( `Step 4` ).

    IF ms_home-class_editable = abap_true.

      simple_form->input( placeholder      = `fill in the class name and press 'check'`
                          enabled          = client->_bind( ms_home-class_editable )
                          value            = client->_bind_edit( ms_home-classname )
                          submit           = client->_event( ms_home-btn_event_id )
                          valuehelprequest = client->_event( 'VALUE_HELP' )
                          showvaluehelp    = abap_true
                          width            = `70%` ).

    ELSE.
      simple_form->text( ms_home-classname ).
    ENDIF.

    simple_form->label( ).
    simple_form->button( press = client->_event( ms_home-btn_event_id )
                         text  = client->_bind( ms_home-btn_text )
                         icon  = client->_bind( ms_home-btn_icon )
                         width = `70%` ).
    simple_form->label( `Step 5`
      )->link( text    = `Link to the Application`
               target  = `_blank`
               href    = client->_bind( ms_home-url )
               enabled = |\{= ${ client->_bind( val = ms_home-class_editable ) } === false \}| ).

    DATA(lv_url_samples2) = z2ui5_cl_core_srv_util=>app_get_url( client    = client
                                                                 classname = 'z2ui5_cl_demo_app_000' ).

    simple_form->toolbar( )->title( `What's next?` ).

    IF z2ui5_cl_util=>rtti_check_class_exists( `z2ui5_cl_demo_app_000` ).
      simple_form->label( `Start Developing` ).
      simple_form->button( text  = `Explore Code Samples`
                           press = client->_event_client( val   = client->cs_event-open_new_tab
                                                          t_arg = VALUE #( ( lv_url_samples2 ) ) )
                           width = `70%` ).

    ELSE.
      simple_form->label( `Install the sample repository` ).
      simple_form->link( text   = `And explore more than 200 sample apps...`
                         target = `_blank`
                         href   = `https://github.com/abap2UI5/abap2UI5-samples` ).
    ENDIF.

    simple_form->toolbar( )->title( `Contribution` ).

    simple_form->label( `Open an issue` ).
    simple_form->link( text   = `You have problems, comments or wishes?`
                       target = `_blank`
                       href   = `https://github.com/abap2UI5/abap2UI5/issues` ).

    simple_form->label( `Open a Pull Request` ).
    simple_form->link( text   = `You added a new feature or fixed a bug?`
                       target = `_blank`
                       href   = `https://github.com/abap2UI5/abap2UI5/pulls` ).
    simple_form->toolbar( )->title( `More` ).
    simple_form->label( ).
    simple_form->link( text   = `www.abap2UI5.org`
                       target = `_blank`
                       href   = `http://www.abap2UI5.org` ).

    client->view_display( page->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF mv_check_initialized = abap_false.
      mv_check_initialized = abap_true.
      z2ui5_on_init( ).
      view_display_start( ).
      RETURN.
    ENDIF.

    IF client->get( )-check_on_navigated = abap_true.
      TRY.
          DATA(lo_f4) = CAST z2ui5_cl_pop_to_select( client->get_app( client->get( )-s_draft-id_prev_app ) ).
          DATA(ls_result) = lo_f4->result( ).
          IF ls_result-check_confirmed = abap_true.

            ASSIGN ls_result-row->* TO FIELD-SYMBOL(<class>).
            ms_home = CORRESPONDING #( BASE ( ms_home ) <class> ).
            view_display_start( ).
            RETURN.
          ENDIF.
        CATCH cx_root.
      ENDTRY.
    ENDIF.

    z2ui5_on_event( ).

  ENDMETHOD.

  METHOD view_display_popup.

    DATA(page2) = z2ui5_cl_xml_view=>factory_popup(
         )->dialog( title      = `abap2UI5 - System Information`
                    afterclose = client->_event( `CLOSE` ) ).

    DATA(content) = page2->content( ).
    content->_z2ui5( )->info_frontend( ui5_version = client->_bind( mv_ui5_version ) ).

    DATA(simple_form2) = content->simple_form( editable                = abap_true
                                               layout                  = `ResponsiveGridLayout`
                                               labelspanxl             = `4`
                                               labelspanl              = `3`
                                               labelspanm              = `4`
                                               labelspans              = `12`
                                               adjustlabelspan         = abap_false
                                               emptyspanxl             = `0`
                                               emptyspanl              = `4`
                                               emptyspanm              = `0`
                                               emptyspans              = `0`
                                               columnsxl               = `1`
                                               columnsl                = `1`
                                               columnsm                = `1`
                                               singlecontainerfullsize = abap_false
      )->content( `form` ).

    simple_form2->toolbar( )->title( `Frontend` ).

    simple_form2->label( `UI5 Version` ).
    simple_form2->text( client->_bind( mv_ui5_version ) ).
    simple_form2->label( `Launchpad active` ).
    simple_form2->checkbox( enabled  = abap_false
                            selected = client->get( )-check_launchpad_active ).

    simple_form2->toolbar( )->title( `Backend` ).

    simple_form2->label( `ABAP for Cloud` ).
    simple_form2->checkbox( enabled  = abap_false
                            selected = z2ui5_cl_util=>context_check_abap_cloud( ) ).

    DATA(lv_count) = CONV string( NEW z2ui5_cl_core_srv_draft( )->count_entries( ) ).
    simple_form2->toolbar( )->title( `abap2UI5` ).
    simple_form2->label( `Version ` ).
    simple_form2->text( z2ui5_if_app=>version ).
    simple_form2->label( `Draft Entries ` ).
    simple_form2->text( lv_count ).

    page2->end_button( )->button( text  = 'close'
                                  press = client->_event( 'CLOSE' )
                                  type  = 'Emphasized' ).

    client->popup_display( page2->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_on_event.

    DATA li_app TYPE REF TO z2ui5_if_app.

    CASE client->get( )-event.

      WHEN `CLOSE`.
        client->popup_destroy( ).

      WHEN `OPEN_DEBUG`.
        client->message_box_display( `Press CTRL+F12 to open the debugging tools` ).
      WHEN `OPEN_INFO`.
        view_display_popup( ).
*        client->nav_app_call( z2ui5_cl_core_app_info=>factory( ) ).
        RETURN.

      WHEN `BUTTON_CHECK`.
        IF ms_home-class_editable = abap_false.
          ms_home-btn_text       = `check`.
          ms_home-btn_event_id   = `BUTTON_CHECK`.
          ms_home-btn_icon       = `sap-icon://validate`.
          ms_home-class_editable = abap_true.

        ELSE.
          on_event_check( ).
        ENDIF.
        client->view_model_update( ).

      WHEN 'VALUE_HELP'.
        TRY.
            mt_classes = z2ui5_cl_util=>rtti_get_classes_impl_intf( z2ui5_cl_util=>rtti_get_intfname_by_ref( li_app ) ).
          CATCH cx_root.
            client->message_box_display( `Unfortunately the value help is not available on your ABAP release!` ).
            RETURN.
        ENDTRY.
        client->nav_app_call( z2ui5_cl_pop_to_select=>factory( mt_classes ) ).
    ENDCASE.

  ENDMETHOD.

  METHOD z2ui5_on_init.

    ms_home-btn_text       = `check`.
    ms_home-btn_event_id   = `BUTTON_CHECK`.
    ms_home-class_editable = abap_true.
    ms_home-btn_icon       = `sap-icon://validate`.
    ms_home-classname      = z2ui5_cl_util=>rtti_get_classname_by_ref( NEW z2ui5_cl_app_hello_world( ) ).

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_hello_world IMPLEMENTATION.

  METHOD z2ui5_if_app~main.

    IF check_initialized = abap_false.
      check_initialized = abap_true.

      client->view_display( z2ui5_cl_xml_view=>factory(
        )->shell(
        )->page( title = 'abap2UI5 - Hello World'
        )->simple_form( editable = abap_true
            )->content( ns = `form`
                )->title( 'Make an input here and send it to the server...'
                )->label( 'Name'
                )->input( client->_bind_edit( name )
                )->button( text  = 'post'
                           press = client->_event( 'BUTTON_POST' )
        )->stringify( ) ).

    ENDIF.

    CASE client->get( )-event.
      WHEN 'BUTTON_POST'.
        client->message_box_display( |Your name is { name }| ).
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_pop_to_select IMPLEMENTATION.

  METHOD factory.

    r_result = NEW #( ).
    IF i_title IS INITIAL.
      r_result->title = COND #(
                                             WHEN i_multiselect = abap_true
                                             THEN `Multi select`
                                             ELSE `Single select` ).
    ELSE.
      r_result->title = i_title.
    ENDIF.

    r_result->sort_field        = i_sort_field.
    r_result->descending        = i_descending.
    r_result->content_height    = i_contentheight.
    r_result->content_width     = i_contentwidth.
    r_result->growing_threshold = i_growingthreshold.
    r_result->multiselect       = i_multiselect.
    r_result->event_confirmed   = i_event_confirmed.
    r_result->event_canceled    = i_event_canceled.

    r_result->mr_tab            = z2ui5_cl_util=>conv_copy_ref_data( i_tab ).
    CREATE DATA r_result->ms_result-row LIKE LINE OF i_tab.
    CREATE DATA r_result->ms_result-table LIKE i_tab.

  ENDMETHOD.

  METHOD display.

    FIELD-SYMBOLS <tab_out> TYPE STANDARD TABLE.

    ASSIGN mr_tab_popup->* TO <tab_out>.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( ).
    DATA(tab) = popup->table_select_dialog(
        items            = |\{path:'|
                          && client->_bind_edit( val  = <tab_out>
                                                 path = abap_true )
                          && |', sorter : \{ path : '{ to_upper( sort_field ) }', descending : |
                          && z2ui5_cl_util=>boolean_abap_2_json( me->descending )
                          && | \} \}|
        cancel           = client->_event( 'CANCEL' )
        search           = client->_event(
                               val   = 'SEARCH'
                               t_arg = VALUE #( ( `${$parameters>/value}` ) ( `${$parameters>/clearButtonPressed}` ) ) )
        confirm          = client->_event( val   = 'CONFIRM'
                                           t_arg = VALUE #( ( `${$parameters>/selectedContexts[0]/sPath}` ) ) )
        growing          = abap_true
        contentwidth     = content_width
        contentheight    = content_height
        growingthreshold = growing_threshold
        title            = title
        multiselect      = multiselect ).

    DATA(lt_comp) = z2ui5_cl_util=>rtti_get_t_attri_by_any( <tab_out> ).
    DELETE lt_comp WHERE name = 'ZZSELKZ'.

    DATA(list) = tab->column_list_item( valign   = `Top`
                                        selected = `{ZZSELKZ}` ).
    DATA(cells) = list->cells( ).

    LOOP AT lt_comp INTO DATA(ls_comp).
      cells->text( |\{{ ls_comp-name }\}| ).
    ENDLOOP.

    DATA(columns) = tab->columns( ).
    LOOP AT lt_comp INTO ls_comp.
      DATA(text) = COND #(
                     LET data_element_name = substring_after(
                                                 val = CAST cl_abap_elemdescr( ls_comp-type )->absolute_name
                                                 sub = '\TYPE=' )
                         medium_label = z2ui5_cl_util=>rtti_get_data_element_texts( data_element_name )-medium IN
                     WHEN medium_label IS NOT INITIAL
                     THEN medium_label
                     ELSE ls_comp-name ).
      columns->column( '8rem' )->header( `` )->text( text ).
    ENDLOOP.

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      set_output_table( ).
      display( ).
      RETURN.
    ENDIF.

    on_event( ).

  ENDMETHOD.

  METHOD on_event.

    CASE client->get( )-event.

      WHEN 'CONFIRM'.
        ms_result-check_confirmed = abap_true.
        on_event_confirm( ).

      WHEN 'CANCEL'.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).
        client->follow_up_action( client->_event( event_canceled ) ).

      WHEN 'SEARCH'.
        on_event_search( ).

    ENDCASE.

  ENDMETHOD.

  METHOD result.

    result = ms_result.

  ENDMETHOD.

  METHOD set_output_table.

    FIELD-SYMBOLS <row>      TYPE any.
    FIELD-SYMBOLS <row2>     TYPE any.
    FIELD-SYMBOLS <tab>      TYPE STANDARD TABLE.
    FIELD-SYMBOLS <tab_out>  TYPE STANDARD TABLE.
    FIELD-SYMBOLS <tab_out2> TYPE STANDARD TABLE.
    FIELD-SYMBOLS <field>    TYPE any.
    DATA lr_row TYPE REF TO data.

    ASSIGN mr_tab->* TO <tab>.

    DATA(lo_type) = cl_abap_structdescr=>describe_by_data( <tab> ).
    DATA(lo_table) = CAST cl_abap_tabledescr( lo_type ).
    TRY.
        DATA(lo_struct) = CAST cl_abap_structdescr( lo_table->get_table_line_type( ) ).
        DATA(lt_comp) = lo_struct->get_components( ).
      CATCH cx_root.
        check_table_line = abap_true.
        DATA(lo_elem) = CAST cl_abap_elemdescr( lo_table->get_table_line_type( ) ).
        INSERT VALUE #( name = 'TAB_LINE'
                        type = CAST #( lo_elem ) ) INTO TABLE lt_comp.
    ENDTRY.

    IF NOT line_exists( lt_comp[ name = `ZZSELKZ` ] ).
      DATA(lo_type_bool) = cl_abap_structdescr=>describe_by_name( 'ABAP_BOOL' ).
      INSERT VALUE #( name = `ZZSELKZ`
                      type = CAST #( lo_type_bool ) ) INTO TABLE lt_comp.
    ENDIF.

    DATA(lo_line_type) = cl_abap_structdescr=>create( lt_comp ).
    DATA(lo_tab_type) = cl_abap_tabledescr=>create( lo_line_type ).

    CREATE DATA mr_tab_popup TYPE HANDLE lo_tab_type.
    CREATE DATA mr_tab_popup_backup TYPE HANDLE lo_tab_type.

    ASSIGN mr_tab_popup->* TO <tab_out>.
    ASSIGN mr_tab_popup_backup->* TO <tab_out2>.
    LOOP AT <tab> ASSIGNING <row>.

      CREATE DATA lr_row LIKE LINE OF <tab_out>.
      ASSIGN lr_row->* TO <row2>.
      IF check_table_line = abap_true.
        ASSIGN lr_row->('TAB_LINE') TO <field>.
        ASSERT sy-subrc = 0.
        <field> = <row>.
      ELSE.
        <row2> = CORRESPONDING #( <row> ).
      ENDIF.
      INSERT <row2> INTO TABLE <tab_out>.

    ENDLOOP.

    <tab_out2> = <tab_out>.

  ENDMETHOD.

  METHOD on_event_confirm.

    FIELD-SYMBOLS <tab>                 TYPE STANDARD TABLE.
    FIELD-SYMBOLS <row_selected>        TYPE any.
    FIELD-SYMBOLS <selkz>               TYPE any.
    FIELD-SYMBOLS <row_result>          TYPE any.
    FIELD-SYMBOLS <table_result>        TYPE ANY TABLE.
    FIELD-SYMBOLS <table_line_selected> TYPE any.

    ASSIGN mr_tab_popup->* TO <tab>.
    ASSIGN ms_result-table->* TO <table_result>.

    LOOP AT <tab> ASSIGNING <row_selected>.

      ASSIGN ('<ROW_SELECTED>-ZZSELKZ') TO <selkz>.
      ASSERT sy-subrc = 0.
      IF <selkz> = abap_false.
        CONTINUE.
      ENDIF.

      ASSIGN ms_result-row->* TO <row_result>.
      IF check_table_line = abap_true.
        ASSIGN ('<ROW_SELECTED>-TAB_LINE') TO <table_line_selected>.
        ASSERT sy-subrc = 0.
        <row_result> = <table_line_selected>.
      ELSE.
        <row_result> = CORRESPONDING #( <row_selected> ).
      ENDIF.

      INSERT <row_result> INTO TABLE <table_result>.
      IF multiselect = abap_false.
        EXIT.
      ELSE.
        CLEAR <row_result>.
      ENDIF.

    ENDLOOP.

    client->popup_destroy( ).
    client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).
    client->follow_up_action( client->_event( val    = event_confirmed
                                              r_data = <table_result> ) ).

  ENDMETHOD.

  METHOD on_event_search.

    FIELD-SYMBOLS <tab_out>        TYPE STANDARD TABLE.
    FIELD-SYMBOLS <tab_out_backup> TYPE STANDARD TABLE.
    FIELD-SYMBOLS <row2>           TYPE any.
    FIELD-SYMBOLS <field2>         TYPE any.

    DATA(lt_arg) = client->get( )-t_event_arg.
    READ TABLE lt_arg INTO DATA(ls_arg) INDEX 1.
    ASSERT sy-subrc = 0.

    ASSIGN mr_tab_popup->* TO <tab_out>.
    ASSIGN mr_tab_popup_backup->* TO <tab_out_backup>.

    <tab_out> = <tab_out_backup>.

    DATA(lt_comp) = z2ui5_cl_util=>rtti_get_t_attri_by_any( <tab_out> ).
    LOOP AT <tab_out> ASSIGNING <row2>.
      DATA(lv_check_continue) = abap_false.
      LOOP AT lt_comp INTO DATA(ls_comp).
        DATA(lv_assign) = |<ROW2>-{ ls_comp-name }|.
        ASSIGN (lv_assign) TO <field2>.
        ASSERT sy-subrc = 0.
        IF to_upper( <field2> ) CS to_upper( ls_arg ).
          lv_check_continue = abap_true.
          EXIT.
        ENDIF.
      ENDLOOP.
      IF lv_check_continue = abap_true.
        CONTINUE.
      ENDIF.
      DELETE <tab_out>.
    ENDLOOP.
    client->popup_model_update( ).

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_pop_to_inform IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).
    r_result->title               = i_title.
    r_result->icon                = i_icon.
    r_result->question_text       = i_text.
    r_result->button_text_confirm = i_button_text.

  ENDMETHOD.

  METHOD view_display.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( )->dialog( title      = title
                                                               icon       = icon
                                                               afterclose = client->_event( 'BUTTON_CONFIRM' )
              )->content(
                  )->vbox( 'sapUiMediumMargin'
                      )->text( question_text
              )->get_parent( )->get_parent(
              )->buttons(
                  )->button( text  = button_text_confirm
                             press = client->_event( 'BUTTON_CONFIRM' )
                             type  = 'Emphasized' ).

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      view_display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.
      WHEN `BUTTON_CONFIRM`.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_to_confirm IMPLEMENTATION.
  METHOD result.

    result = check_result_confirmed.

  ENDMETHOD.

  METHOD factory.

    r_result = NEW #( ).

    r_result->title               = i_title.
    r_result->icon                = i_icon.
    r_result->question_text       = i_question_text.
    r_result->button_text_confirm = i_button_text_confirm.
    r_result->button_text_cancel  = i_button_text_cancel.
    r_result->event_confirm       = i_event_confirm.
    r_result->event_canceled      = i_event_cancel.

  ENDMETHOD.

  METHOD view_display.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( )->dialog( title      = title
                                                               icon       = icon
                                                               afterclose = client->_event( 'BUTTON_CANCEL' )
              )->content(
                  )->vbox( 'sapUiMediumMargin'
                      )->text( question_text
              )->get_parent( )->get_parent(
              )->buttons(
                  )->button( text  = button_text_cancel
                             press = client->_event( 'BUTTON_CANCEL' )
                  )->button( text  = button_text_confirm
                             press = client->_event( 'BUTTON_CONFIRM' )
                             type  = 'Emphasized' ).

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      view_display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.
      WHEN `BUTTON_CONFIRM`.
        check_result_confirmed = abap_true.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app_prev( ) ).
        client->follow_up_action( client->_event( event_confirm ) ).

      WHEN `BUTTON_CANCEL`.
        client->follow_up_action( client->_event( event_canceled ) ).
        check_result_confirmed = abap_false.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app_prev( ) ).
    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_textedit IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).
    r_result->mv_stretch_active = i_stretch_active.
    r_result->ms_result-text = i_textarea.
    r_result->mv_title          = i_title.
    r_result->mv_check_editable = i_check_editable.

  ENDMETHOD.

  METHOD display.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( )->dialog( afterclose = client->_event( 'BUTTON_TEXTAREA_CANCEL' )
                                                               stretch    = mv_stretch_active
                                                               title      = mv_title
                                                               icon       = 'sap-icon://edit'
          )->content(
              )->text_area( growing  = abap_true
                            editable = mv_check_editable
                            value    = client->_bind_edit( ms_result-text )
          )->get_parent(
          )->buttons(
              )->button( text  = 'Cancel'
                         press = client->_event( 'BUTTON_TEXTAREA_CANCEL' )
              )->button( text  = 'Confirm'
                         press = client->_event( 'BUTTON_TEXTAREA_CONFIRM' )
                         type  = 'Emphasized' ).

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.
      WHEN `BUTTON_TEXTAREA_CONFIRM`.
        ms_result-check_confirmed = abap_true.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).

      WHEN `BUTTON_TEXTAREA_CANCEL`.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).

    ENDCASE.

  ENDMETHOD.

  METHOD result.
    result = ms_result.
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_table IMPLEMENTATION.
  METHOD display.

    FIELD-SYMBOLS <tab_out> TYPE STANDARD TABLE.

    ASSIGN mr_tab->* TO <tab_out>.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( )->dialog( afterclose = client->_event( 'BUTTON_CONFIRM' )
                                                               stretch    = abap_true
                                                               title      = title
*                                                               icon       = 'sap-icon://edit'
          )->content( ).

    DATA(tab) = popup->table( client->_bind( <tab_out> ) ).

    DATA(lt_comp) = z2ui5_cl_util=>rtti_get_t_attri_by_any( <tab_out> ).

    DATA(list) = tab->column_list_item( valign = `Top` ).
    DATA(cells) = list->cells( ).

    LOOP AT lt_comp INTO DATA(ls_comp).
      cells->text( |\{{ ls_comp-name }\}| ).
    ENDLOOP.

    DATA(columns) = tab->columns( ).
    LOOP AT lt_comp INTO ls_comp.
      columns->column( '8rem' )->header( `` )->text( ls_comp-name ).
    ENDLOOP.

    popup->get_parent(
        )->buttons(
            )->button( text  = 'OK'
                       press = client->_event( 'BUTTON_CONFIRM' )
                       type  = 'Emphasized' ).

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD factory.
    FIELD-SYMBOLS <tab> TYPE any.

    r_result = NEW #( ).
    IF i_title IS NOT INITIAL.
      r_result->title = i_title.
    ENDIF.
    CREATE DATA r_result->mr_tab LIKE i_tab.
    CREATE DATA r_result->ms_result-row LIKE LINE OF i_tab.

    ASSIGN r_result->mr_tab->* TO <tab>.
    <tab> = i_tab.

  ENDMETHOD.

  METHOD on_event.

    CASE client->get( )-event.

      WHEN 'BUTTON_CONFIRM'.
        ms_result-check_confirmed = abap_true.
        on_event_confirm( ).

      WHEN 'CANCEL'.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).

    ENDCASE.

  ENDMETHOD.

  METHOD on_event_confirm.

    client->popup_destroy( ).
    client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).

  ENDMETHOD.

  METHOD result.

    result = ms_result.

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      display( ).
      RETURN.
    ENDIF.

    on_event( ).

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_pdf IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).
    r_result->title               = i_title.
    r_result->button_text_confirm = i_button_text_confirm.
    r_result->button_text_cancel  = i_button_text_cancel.
    r_result->mv_pdf              = i_pdf.

  ENDMETHOD.

  METHOD result.

    result = ms_result.

  ENDMETHOD.

  METHOD view_display.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( )->dialog( title      = title
                                                               icon       = icon
                                                               stretch    = abap_true
                                                               afterclose = client->_event( 'BUTTON_CANCEL' )
              )->content(
                  )->vbox( 'sapUiMediumMargin'
                  )->label( question_text
                  )->_generic( ns     = `html`
                               name   = `iframe`
                               t_prop = VALUE #( ( n = `src`    v = mv_pdf )
                                                 ( n = `height` v = `800px` )
                                                 ( n = `width`  v = `99%` )
                           )
              )->get_parent( )->get_parent( )->get_parent(
              )->buttons(
                  )->button( text  = button_text_cancel
                             press = client->_event( 'BUTTON_CANCEL' )
                  )->button( text  = button_text_confirm
                             press = client->_event( 'BUTTON_CONFIRM' )
                             type  = 'Emphasized' ).

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      view_display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.

      WHEN `BUTTON_CONFIRM`.
        check_result_confirmed = abap_true.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).
      WHEN `BUTTON_CANCEL`.
        check_result_confirmed = abap_false.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).
    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_messages IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).
    DATA(lt_msg) = z2ui5_cl_util=>msg_get( i_messages ).

    LOOP AT lt_msg REFERENCE INTO DATA(lr_row).

      DATA(ls_row) = VALUE ty_s_msg( ).
      ls_row-type     = z2ui5_cl_util=>ui5_get_msg_type( lr_row->type ).
      ls_row-title    = lr_row->text.
*      lr_row->title = `title`.
*      lr_row->message = `message`.
      ls_row-subtitle = |{ lr_row->id } { lr_row->no }|.
*      lr_row->group = `001`.

      INSERT ls_row INTO TABLE r_result->mt_msg.
    ENDLOOP.

    r_result->title = i_title.

  ENDMETHOD.

  METHOD view_display.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( ).
    popup = popup->dialog( title             = `Messages`
                           contentheight     = '50%'
                           contentwidth      = '50%'
                           verticalScrolling = abap_false
                           afterclose        = client->_event( 'BUTTON_CONTINUE' )
         ).

    popup->message_view( items = client->_bind( mt_msg  )
*                         groupitems = abap_true
        )->message_item( type     = `{TYPE}`
                         title    = `{TITLE}`
                         subtitle = `{SUBTITLE}`
*                         description = `{MESSAGE}`
*                         groupname = `{GROUP}`
            ).

    popup->buttons(
       )->button( text  = 'continue'
                  press = client->_event( 'BUTTON_CONTINUE' )
                  type  = 'Emphasized' ).

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      view_display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.
      WHEN `BUTTON_CONTINUE`.
        client->popup_destroy( ).
        client->nav_app_leave( ).
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_js_loader IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).
    r_result->js           = i_js.
    r_result->user_command = i_result.

  ENDMETHOD.

  METHOD factory_check_open_ui5.
    r_result = NEW #( ).
    r_result->check_open_ui5 = abap_true.
  ENDMETHOD.

  METHOD result.

    result3 = user_command.

  ENDMETHOD.

  METHOD view_display.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( )->dialog( `Setup UI...`
        )->content( ).

    IF js IS NOT INITIAL.
      popup->_z2ui5( )->timer( client->_event( 'TIMER_FINISHED' )
      )->_generic( ns   = `html`
                   name = `script` )->_cc_plain_xml( js ).
    ENDIF.

    IF check_open_ui5 = abap_true.
      popup->_z2ui5( )->info_frontend( finished = client->_event( `INFO_FINISHED` )
                                       ui5_gav  = client->_bind_edit( ui5_gav ) ).
    ENDIF.

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      view_display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.
      WHEN `INFO_FINISHED`.
        IF to_upper( ui5_gav ) CS `OPEN`.
          mv_is_open_ui5 = abap_true.
        ENDIF.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).

      WHEN `TIMER_FINISHED`.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_itab_json_dl IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).
    r_result->mr_itab             = z2ui5_cl_util=>conv_copy_ref_data( itab ).

    r_result->title               = i_title.
    r_result->icon                = i_icon.

    r_result->button_text_confirm = i_button_text_confirm.
    r_result->button_text_cancel  = i_button_text_cancel.

  ENDMETHOD.

  METHOD result.

    result = check_result_confirmed.

  ENDMETHOD.

  METHOD z2ui5_if_app~main.
    DATA app TYPE REF TO object.

    me->client = client.

    TRY.

        IF z2ui5_cl_util=>rtti_check_class_exists( `z2ui5_dbt_cl_app_03` ) = abap_false.

          DATA(lv_link) = `https://github.com/oblomov-dev/a2UI5-db_table_loader`.
          DATA(lv_text) = |<p>Please install the open-source project a2UI5-db_table_loader and try again: <a href="| &&
                           |{ lv_link }" style="color:blue; font-weight:600;" target="_blank">(link)</a></p>|.

          DATA(lx) = NEW z2ui5_cx_util_error( val = lv_text ).
          client->nav_app_leave( z2ui5_cl_pop_error=>factory( lx ) ).

        ELSE.

          DATA(lv_classname) = `Z2UI5_DBT_CL_APP_03`.
          CALL METHOD (lv_classname)=>('FACTORY_POPUP_BY_ITAB')
            EXPORTING
              itab   = mr_itab
            RECEIVING
              result = app.

          client->nav_app_leave( CAST #( app ) ).

        ENDIF.

      CATCH cx_root INTO DATA(x).
        client->nav_app_leave( z2ui5_cl_pop_to_inform=>factory( x->get_text( ) ) ).
    ENDTRY.
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_input_val IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).
    r_result->title               = title.

    r_result->question_text       = text.
    r_result->button_text_confirm = button_text_confirm.
    r_result->button_text_cancel  = button_text_cancel.
    r_result->ms_result-value = val.

  ENDMETHOD.

  METHOD result.

    result = ms_result.

  ENDMETHOD.

  METHOD view_display.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( )->dialog( title      = title
                                                               icon       = icon
                                                               afterclose = client->_event( 'BUTTON_CANCEL' )
              )->content(
                  )->vbox( 'sapUiMediumMargin'
                  )->label( question_text
                  )->input( value  = client->_bind_edit( ms_result-value )
                            submit = client->_event( 'BUTTON_CONFIRM' )
              )->get_parent( )->get_parent(
              )->buttons(
                  )->button( text  = button_text_cancel
                             press = client->_event( 'BUTTON_CANCEL' )
                  )->button( text  = button_text_confirm
                             press = client->_event( 'BUTTON_CONFIRM' )
                             type  = 'Emphasized' ).

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      view_display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.
      WHEN `BUTTON_CONFIRM`.
        ms_result-check_confirmed = abap_true.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).
      WHEN `BUTTON_CANCEL`.
        ms_result-check_confirmed = abap_false.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).
    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_html IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).
    r_result->title               = i_title.
    r_result->icon                = i_icon.
    r_result->html                = i_html.
    r_result->button_text_confirm = i_button_text.

  ENDMETHOD.

  METHOD view_display.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( )->dialog( title      = title
                                                               icon       = icon
                                                               afterclose = client->_event( 'BUTTON_CONFIRM' )
              )->content(
                  )->vbox( 'sapUiMediumMargin'
                      )->html( html
              )->get_parent( )->get_parent( )->get_parent(
              )->buttons(
                  )->button( text  = button_text_confirm
                             press = client->_event( 'BUTTON_CONFIRM' )
                             type  = 'Emphasized' ).

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      view_display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.
      WHEN `BUTTON_CONFIRM`.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_get_range_m IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).
    r_result->ms_result-t_filter = val.

  ENDMETHOD.

  METHOD init.

    popup_display( ).

  ENDMETHOD.

  METHOD popup_display.

    DATA(lo_popup) = z2ui5_cl_xml_view=>factory_popup( ).
    lo_popup = lo_popup->dialog( afterclose    = client->_event( 'BUTTON_CANCEL' )
                                 contentheight = `50%`
                                 contentwidth  = `50%`
                                 title         = 'Define Filter Conditons' ).

    DATA(vbox) = lo_popup->vbox( height         = `100%`
                                 justifycontent = 'SpaceBetween' ).

    DATA(item) = vbox->list( nodata          = `no conditions defined`
                             items           = client->_bind( ms_result-t_filter )
                             selectionchange = client->_event( 'SELCHANGE' )
                )->custom_list_item( ).

    DATA(grid) = item->grid( class = `sapUiSmallMarginTop sapUiSmallMarginBottom sapUiSmallMarginBegin` ).
    grid->text( `{NAME}` ).

    grid->multi_input( tokens           = `{T_TOKEN}`
                       enabled          = abap_false
                       valuehelprequest = client->_event( val   = `LIST_OPEN`
                                                          t_arg = VALUE #( ( `${NAME}` ) ) )
            )->tokens(
                 )->token( key      = `{KEY}`
                           text     = `{TEXT}`
                           visible  = `{VISIBLE}`
                           selected = `{SELKZ}`
                           editable = `{EDITABLE}` ).

    grid->button( text  = `Select`
                  press = client->_event( val   = `LIST_OPEN`
                                          t_arg = VALUE #( ( `${NAME}` ) ) ) ).
    grid->button( icon  = 'sap-icon://delete'
                  type  = `Transparent`
                  text  = `Clear`
                  press = client->_event( val   = `LIST_DELETE`
                                          t_arg = VALUE #( ( `${NAME}` ) ) ) ).

    lo_popup->buttons(
        )->button( text  = `Clear All`
                   icon  = 'sap-icon://delete'
                   type  = `Transparent`
                   press = client->_event( val = `POPUP_DELETE_ALL` )
       )->button( text  = 'Cancel'
                  press = client->_event( 'BUTTON_CANCEL' )
       )->button( text  = 'OK'
                  press = client->_event( 'BUTTON_CONFIRM' )
                  type  = 'Emphasized' ).

    client->popup_display( lo_popup->stringify( ) ).
  ENDMETHOD.

  METHOD result.
    result = ms_result.
  ENDMETHOD.

  METHOD z2ui5_if_app~main.
    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      init( ).
      RETURN.
    ENDIF.

    IF client->get( )-check_on_navigated = abap_true.

      DATA(lo_popup) = CAST z2ui5_cl_pop_get_range( client->get_app( client->get( )-s_draft-id_prev_app ) ).
      IF lo_popup->result( )-check_confirmed = abap_true.
        ASSIGN ms_result-t_filter[ name = mv_popup_name ] TO FIELD-SYMBOL(<tab>).
        <tab>-t_range = lo_popup->result( )-t_range.
        <tab>-t_token = z2ui5_cl_util=>filter_get_token_t_by_range_t( <tab>-t_range ).
      ENDIF.
      popup_display( ).

    ENDIF.

    CASE client->get( )-event.

      WHEN 'LIST_DELETE'.
        DATA(lt_event) = client->get( )-t_event_arg.
        ASSIGN ms_result-t_filter[ name = lt_event[ 1 ] ] TO <tab>.
        CLEAR <tab>-t_token.
        CLEAR <tab>-t_range.
        client->popup_model_update( ).

      WHEN 'LIST_OPEN'.
        lt_event = client->get( )-t_event_arg.
        mv_popup_name = lt_event[ 1 ].
        DATA(ls_sql) = ms_result-t_filter[ name = mv_popup_name ].
        client->nav_app_call( z2ui5_cl_pop_get_range=>factory( ls_sql-t_range ) ).

      WHEN `BUTTON_CONFIRM`.
        ms_result-check_confirmed = abap_true.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).

      WHEN `BUTTON_CANCEL`.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).

      WHEN `POPUP_DELETE_ALL`.
        LOOP AT ms_result-t_filter REFERENCE INTO DATA(lr_sql).
          CLEAR lr_sql->t_range.
          CLEAR lr_sql->t_token.
        ENDLOOP.
        client->popup_model_update( ).

    ENDCASE.
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_get_range IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).

    z2ui5_cl_util=>itab_corresponding( EXPORTING val = t_range
                                       CHANGING  tab = r_result->ms_result-t_range
    ).

    INSERT VALUE #( ) INTO TABLE r_result->ms_result-t_range.

  ENDMETHOD.

  METHOD result.

    result = ms_result.

  ENDMETHOD.

  METHOD view_display.

    DATA(lo_popup) = z2ui5_cl_xml_view=>factory_popup( ).

    lo_popup = lo_popup->dialog( afterclose    = client->_event( 'BUTTON_CANCEL' )
                                 contentheight = `50%`
                                 contentwidth  = `50%`
                                 title         = 'Define Filter Conditons' ).

    DATA(vbox) = lo_popup->vbox( height         = `100%`
                                 justifycontent = 'SpaceBetween' ).

    DATA(item) = vbox->list( nodata          = `no conditions defined`
                             items           = client->_bind_edit( mt_filter )
                             selectionchange = client->_event( 'SELCHANGE' )
                )->custom_list_item( ).

    DATA(grid) = item->grid( ).

    grid->combobox( selectedkey = `{OPTION}`
                    items       = client->_bind( mt_mapping )
             )->item( key  = '{N}'
                      text = '{N}'
             )->get_parent(
             )->input( value  = `{LOW}`
                       submit = client->_event( 'BUTTON_CONFIRM' )
             )->input( value   = `{HIGH}`
                       visible = `{= ${OPTION} === 'BT' }`
                       submit  = client->_event( 'BUTTON_CONFIRM' )
             )->button( icon  = 'sap-icon://decline'
                        type  = `Transparent`
                        press = client->_event( val   = `POPUP_DELETE`
                                                t_arg = VALUE #( ( `${KEY}` ) ) ) ).

    lo_popup->buttons(
        )->button( text  = `Delete All`
                   icon  = 'sap-icon://delete'
                   type  = `Transparent`
                   press = client->_event( val = `POPUP_DELETE_ALL` )
        )->button( text  = `Add Item`
                   icon  = `sap-icon://add`
                   press = client->_event( val = `POPUP_ADD` )
       )->button( text  = 'Cancel'
                  press = client->_event( 'BUTTON_CANCEL' )
       )->button( text  = 'OK'
                  press = client->_event( 'BUTTON_CONFIRM' )
                  type  = 'Emphasized' ).

    client->popup_display( lo_popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.

      mt_mapping = z2ui5_cl_util=>filter_get_token_range_mapping( ).

      CLEAR mt_filter.
      LOOP AT ms_result-t_range REFERENCE INTO DATA(lr_product).
        INSERT VALUE #( low    = lr_product->low
                        high   = lr_product->high
                        option = lr_product->option
                        key    = z2ui5_cl_util=>uuid_get_c32( )
          ) INTO TABLE mt_filter.
      ENDLOOP.

      view_display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.

      WHEN `BUTTON_CONFIRM`.

        CLEAR ms_result-t_range.
        LOOP AT mt_filter REFERENCE INTO DATA(lr_filter).
          IF lr_filter->low IS INITIAL AND lr_filter->high IS INITIAL.
            CONTINUE.
          ENDIF.
          INSERT VALUE #( sign   = `I`
                          option = lr_filter->option
                          low    = lr_filter->low
                          high   = lr_filter->high
            ) INTO TABLE ms_result-t_range.
        ENDLOOP.

        ms_result-check_confirmed = abap_true.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).

      WHEN `BUTTON_CANCEL`.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).

      WHEN `POPUP_ADD`.
        INSERT VALUE #( key = z2ui5_cl_util=>uuid_get_c32( ) ) INTO TABLE mt_filter.
        client->popup_model_update( ).

      WHEN `POPUP_DELETE`.
        DATA(lt_event) = client->get( )-t_event_arg.
        DELETE mt_filter WHERE key = lt_event[ 1 ].
        client->popup_model_update( ).

      WHEN `POPUP_DELETE_ALL`.
        mt_filter = VALUE #( ).
        client->popup_model_update( ).

    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_file_ul IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).
    r_result->title               = i_title.

    r_result->question_text       = i_text.
    r_result->button_text_confirm = i_button_text_confirm.
    r_result->button_text_cancel  = i_button_text_cancel.
    r_result->mv_path             = i_path.

  ENDMETHOD.

  METHOD result.

    result = ms_result.

  ENDMETHOD.

  METHOD view_display.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( )->dialog( title      = title
                                                               icon       = icon
                                                               afterclose = client->_event( 'BUTTON_CANCEL' )
              )->content(
                  )->vbox( 'sapUiMediumMargin'
                  )->label( question_text
                  )->_z2ui5( )->file_uploader( value       = client->_bind_edit( mv_value )
                                               path        = client->_bind_edit( mv_path )
                                               placeholder = 'filepath here...'
                                               upload      = client->_event( 'UPLOAD' )
              )->get_parent( )->get_parent(
              )->buttons(
                  )->button( text  = button_text_cancel
                             press = client->_event( 'BUTTON_CANCEL' )
                  )->button( text    = button_text_confirm
                             press   = client->_event( 'BUTTON_CONFIRM' )
                             enabled = client->_bind( check_confirm_enabled )
                             type    = 'Emphasized' ).

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      view_display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.

      WHEN `UPLOAD`.

        SPLIT mv_value AT `;` INTO DATA(lv_dummy) DATA(lv_data).
        SPLIT lv_data AT `,` INTO lv_dummy lv_data.

        DATA(lv_data2) = z2ui5_cl_util=>conv_decode_x_base64( lv_data ).
        ms_result-value = z2ui5_cl_util=>conv_get_string_by_xstring( lv_data2 ).
        check_confirm_enabled = abap_true.

        CLEAR mv_value.
        CLEAR mv_path.
        client->popup_model_update( ).

      WHEN `BUTTON_CONFIRM`.
        ms_result-check_confirmed = abap_true.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).
      WHEN `BUTTON_CANCEL`.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).
    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_file_dl IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).
    r_result->title               = i_title.

    r_result->question_text       = i_text.
    r_result->button_text_confirm = i_button_text_confirm.
    r_result->button_text_cancel  = i_button_text_cancel.
    r_result->mv_type             = i_type.
    r_result->mv_value            = i_file.
    r_result->mv_size             = strlen( i_file ) / 1000.

  ENDMETHOD.

  METHOD result.

    result = check_confirmed.

  ENDMETHOD.

  METHOD view_display.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( )->dialog( title      = title
                                                               icon       = icon
                                                               afterclose = client->_event( 'BUTTON_CANCEL' )
              )->content( ).

    IF mv_check_download = abap_true.
      DATA(lv_csv_x) = z2ui5_cl_util=>conv_get_xstring_by_string( mv_value ).
      DATA(lv_base64) = z2ui5_cl_util=>conv_encode_x_base64( lv_csv_x ).
      popup->_generic( ns     = `html`
                       name   = `iframe`
                       t_prop = VALUE #( ( n = `src` v = mv_type && lv_base64 )
                                         ( n = `hidden` v = `hidden` ) ) ).

      popup->_z2ui5( )->timer( client->_event( `CALLBACK_DOWNLOAD` ) ).

    ENDIF.

    popup->vbox( 'sapUiMediumMargin'
      )->label( `Name`
      )->input( value   = mv_name
                enabled = abap_false
      )->label( `Type`
      )->input( value   = mv_type
                enabled = abap_false
      )->label( `Size`
      )->input( value   = mv_size
                enabled = abap_false
      )->get_parent( )->get_parent(
      )->buttons(
      )->button( text  = button_text_cancel
                 press = client->_event( 'BUTTON_CANCEL' )
      )->button( text  = `Download`
                 press = client->_event( 'BUTTON_CONFIRM' )
                 type  = 'Emphasized' ).

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      view_display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.

      WHEN `CALLBACK_DOWNLOAD`.
        check_confirmed = abap_true.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).

      WHEN `BUTTON_CONFIRM`.
        mv_check_download = abap_true.
        view_display( ).

      WHEN `BUTTON_CANCEL`.
        client->popup_destroy( ).
        client->nav_app_leave( client->get_app( client->get( )-s_draft-id_prev_app_stack ) ).
    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_error IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).
    r_result->error = x_root.

  ENDMETHOD.

  METHOD view_display.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( )->dialog( title      = `Error View`
                                                               afterclose = client->_event( 'BUTTON_CONFIRM' )
              )->content(
                  )->vbox( 'sapUiMediumMargin'
                      )->text( error->get_text( )
              )->get_parent( )->get_parent(
              )->buttons(
                  )->button( text  = `OK`
                             press = client->_event( 'BUTTON_CONFIRM' )
                             type  = 'Emphasized' ).

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      view_display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.
      WHEN `BUTTON_CONFIRM`.
        client->popup_destroy( ).
        client->nav_app_leave( ).
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_pop_bal IMPLEMENTATION.
  METHOD factory.

    r_result = NEW #( ).

    "read log infos
    "handle
    "..

    "read messages..
    DATA(lt_msg) = z2ui5_cl_util=>msg_get( i_messages ).
    LOOP AT lt_msg REFERENCE INTO DATA(lr_row).

      DATA(ls_row) = VALUE ty_s_msg( ).
      ls_row-type     = z2ui5_cl_util=>ui5_get_msg_type( lr_row->type ).
      ls_row-title    = lr_row->text.
*      lr_row->title = `title`.
*      lr_row->message = `message`.
      ls_row-subtitle = |{ lr_row->id } { lr_row->no }|.
      ls_row-date = z2ui5_cl_util=>time_get_date_by_stampl( lr_row->timestampl ).
      ls_row-time = z2ui5_cl_util=>time_get_time_by_stampl( lr_row->timestampl ).
*      lr_row->group = `001`.

      INSERT ls_row INTO TABLE r_result->mt_msg.
    ENDLOOP.

    r_result->title = i_title.

  ENDMETHOD.

  METHOD view_display.

    DATA(popup) = z2ui5_cl_xml_view=>factory_popup( ).
    popup = popup->dialog( title             = `Business Application Log`
                           contentheight     = '50%'
                           contentwidth      = '50%'
                           verticalScrolling = abap_false
                           afterclose        = client->_event( 'BUTTON_CONTINUE' ) ).

    DATA(table) = popup->table( client->_bind( mt_msg ) ).
    table->columns(
         )->column( )->text( 'Date' )->get_parent(
         )->column( )->text( 'Time' )->get_parent(
         )->column( )->text( 'Type' )->get_parent(
         )->column( )->text( 'ID' )->get_parent(
         )->column( )->text( 'No' )->get_parent(
         )->column( )->text( 'Message' ).

    table->items( )->column_list_item( )->cells(
       )->text( '{DATE}'
       )->text( '{TIME}'
       )->text( '{TYPE}'
       )->text( '{ID}'
       )->text( '{NUMBER}'
       )->text( '{MESSAGE}'
        ).

    popup->buttons(
       )->button( text  = 'continue'
                  press = client->_event( 'BUTTON_CONTINUE' )
                  type  = 'Emphasized' ).

    client->popup_display( popup->stringify( ) ).

  ENDMETHOD.

  METHOD z2ui5_if_app~main.

    me->client = client.

    IF check_initialized = abap_false.
      check_initialized = abap_true.
      view_display( ).
      RETURN.
    ENDIF.

    CASE client->get( )-event.
      WHEN `BUTTON_CONTINUE`.
        client->popup_destroy( ).
        client->nav_app_leave( ).
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_app_view1_xml IMPLEMENTATION.

  METHOD get.

    result =              `<mvc:View controllerName="z2ui5.controller.View1"` &&
             `    xmlns:mvc="sap.ui.core.mvc" displayBlock="true"` &&
             `    xmlns="sap.m">` &&
             `</mvc:View>` &&
             `` &&
              ``.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_view1_js IMPLEMENTATION.

  METHOD get.

    result =              `sap.ui.define(["sap/ui/core/mvc/Controller", "sap/ui/core/mvc/XMLView", "sap/ui/model/json/JSONModel",` && |\n|  &&
             `    "sap/ui/core/BusyIndicator", "sap/m/MessageBox", "sap/m/MessageToast", "sap/ui/core/Fragment", "sap/m/BusyDialog",` && |\n|  &&
             `    "sap/ui/VersionInfo", "z2ui5/cc/Server", "sap/ui/model/odata/v2/ODataModel", "sap/m/library",   "sap/ui/core/routing/HashChanger"` && |\n|  &&
             `],` && |\n|  &&
             `    function (Controller, XMLView, JSONModel, BusyIndicator, MessageBox, MessageToast, Fragment, mBusyDialog, VersionInfo,` && |\n|  &&
             `        Server, ODataModel, mobileLibrary, HashChanger) {` && |\n|  &&
             `        "use strict";` && |\n|  &&
             `        return Controller.extend("z2ui5.controller.View1", {` && |\n|  &&
             `` && |\n|  &&
             `            onInit() {` && |\n|  &&
             `` && |\n|  &&
             `                z2ui5.oRouter.attachRouteMatched(function (oEvent) {` && |\n|  &&
             `                    z2ui5.checkInit = true;` && |\n|  &&
             `                    Server.Roundtrip();` && |\n|  &&
             `                }, this);` && |\n|  &&
             `` && |\n|  &&
             `            },` && |\n|  &&
             `            async onAfterRendering() {` && |\n|  &&
             `` && |\n|  &&
             `                if (!z2ui5.oResponse) {` && |\n|  &&
             `                    return;` && |\n|  &&
             `                }` && |\n|  &&
             `` && |\n|  &&
             `                try {` && |\n|  &&
             `                    if (!z2ui5.oResponse.PARAMS) {` && |\n|  &&
             `                        BusyIndicator.hide();` && |\n|  &&
             `                        z2ui5.isBusy = false;` && |\n|  &&
             `                        return;` && |\n|  &&
             `                    }` && |\n|  &&
             `                    const { S_POPUP, S_VIEW_NEST, S_VIEW_NEST2, S_POPOVER, SET_APP_STATE_ACTIVE, SET_PUSH_STATE , SET_NAV_BACK } = z2ui5.oResponse.PARAMS;` && |\n|  &&
             `                    if (S_POPUP?.CHECK_DESTROY) {` && |\n|  &&
             `                        z2ui5.oController.PopupDestroy();` && |\n|  &&
             `                    }` && |\n|  &&
             `                    if (S_POPOVER?.CHECK_DESTROY) {` && |\n|  &&
             `                        z2ui5.oController.PopoverDestroy();` && |\n|  &&
             `                    }` && |\n|  &&
             `                    if (S_POPUP?.XML) {` && |\n|  &&
             `                        z2ui5.oController.PopupDestroy();` && |\n|  &&
             `                        await this.displayFragment(S_POPUP.XML, 'oViewPopup');` && |\n|  &&
             `                    }` && |\n|  &&
             `                    if (!z2ui5.checkNestAfter) {` && |\n|  &&
             `                        if (S_VIEW_NEST?.XML) {` && |\n|  &&
             `                            z2ui5.oController.NestViewDestroy();` && |\n|  &&
             `                            await this.displayNestedView(S_VIEW_NEST.XML, 'oViewNest', 'S_VIEW_NEST');` && |\n|  &&
             `                            z2ui5.checkNestAfter = true;` && |\n|  &&
             `                        }` && |\n|  &&
             `                    }` && |\n|  &&
             `                    if (!z2ui5.checkNestAfter2) {` && |\n|  &&
             `                        if (S_VIEW_NEST2?.XML) {` && |\n|  &&
             `                            z2ui5.oController.NestViewDestroy2();` && |\n|  &&
             `                            await this.displayNestedView2(S_VIEW_NEST2.XML, 'oViewNest2', 'S_VIEW_NEST2');` && |\n|  &&
             `                            z2ui5.checkNestAfter2 = true;` && |\n|  &&
             `                        }` && |\n|  &&
             `                    }` && |\n|  &&
             `                    if (S_POPOVER?.XML) {` && |\n|  &&
             `                        await this.displayPopover(S_POPOVER.XML, 'oViewPopover', S_POPOVER.OPEN_BY_ID);` && |\n|  &&
             `                    }` && |\n|  &&
             `` && |\n|  &&
             `                    let oState = JSON.parse(JSON.stringify({ view: z2ui5.oView.mProperties.viewContent, model: z2ui5.oView.getModel().getData(), response: z2ui5.oResponse }));` && |\n|  &&
             `                   if (SET_PUSH_STATE) {` && |\n|  &&
             `                     // sap.ui.core.routing.HashChanger.getInstance().setHash("423143124");` && |\n|  &&
             `                     // sap.ui.core.routing.HashChanger.getInstance().replaceHash("423143124");` && |\n|  &&
             `                      //history.go(-1);` && |\n|  &&
             `                        let urlObj = new URL(window.location.href);` && |\n|  &&
             `                        let hash = HashChanger.getInstance().getHash();` && |\n|  &&
             `                        if (!hash){` && |\n|  &&
             `                        hash = '#';` && |\n|  &&
             `                        }` && |\n|  &&
             `                        history.pushState(oState, "", urlObj.pathname + urlObj.search + hash + SET_PUSH_STATE);` && |\n|  &&
             `                     }else{` && |\n|  &&
             `                     //  debugger;` && |\n|  &&
             `                        history.replaceState(oState, "", window.location.href );` && |\n|  &&
             `                    }` && |\n|  &&
             `` && |\n|  &&
             `                    if (SET_APP_STATE_ACTIVE) {` && |\n|  &&
             `                      HashChanger.getInstance().replaceHash("z2ui5-xapp-state=" + z2ui5.oResponse.ID );` && |\n|  &&
             `                      //  let urlObj = new URL(window.location.href);` && |\n|  &&
             `                      //  urlObj.searchParams.set("z2ui5-xapp-state", z2ui5.oResponse.ID);` && |\n|  &&
             `                      //  history.replaceState(oState, null, urlObj.pathname + urlObj.search + urlObj.hash);` && |\n|  &&
             `                    } else {` && |\n|  &&
             `                       HashChanger.getInstance().replaceHash("");` && |\n|  &&
             `                      //  let urlObj = new URL(window.location.href);` && |\n|  &&
             `                      //  urlObj.searchParams.delete("z2ui5-xapp-state");` && |\n|  &&
             `                      //  history.replaceState(oState, null, urlObj.pathname + urlObj.search + urlObj.hash);` && |\n|  &&
             `                    }` && |\n|  &&
             `` && |\n|  &&
             `` && |\n|  &&
             `` && |\n|  &&
             `                    if (SET_NAV_BACK) {` && |\n|  &&
             `                        history.back();` && |\n|  &&
             `                    }` && |\n|  &&
             `` && |\n|  &&
             `                    z2ui5.onAfterRendering.forEach(item => {` && |\n|  &&
             `                        if (item !== undefined) {` && |\n|  &&
             `                            item();` && |\n|  &&
             `                        }` && |\n|  &&
             `                    }` && |\n|  &&
             `                    )` && |\n|  &&
             `` && |\n|  &&
             `                    BusyIndicator.hide();` && |\n|  &&
             `                    z2ui5.isBusy = false;` && |\n|  &&
             `                } catch (e) {` && |\n|  &&
             `                    BusyIndicator.hide();` && |\n|  &&
             `                    z2ui5.isBusy = false;` && |\n|  &&
             `                    MessageBox.error(e.toLocaleString(), {` && |\n|  &&
             `                        title: "Unexpected Error Occured - App Terminated",` && |\n|  &&
             `                        actions: [],` && |\n|  &&
             `                        onClose: () => {` && |\n|  &&
             `                            new mBusyDialog({` && |\n|  &&
             `                                text: "Please Restart the App"` && |\n|  &&
             `                            }).open();` && |\n|  &&
             `                        }` && |\n|  &&
             `                    })` && |\n|  &&
             `                }` && |\n|  &&
             `            },` && |\n|  &&
             `            async displayFragment(xml, viewProp) {` && |\n|  &&
             `                let oview_model = new JSONModel(z2ui5.oResponse.OVIEWMODEL);` && |\n|  &&
             `                const oFragment = await Fragment.load({` && |\n|  &&
             `                    definition: xml,` && |\n|  &&
             `                    controller: z2ui5.oControllerPopup,` && |\n|  &&
             `                    id: "popupId"` && |\n|  &&
             `                });` && |\n|  &&
             `                oFragment.setModel(oview_model);` && |\n|  &&
             `                z2ui5[viewProp] = oFragment;` && |\n|  &&
             `                z2ui5[viewProp].Fragment = Fragment;` && |\n|  &&
             `                oFragment.open();` && |\n|  &&
             `            },` && |\n|  &&
             `            async displayPopover(xml, viewProp, openById) {` && |\n|  &&
             `                sap.ui.require(["sap/ui/core/Element"], async function (Element) {` && |\n|  &&
             `                    const oFragment = await Fragment.load({` && |\n|  &&
             `                        definition: xml,` && |\n|  &&
             `                        controller: z2ui5.oControllerPopover,` && |\n|  &&
             `                        id: "popoverId"` && |\n|  &&
             `                    });` && |\n|  &&
             `                    let oview_model = new JSONModel(z2ui5.oResponse.OVIEWMODEL);` && |\n|  &&
             `                    oFragment.setModel(oview_model);` && |\n|  &&
             `                    z2ui5[viewProp] = oFragment;` && |\n|  &&
             `                    z2ui5[viewProp].Fragment = Fragment;` && |\n|  &&
             `                    let oControl = {};` && |\n|  &&
             `                    if (z2ui5.oView?.byId(openById)) {` && |\n|  &&
             `                        oControl = z2ui5.oView.byId(openById);` && |\n|  &&
             `                    } else if (z2ui5.oViewPopup?.Fragment.byId('popupId', openById)) {` && |\n|  &&
             `                        oControl = z2ui5.oViewPopup.Fragment.byId('popupId', openById);` && |\n|  &&
             `                    } else if (z2ui5.oViewNest?.byId(openById)) {` && |\n|  &&
             `                        oControl = z2ui5.oViewNest.byId(openById);` && |\n|  &&
             `                    } else if (z2ui5.oViewNest2?.byId(openById)) {` && |\n|  &&
             `                        oControl = z2ui5.oViewNest2.byId(openById);` && |\n|  &&
             `                    } else {` && |\n|  &&
             `                        if (Element.getElementById(openById)) {` && |\n|  &&
             `                            oControl = Element.getElementById(openById);` && |\n|  &&
             `                        } else {` && |\n|  &&
             `                            oControl = null;` && |\n|  &&
             `                        }` && |\n|  &&
             `                        ;` && |\n|  &&
             `                    }` && |\n|  &&
             `                    oFragment.openBy(oControl);` && |\n|  &&
             `                });` && |\n|  &&
             `            },` && |\n|  &&
             `            async displayNestedView(xml, viewProp, viewNestId) {` && |\n|  &&
             `                let oview_model = new JSONModel(z2ui5.oResponse.OVIEWMODEL);` && |\n|  &&
             `                const oView = await XMLView.create({` && |\n|  &&
             `                    definition: xml,` && |\n|  &&
             `                    controller: z2ui5.oControllerNest,` && |\n|  &&
             `                    preprocessors: {` && |\n|  &&
             `                        xml: {` && |\n|  &&
             `                            models: {` && |\n|  &&
             `                                template: oview_model` && |\n|  &&
             `                            }` && |\n|  &&
             `                        }` && |\n|  &&
             `                    }` && |\n|  &&
             `                });` && |\n|  &&
             `                oView.setModel(oview_model);` && |\n|  &&
             `                let oParent = z2ui5.oView.byId(z2ui5.oResponse.PARAMS[viewNestId].ID);` && |\n|  &&
             `                if (oParent) {` && |\n|  &&
             `                    try {` && |\n|  &&
             `                        oParent[z2ui5.oResponse.PARAMS[viewNestId].METHOD_DESTROY]();` && |\n|  &&
             `                    } catch { }` && |\n|  &&
             `                    oParent[z2ui5.oResponse.PARAMS[viewNestId].METHOD_INSERT](oView);` && |\n|  &&
             `                }` && |\n|  &&
             `                z2ui5[viewProp] = oView;` && |\n|  &&
             `            },` && |\n|  &&
             `            async displayNestedView2(xml, viewProp, viewNestId) {` && |\n|  &&
             `                let oview_model = new JSONModel(z2ui5.oResponse.OVIEWMODEL);` && |\n|  &&
             `                const oView = await XMLView.create({` && |\n|  &&
             `                    definition: xml,` && |\n|  &&
             `                    controller: z2ui5.oControllerNest2,` && |\n|  &&
             `                    preprocessors: {` && |\n|  &&
             `                        xml: {` && |\n|  &&
             `                            models: {` && |\n|  &&
             `                                template: oview_model` && |\n|  &&
             `                            }` && |\n|  &&
             `                        }` && |\n|  &&
             `                    }` && |\n|  &&
             `                });` && |\n|  &&
             `                oView.setModel(oview_model);` && |\n|  &&
             `                let oParent = z2ui5.oView.byId(z2ui5.oResponse.PARAMS[viewNestId].ID);` && |\n|  &&
             `                if (oParent) {` && |\n|  &&
             `                    try {` && |\n|  &&
             `                        oParent[z2ui5.oResponse.PARAMS[viewNestId].METHOD_DESTROY]();` && |\n|  &&
             `                    } catch { }` && |\n|  &&
             `                    oParent[z2ui5.oResponse.PARAMS[viewNestId].METHOD_INSERT](oView);` && |\n|  &&
             `                }` && |\n|  &&
             `                z2ui5[viewProp] = oView;` && |\n|  &&
             `            },` && |\n|  &&
             `            PopupDestroy() {` && |\n|  &&
             `                if (!z2ui5.oViewPopup) {` && |\n|  &&
             `                    return;` && |\n|  &&
             `                }` && |\n|  &&
             `                if (z2ui5.oViewPopup.close) {` && |\n|  &&
             `                    try {` && |\n|  &&
             `                        z2ui5.oViewPopup.close();` && |\n|  &&
             `                    } catch { }` && |\n|  &&
             `                }` && |\n|  &&
             `                z2ui5.oViewPopup.destroy();` && |\n|  &&
             `            },` && |\n|  &&
             `            PopoverDestroy() {` && |\n|  &&
             `                if (!z2ui5.oViewPopover) {` && |\n|  &&
             `                    return;` && |\n|  &&
             `                }` && |\n|  &&
             `                if (z2ui5.oViewPopover.close) {` && |\n|  &&
             `                    try {` && |\n|  &&
             `                        z2ui5.oViewPopover.close();` && |\n|  &&
             `                    } catch { }` && |\n|  &&
             `                }` && |\n|  &&
             `                z2ui5.oViewPopover.destroy();` && |\n|  &&
             `            },` && |\n|  &&
             `            NestViewDestroy() {` && |\n|  &&
             `                if (!z2ui5.oViewNest) {` && |\n|  &&
             `                    return;` && |\n|  &&
             `                }` && |\n|  &&
             `                z2ui5.oViewNest.destroy();` && |\n|  &&
             `            },` && |\n|  &&
             `            NestViewDestroy2() {` && |\n|  &&
             `                if (!z2ui5.oViewNest2) {` && |\n|  &&
             `                    return;` && |\n|  &&
             `                }` && |\n|  &&
             `                z2ui5.oViewNest2.destroy();` && |\n|  &&
             `            },` && |\n|  &&
             `            ViewDestroy() {` && |\n|  &&
             `                if (!z2ui5.oView) {` && |\n|  &&
             `                    return;` && |\n|  &&
             `                }` && |\n|  &&
             `                z2ui5.oView.destroy();` && |\n|  &&
             `            },` && |\n|  &&
             `            eF(...args) {` && |\n|  &&
             `` && |\n|  &&
             `                z2ui5.onBeforeEventFrontend.forEach(item => {` && |\n|  &&
             `                    if (item !== undefined) {` && |\n|  &&
             `                        item(args);` && |\n|  &&
             `                    }` && |\n|  &&
             `                }` && |\n|  &&
             `                )` && |\n|  &&
             `                let oCrossAppNavigator;` && |\n|  &&
             `                switch (args[0]) {` && |\n|  &&
             `                    case 'SET_SIZE_LIMIT':` && |\n|  &&
             `                        switch (args[2]) {` && |\n|  &&
             `                            case 'MAIN':` && |\n|  &&
             `                                z2ui5.oView.getModel().setSizeLimit(parseInt(args[1]));` && |\n|  &&
             `                                z2ui5.oView.getModel().refresh(true);` && |\n|  &&
             `                                break;` && |\n|  &&
             `                            case 'NEST':` && |\n|  &&
             `                                z2ui5.oViewNest.getModel().setSizeLimit(parseInt(args[1]));` && |\n|  &&
             `                                z2ui5.oViewNest.getModel().refresh(true);` && |\n|  &&
             `                                break;` && |\n|  &&
             `                            case 'NEST2':` && |\n|  &&
             `                                z2ui5.oViewNest2.getModel().setSizeLimit(parseInt(args[1]));` && |\n|  &&
             `                                z2ui5.oViewNest2.getModel().refresh(true);` && |\n|  &&
             `                                break;` && |\n|  &&
             `                            case 'POPUP':` && |\n|  &&
             `                                z2ui5.oPopup.getModel().setSizeLimit(parseInt(args[1]));` && |\n|  &&
             `                                z2ui5.oPopup.getModel().refresh(true);` && |\n|  &&
             `                                break;` && |\n|  &&
             `                            case 'POPOVER':` && |\n|  &&
             `                                z2ui5.oPopover.getModel().setSizeLimit(parseInt(args[1]));` && |\n|  &&
             `                                z2ui5.oPopover.getModel().refresh(true);` && |\n|  &&
             `                                break;` && |\n|  &&
             `                        }` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'HISTORY_BACK':` && |\n|  &&
             `                        history.back();` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'CLIPBOARD_APP_STATE':` && |\n|  &&
             `                            function copyToClipboard(textToCopy) {` && |\n|  &&
             `                                if (navigator.clipboard && typeof navigator.clipboard.writeText === "function") {` && |\n|  &&
             `                                    navigator.clipboard.writeText(textToCopy)` && |\n|  &&
             `                                        .then(() => {` && |\n|  &&
             `` && |\n|  &&
             `                                        })` && |\n|  &&
             `                                        .catch(err => {` && |\n|  &&
             `` && |\n|  &&
             `                                        });` && |\n|  &&
             `                                } else {` && |\n|  &&
             `                                    const tempTextArea = document.createElement("textarea");` && |\n|  &&
             `                                    tempTextArea.value = textToCopy;` && |\n|  &&
             `                                    document.body.appendChild(tempTextArea);` && |\n|  &&
             `` && |\n|  &&
             `                                    tempTextArea.select();` && |\n|  &&
             `                                    try {` && |\n|  &&
             `                                        document.execCommand("copy");` && |\n|  &&
             `` && |\n|  &&
             `                                    } catch (err) {` && |\n|  &&
             `` && |\n|  &&
             `                                    }` && |\n|  &&
             `                                    document.body.removeChild(tempTextArea);` && |\n|  &&
             `                                }` && |\n|  &&
             `                            }` && |\n|  &&
             `                                                    copyToClipboard(window.location.href + '#/z2ui5-xapp-state=' + z2ui5.oResponse.ID );` && |\n|  &&
             `                                                    break;` && |\n|  &&
             `                    case 'SET_ODATA_MODEL':` && |\n|  &&
             `                        var oModel = new ODataModel({ serviceUrl: args[1], annotationURI: (args.length > 3 ? args[3] : '') });` && |\n|  &&
             `                        z2ui5.oView.setModel(oModel, args[2] ? args[2] : undefined);` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'DOWNLOAD_B64_FILE':` && |\n|  &&
             `                        var a = document.createElement("a");` && |\n|  &&
             `                        a.href = args[1];` && |\n|  &&
             `                        a.download = args[2];` && |\n|  &&
             `                        a.click();` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'CROSS_APP_NAV_TO_PREV_APP':` && |\n|  &&
             `                        sap.ui.require([` && |\n|  &&
             `                            "sap/ushell/Container"` && |\n|  &&
             `                        ], async (ushellContainer) => {` && |\n|  &&
             `                            // z2ui5.oCrossAppNavigator = await ushellContainer.getServiceAsync("CrossApplicationNavigation");` && |\n|  &&
             `                            if (ushellContainer){` && |\n|  &&
             `                                z2ui5.oCrossAppNavigator = ushellContainer.getService("CrossApplicationNavigation");` && |\n|  &&
             `                            } else {` && |\n|  &&
             `                                // fallback needed for UI5 version < 1.120` && |\n|  &&
             `                                z2ui5.oCrossAppNavigator = sap.ushell.Container.getService("CrossApplicationNavigation");` && |\n|  &&
             `                            }` && |\n|  &&
             `                            z2ui5.oCrossAppNavigator.backToPreviousApp();` && |\n|  &&
             `                        });` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'CROSS_APP_NAV_TO_EXT':` && |\n|  &&
             `                        z2ui5.args = args;` && |\n|  &&
             `                        sap.ui.require([` && |\n|  &&
             `                            "sap/ushell/Container"` && |\n|  &&
             `                        ], async (ushellContainer) => {` && |\n|  &&
             `                            // z2ui5.oCrossAppNavigator = await ushellContainer.getServiceAsync("CrossApplicationNavigation");` && |\n|  &&
             `                            if (ushellContainer){` && |\n|  &&
             `                                z2ui5.oCrossAppNavigator = ushellContainer.getService("CrossApplicationNavigation");` && |\n|  &&
             `                            } else {` && |\n|  &&
             `                                // fallback needed for UI5 version < 1.120` && |\n|  &&
             `                                z2ui5.oCrossAppNavigator = sap.ushell.Container.getService("CrossApplicationNavigation");` && |\n|  &&
             `                            }` && |\n|  &&
             `                            const hash = (z2ui5.oCrossAppNavigator.hrefForExternal({` && |\n|  &&
             `                                target: z2ui5.args[1],` && |\n|  &&
             `                                params: z2ui5.args[2]` && |\n|  &&
             `                            })) || "";` && |\n|  &&
             `                            if (z2ui5.args[3] === 'EXT') {` && |\n|  &&
             `                                let url = window.location.href.split('#')[0] + hash;` && |\n|  &&
             `                                //todo` && |\n|  &&
             `                                //URLHelper.redirect(url, true);` && |\n|  &&
             `                            } else {` && |\n|  &&
             `                                z2ui5.oCrossAppNavigator.toExternal({` && |\n|  &&
             `                                    target: {` && |\n|  &&
             `                                        shellHash: hash` && |\n|  &&
             `                                    }` && |\n|  &&
             `                                });` && |\n|  &&
             `                            }` && |\n|  &&
             `                        });` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'LOCATION_RELOAD':` && |\n|  &&
             `                        window.location = args[1];` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'OPEN_NEW_TAB':` && |\n|  &&
             `                        window.open(args[1], '_blank');` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'POPUP_CLOSE':` && |\n|  &&
             `                        z2ui5.oController.PopupDestroy();` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'POPOVER_CLOSE':` && |\n|  &&
             `                        z2ui5.oController.PopoverDestroy();` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'NAV_CONTAINER_TO':` && |\n|  &&
             `                        var navCon = z2ui5.oView.byId(args[1]);` && |\n|  &&
             `                        var navConTo = z2ui5.oView.byId(args[2]);` && |\n|  &&
             `                        navCon.to(navConTo);` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'NEST_NAV_CONTAINER_TO':` && |\n|  &&
             `                        navCon = z2ui5.oViewNest.byId(args[1]);` && |\n|  &&
             `                        navConTo = z2ui5.oViewNest.byId(args[2]);` && |\n|  &&
             `                        navCon.to(navConTo);` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'NEST2_NAV_CONTAINER_TO':` && |\n|  &&
             `                        navCon = z2ui5.oViewNest2.byId(args[1]);` && |\n|  &&
             `                        navConTo = z2ui5.oViewNest2.byId(args[2]);` && |\n|  &&
             `                        navCon.to(navConTo);` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'POPUP_NAV_CONTAINER_TO':` && |\n|  &&
             `                        navCon = Fragment.byId("popupId", args[1]);` && |\n|  &&
             `                        navConTo = Fragment.byId("popupId", args[2]);` && |\n|  &&
             `                        navCon.to(navConTo);` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'POPOVER_NAV_CONTAINER_TO':` && |\n|  &&
             `                        navCon = Fragment.byId("popoverId", args[1]);` && |\n|  &&
             `                        navConTo = Fragment.byId("popoverId", args[2]);` && |\n|  &&
             `                        navCon.to(navConTo);` && |\n|  &&
             `                        break;` && |\n|  &&
             `                    case 'URLHELPER':` && |\n|  &&
             `                        var URLHelper = mobileLibrary.URLHelper;` && |\n|  &&
             |\n|.
    result = result &&
             `                        var params = args[2];` && |\n|  &&
             `                        switch (args[1]) {` && |\n|  &&
             `                            case 'REDIRECT':` && |\n|  &&
             `                                URLHelper.redirect(params.URL, params.NEW_WINDOW);` && |\n|  &&
             `                                break;` && |\n|  &&
             `                            case 'TRIGGER_EMAIL':` && |\n|  &&
             `                                URLHelper.triggerEmail(params.EMAIL, params.SUBJECT, params.BODY, params.CC, params.BCC, params.NEW_WINDOW);` && |\n|  &&
             `                                break;` && |\n|  &&
             `                            case 'TRIGGER_SMS':` && |\n|  &&
             `                                URLHelper.triggerSms(params);` && |\n|  &&
             `                                break;` && |\n|  &&
             `                            case 'TRIGGER_TEL':` && |\n|  &&
             `                                URLHelper.triggerTel(params);` && |\n|  &&
             `                                break;` && |\n|  &&
             `                        }` && |\n|  &&
             `                        break;` && |\n|  &&
             `                }` && |\n|  &&
             `            },` && |\n|  &&
             `            eB(...args) {` && |\n|  &&
             `` && |\n|  &&
             `                if (!window.navigator.onLine) {` && |\n|  &&
             `                    MessageBox.alert('No internet connection! Please reconnect to the server and try again.');` && |\n|  &&
             `                    return;` && |\n|  &&
             `                }` && |\n|  &&
             `                if (z2ui5.isBusy == true) {` && |\n|  &&
             `                    if (!args[0][2]) {` && |\n|  &&
             `                        let oBusyDialog = new mBusyDialog();` && |\n|  &&
             `                        oBusyDialog.open();` && |\n|  &&
             `                        setTimeout((oBusyDialog) => {` && |\n|  &&
             `                            oBusyDialog.close()` && |\n|  &&
             `                        }` && |\n|  &&
             `                            , 100, oBusyDialog);` && |\n|  &&
             `                        return;` && |\n|  &&
             `                    }` && |\n|  &&
             `                }` && |\n|  &&
             `                z2ui5.isBusy = true;` && |\n|  &&
             `                BusyIndicator.show();` && |\n|  &&
             `                z2ui5.oBody = {};` && |\n|  &&
             `                if (args[0][3] || z2ui5.oController == this) {` && |\n|  &&
             `                    if (z2ui5.oResponse.PARAMS.S_VIEW?.SWITCH_DEFAULT_MODEL_PATH) {` && |\n|  &&
             `                        var oModel = z2ui5.oView.getModel("http");` && |\n|  &&
             `                    } else {` && |\n|  &&
             `                        oModel = z2ui5.oView.getModel();` && |\n|  &&
             `                    }` && |\n|  &&
             `                    z2ui5.oBody.XX = oModel.getData().XX;` && |\n|  &&
             `                    z2ui5.oBody.VIEWNAME = 'MAIN';` && |\n|  &&
             `                } else if (z2ui5.oControllerPopup == this) {` && |\n|  &&
             `                    if (z2ui5.oViewPopup) {` && |\n|  &&
             `                        z2ui5.oBody.XX = z2ui5.oViewPopup.getModel().getData().XX;` && |\n|  &&
             `                    }` && |\n|  &&
             `                    z2ui5.oBody.VIEWNAME = 'MAIN';` && |\n|  &&
             `                } else if (z2ui5.oControllerPopover == this) {` && |\n|  &&
             `                    z2ui5.oBody.XX = z2ui5.oViewPopover.getModel().getData().XX;` && |\n|  &&
             `                    z2ui5.oBody.VIEWNAME = 'MAIN';` && |\n|  &&
             `                } else if (z2ui5.oControllerNest == this) {` && |\n|  &&
             `                    z2ui5.oBody.XX = z2ui5.oViewNest.getModel().getData().XX;` && |\n|  &&
             `                    z2ui5.oBody.VIEWNAME = 'NEST';` && |\n|  &&
             `                } else if (z2ui5.oControllerNest2 == this) {` && |\n|  &&
             `                    z2ui5.oBody.XX = z2ui5.oViewNest2.getModel().getData().XX;` && |\n|  &&
             `                    z2ui5.oBody.VIEWNAME = 'NEST2';` && |\n|  &&
             `                }` && |\n|  &&
             `                z2ui5.onBeforeRoundtrip.forEach(item => {` && |\n|  &&
             `                    if (item !== undefined) {` && |\n|  &&
             `                        item();` && |\n|  &&
             `                    }` && |\n|  &&
             `                }` && |\n|  &&
             `                )` && |\n|  &&
             `                z2ui5.oBody.ID = z2ui5.oResponse.ID;` && |\n|  &&
             `                z2ui5.oBody.ARGUMENTS = args;` && |\n|  &&
             `                z2ui5.oBody.ARGUMENTS.forEach((item, i) => {` && |\n|  &&
             `                    if (i == 0) {` && |\n|  &&
             `                        return;` && |\n|  &&
             `                    }` && |\n|  &&
             `                    if (typeof item === 'object') {` && |\n|  &&
             `                        z2ui5.oBody.ARGUMENTS[i] = JSON.stringify(item);` && |\n|  &&
             `                    }` && |\n|  &&
             `                }` && |\n|  &&
             `                );` && |\n|  &&
             `                z2ui5.oResponseOld = z2ui5.oResponse;` && |\n|  &&
             `                Server.Roundtrip();` && |\n|  &&
             `` && |\n|  &&
             `            },` && |\n|  &&
             `` && |\n|  &&
             `            updateModelIfRequired(paramKey, oView) {` && |\n|  &&
             `                if (z2ui5.oResponse.PARAMS == undefined) {` && |\n|  &&
             `                    return;` && |\n|  &&
             `                }` && |\n|  &&
             `                if (z2ui5.oResponse.PARAMS[paramKey]?.CHECK_UPDATE_MODEL) {` && |\n|  &&
             `                    let model = new JSONModel(z2ui5.oResponse.OVIEWMODEL);` && |\n|  &&
             `                    if (oView) {` && |\n|  &&
             `                        oView.setModel(model);` && |\n|  &&
             `                    }` && |\n|  &&
             `                }` && |\n|  &&
             `            },` && |\n|  &&
             `            async checkSDKcompatibility(err) {` && |\n|  &&
             `                let oCurrentVersionInfo = await VersionInfo.load();` && |\n|  &&
             `                var ui5_sdk = oCurrentVersionInfo.gav.includes('com.sap.ui5') ? true : false;` && |\n|  &&
             `                if (!ui5_sdk) {` && |\n|  &&
             `                    if (err) {` && |\n|  &&
             `                        MessageBox.error("openui5 SDK is loaded, module: " + err._modules + " is not availabe in openui5");` && |\n|  &&
             `                        return;` && |\n|  &&
             `                    }` && |\n|  &&
             `                    ;` && |\n|  &&
             `                }` && |\n|  &&
             `                ; MessageBox.error(err.toLocaleString());` && |\n|  &&
             `            },` && |\n|  &&
             `            showMessage(msgType, params) {` && |\n|  &&
             `                if (params == undefined) {` && |\n|  &&
             `                    return;` && |\n|  &&
             `                }` && |\n|  &&
             `                if (params[msgType]?.TEXT !== undefined) {` && |\n|  &&
             `                    if (msgType === 'S_MSG_TOAST') {` && |\n|  &&
             `                        MessageToast.show(params[msgType].TEXT, {` && |\n|  &&
             `                            duration: params[msgType].DURATION ? parseInt(params[msgType].DURATION) : 3000,` && |\n|  &&
             `                            width: params[msgType].WIDTH ? params[msgType].WIDTH : '15em',` && |\n|  &&
             `                            onClose: params[msgType].ONCLOSE ? params[msgType].ONCLOSE : null,` && |\n|  &&
             `                            autoClose: params[msgType].AUTOCLOSE ? true : false,` && |\n|  &&
             `                            animationTimingFunction: params[msgType].ANIMATIONTIMINGFUNCTION ? params[msgType].ANIMATIONTIMINGFUNCTION : 'ease',` && |\n|  &&
             `                            animationDuration: params[msgType].ANIMATIONDURATION ? parseInt(params[msgType].ANIMATIONDURATION) : 1000,` && |\n|  &&
             `                            closeonBrowserNavigation: params[msgType].CLOSEONBROWSERNAVIGATION ? true : false` && |\n|  &&
             `                        });` && |\n|  &&
             `                        if (params[msgType].CLASS) {` && |\n|  &&
             `                            let mtoast = {};` && |\n|  &&
             `                            mtoast = document.getElementsByClassName("sapMMessageToast")[0];` && |\n|  &&
             `                            if (mtoast) {` && |\n|  &&
             `                                mtoast.classList.add(params[msgType].CLASS);` && |\n|  &&
             `                            }` && |\n|  &&
             `                        }` && |\n|  &&
             `                        ;` && |\n|  &&
             `                    } else if (msgType === 'S_MSG_BOX') {` && |\n|  &&
             `` && |\n|  &&
             `                        let oParams = {` && |\n|  &&
             `                            styleClass: params[msgType].STYLECLASS ? params[msgType].STYLECLASS : '',` && |\n|  &&
             `                            title: params[msgType].TITLE ? params[msgType].TITLE : '',` && |\n|  &&
             `                            onClose: params[msgType].ONCLOSE ? Function("sAction", "return " + params[msgType].ONCLOSE) : null,` && |\n|  &&
             `                            actions: params[msgType].ACTIONS ? params[msgType].ACTIONS : 'OK',` && |\n|  &&
             `                            emphasizedAction: params[msgType].EMPHASIZEDACTION ? params[msgType].EMPHASIZEDACTION : 'OK',` && |\n|  &&
             `                            initialFocus: params[msgType].INITIALFOCUS ? params[msgType].INITIALFOCUS : null,` && |\n|  &&
             `                            textDirection: params[msgType].TEXTDIRECTION ? params[msgType].TEXTDIRECTION : 'Inherit',` && |\n|  &&
             `                            icon: params[msgType].ICON ? params[msgType].ICON : 'NONE',` && |\n|  &&
             `                            details: params[msgType].DETAILS ? params[msgType].DETAILS : '',` && |\n|  &&
             `                            closeOnNavigation: params[msgType].CLOSEONNAVIGATION ? true : false` && |\n|  &&
             `                        };` && |\n|  &&
             `                        if (oParams.icon = 'None') { delete oParams.icon };` && |\n|  &&
             `                        MessageBox[params[msgType].TYPE](params[msgType].TEXT, oParams);` && |\n|  &&
             `                    }` && |\n|  &&
             `                }` && |\n|  &&
             `            },` && |\n|  &&
             `            async displayView(xml, viewModel) {` && |\n|  &&
             `                let oview_model = new JSONModel(viewModel);` && |\n|  &&
             `                var oModel = oview_model;` && |\n|  &&
             `                if (z2ui5.oResponse.PARAMS.S_VIEW?.SWITCH_DEFAULT_MODEL_PATH) {` && |\n|  &&
             `                    oModel = new ODataModel({` && |\n|  &&
             `                        serviceUrl: z2ui5.oResponse.PARAMS.S_VIEW?.SWITCH_DEFAULT_MODEL_PATH,` && |\n|  &&
             `                        annotationURI: z2ui5.oResponse.PARAMS.S_VIEW?.SWITCHDEFAULTMODELANNOURI` && |\n|  &&
             `                    });` && |\n|  &&
             `                }` && |\n|  &&
             `                z2ui5.oView = await XMLView.create({` && |\n|  &&
             `                    definition: xml,` && |\n|  &&
             `                    models: oModel,` && |\n|  &&
             `                    controller: z2ui5.oController,` && |\n|  &&
             `                    id: 'mainView',` && |\n|  &&
             `                    preprocessors: {` && |\n|  &&
             `                        xml: {` && |\n|  &&
             `                            models: {` && |\n|  &&
             `                                template: oview_model` && |\n|  &&
             `                            }` && |\n|  &&
             `                        }` && |\n|  &&
             `                    }` && |\n|  &&
             `                });` && |\n|  &&
             `                z2ui5.oView.setModel(z2ui5.oDeviceModel, "device");` && |\n|  &&
             `                if (z2ui5.oResponse.PARAMS.S_VIEW?.SWITCH_DEFAULT_MODEL_PATH) {` && |\n|  &&
             `                    z2ui5.oView.setModel(oview_model, "http");` && |\n|  &&
             `                }` && |\n|  &&
             `                z2ui5.oApp.removeAllPages();` && |\n|  &&
             `                z2ui5.oApp.insertPage(z2ui5.oView);` && |\n|  &&
             `            },` && |\n|  &&
             `        })` && |\n|  &&
             `    });` && |\n|  &&
              ``.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_style_css IMPLEMENTATION.

  METHOD get.

    result =              `/* Enter your custom styles here */` &&
              ``.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_server_js IMPLEMENTATION.

  METHOD get.

    result =              `sap.ui.define(["sap/ui/core/BusyIndicator", "sap/m/MessageBox"` && |\n|  &&
             `],` && |\n|  &&
             `    function (BusyIndicator, MessageBox) {` && |\n|  &&
             `        "use strict";` && |\n|  &&
             `` && |\n|  &&
             `        return {` && |\n|  &&
             `` && |\n|  &&
             `            endSession: function () {` && |\n|  &&
             `` && |\n|  &&
             `                if (z2ui5.contextId) {` && |\n|  &&
             `                    fetch(z2ui5.oConfig.pathname, {` && |\n|  &&
             `                        method: 'HEAD',` && |\n|  &&
             `                        keepalive: true,` && |\n|  &&
             `                        headers: {` && |\n|  &&
             `                            'sap-terminate': 'session',` && |\n|  &&
             `                            'sap-contextid': z2ui5.contextId,` && |\n|  &&
             `                            'sap-contextid-accept': 'header'` && |\n|  &&
             `                        }` && |\n|  &&
             `                    });` && |\n|  &&
             `                    delete z2ui5.contextId;` && |\n|  &&
             `                }` && |\n|  &&
             `` && |\n|  &&
             `            },` && |\n|  &&
             `            Roundtrip() {` && |\n|  &&
             `                z2ui5.checkTimerActive = false;` && |\n|  &&
             `                z2ui5.checkNestAfter = false;` && |\n|  &&
             `                z2ui5.checkNestAfter2 = false;` && |\n|  &&
             `                let event = (args) => {` && |\n|  &&
             `                    if (args != undefined) {` && |\n|  &&
             `                        return args[0][0];` && |\n|  &&
             `                    }` && |\n|  &&
             `                };` && |\n|  &&
             `` && |\n|  &&
             `              //  try{` && |\n|  &&
             `              //  let oState = JSON.parse(JSON.stringify({ view: z2ui5.oView.mProperties.viewContent, model: z2ui5.oView.getModel().getData(), response: z2ui5.oResponse }));` && |\n|  &&
             `              //  history.replaceState(oState, "", window.location.href );` && |\n|  &&
             `              //  }catch(e){}` && |\n|  &&
             `` && |\n|  &&
             `                z2ui5.oBody ??= {};` && |\n|  &&
             `                z2ui5.oBody.S_FRONT = {` && |\n|  &&
             `                    ID: z2ui5?.oBody?.ID,` && |\n|  &&
             `                    CONFIG: z2ui5.oConfig,` && |\n|  &&
             `                    XX: z2ui5?.oBody?.XX,` && |\n|  &&
             `                    ORIGIN: window.location.origin,` && |\n|  &&
             `                    PATHNAME: window.location.pathname,` && |\n|  &&
             `                    SEARCH: (z2ui5.search) ? z2ui5.search : window.location.search,` && |\n|  &&
             `                    VIEW: z2ui5.oBody?.VIEWNAME,` && |\n|  &&
             `                    EVENT: event(z2ui5.oBody?.ARGUMENTS),` && |\n|  &&
             `                    HASH: window.location.hash,` && |\n|  &&
             `                };` && |\n|  &&
             `                if (z2ui5.oBody?.ARGUMENTS != undefined) {` && |\n|  &&
             `                    if (z2ui5.oBody?.ARGUMENTS.length > 0) {` && |\n|  &&
             `                        z2ui5.oBody?.ARGUMENTS.shift();` && |\n|  &&
             `                    }` && |\n|  &&
             `                }` && |\n|  &&
             `                z2ui5.oBody.S_FRONT.T_EVENT_ARG = z2ui5.oBody?.ARGUMENTS;` && |\n|  &&
             `                delete z2ui5.oBody.ID;` && |\n|  &&
             `                delete z2ui5.oBody?.VIEWNAME;` && |\n|  &&
             `                delete z2ui5.oBody?.S_FRONT.XX;` && |\n|  &&
             `                delete z2ui5.oBody?.ARGUMENTS;` && |\n|  &&
             `                if (!z2ui5.oBody.S_FRONT.T_EVENT_ARG) {` && |\n|  &&
             `                    delete z2ui5.oBody.S_FRONT.T_EVENT_ARG;` && |\n|  &&
             `                }` && |\n|  &&
             `                if (z2ui5.oBody.S_FRONT.T_EVENT_ARG) {` && |\n|  &&
             `                    if (z2ui5.oBody.S_FRONT.T_EVENT_ARG.length == 0) {` && |\n|  &&
             `                        delete z2ui5.oBody.S_FRONT.T_EVENT_ARG;` && |\n|  &&
             `                    }` && |\n|  &&
             `                }` && |\n|  &&
             `                if (z2ui5.oBody.S_FRONT.T_STARTUP_PARAMETERS == undefined) {` && |\n|  &&
             `                    delete z2ui5.oBody.S_FRONT.T_STARTUP_PARAMETERS;` && |\n|  &&
             `                }` && |\n|  &&
             `                if (z2ui5.oBody.S_FRONT.SEARCH == '') {` && |\n|  &&
             `                    delete z2ui5.oBody.S_FRONT.SEARCH;` && |\n|  &&
             `                }` && |\n|  &&
             `                if (!z2ui5.oBody.XX) {` && |\n|  &&
             `                    delete z2ui5.oBody.XX;` && |\n|  &&
             `                }` && |\n|  &&
             `                this.readHttp();` && |\n|  &&
             `            },` && |\n|  &&
             `` && |\n|  &&
             `            async readHttp() {` && |\n|  &&
             `                const response = await fetch(z2ui5.oConfig.pathname, {` && |\n|  &&
             `                    method: 'POST',` && |\n|  &&
             `                    headers: {` && |\n|  &&
             `                        'Content-Type': 'application/json',` && |\n|  &&
             `                        'sap-contextid-accept': 'header',` && |\n|  &&
             `                        'sap-contextid': z2ui5.contextId` && |\n|  &&
             `                    },` && |\n|  &&
             `                    body: JSON.stringify(z2ui5.oBody)` && |\n|  &&
             `                });` && |\n|  &&
             `                z2ui5.contextId = response.headers.get("sap-contextid");` && |\n|  &&
             `                if (!response.ok) {` && |\n|  &&
             `                    const responseText = await response.text();` && |\n|  &&
             `                    this.responseError(responseText);` && |\n|  &&
             `                } else {` && |\n|  &&
             `                    const responseData = await response.json();` && |\n|  &&
             `                    z2ui5.responseData = responseData;` && |\n|  &&
             `                    this.responseSuccess({` && |\n|  &&
             `                        ID: responseData.S_FRONT.ID,` && |\n|  &&
             `                        PARAMS: responseData.S_FRONT.PARAMS,` && |\n|  &&
             `                        OVIEWMODEL: responseData.MODEL,` && |\n|  &&
             `                    });` && |\n|  &&
             `                }` && |\n|  &&
             `            },` && |\n|  &&
             `            async responseSuccess(response) {` && |\n|  &&
             `                try {` && |\n|  &&
             `                    z2ui5.oResponse = response;` && |\n|  &&
             `                    if (z2ui5.oResponse.PARAMS?.S_VIEW?.CHECK_DESTROY) {` && |\n|  &&
             `                        z2ui5.oController.ViewDestroy();` && |\n|  &&
             `                    }` && |\n|  &&
             `                    ; if (z2ui5.oResponse.PARAMS?.S_FOLLOW_UP_ACTION?.CUSTOM_JS) {` && |\n|  &&
             `                        setTimeout(() => {` && |\n|  &&
             `                            for ( let i = 0; i < z2ui5.oResponse?.PARAMS.S_FOLLOW_UP_ACTION.CUSTOM_JS.length ; i++ ){` && |\n|  &&
             `                            let mParams = z2ui5.oResponse?.PARAMS.S_FOLLOW_UP_ACTION.CUSTOM_JS[i].split("'");` && |\n|  &&
             `                            let mParamsEF = mParams.filter((val, index) => index % 2)` && |\n|  &&
             `                            if (mParamsEF.length) {` && |\n|  &&
             `                                z2ui5.oController.eF.apply(undefined, mParamsEF);` && |\n|  &&
             `                            } else {` && |\n|  &&
             `                                Function("return " + mParams[0])();` && |\n|  &&
             `                            }` && |\n|  &&
             `                            }` && |\n|  &&
             `                        }, 100);` && |\n|  &&
             `                    };` && |\n|  &&
             `                    z2ui5.oController.showMessage('S_MSG_TOAST', z2ui5.oResponse.PARAMS);` && |\n|  &&
             `                    z2ui5.oController.showMessage('S_MSG_BOX', z2ui5.oResponse.PARAMS);` && |\n|  &&
             `                    if (z2ui5.oResponse.PARAMS?.S_VIEW?.XML) {` && |\n|  &&
             `                        if (z2ui5.oResponse.PARAMS?.S_VIEW?.XML !== '') {` && |\n|  &&
             `                            z2ui5.oController.ViewDestroy();` && |\n|  &&
             `                            await z2ui5.oController.displayView(z2ui5.oResponse.PARAMS.S_VIEW.XML, z2ui5.oResponse.OVIEWMODEL);` && |\n|  &&
             `                            return;` && |\n|  &&
             `                        }` && |\n|  &&
             `                    }` && |\n|  &&
             `                    z2ui5.oController.updateModelIfRequired('S_VIEW', z2ui5.oView);` && |\n|  &&
             `                    z2ui5.oController.updateModelIfRequired('S_VIEW_NEST', z2ui5.oViewNest);` && |\n|  &&
             `                    z2ui5.oController.updateModelIfRequired('S_VIEW_NEST2', z2ui5.oViewNest2);` && |\n|  &&
             `                    z2ui5.oController.updateModelIfRequired('S_POPUP', z2ui5.oViewPopup);` && |\n|  &&
             `                    z2ui5.oController.updateModelIfRequired('S_POPOVER', z2ui5.oViewPopover);` && |\n|  &&
             `                    z2ui5.oController.onAfterRendering();` && |\n|  &&
             `                } catch (e) {` && |\n|  &&
             `                    BusyIndicator.hide();` && |\n|  &&
             `                    if (e.message.includes("openui5")) {` && |\n|  &&
             `                        if (e.message.includes("script load error")) {` && |\n|  &&
             `                            z2ui5.oController.checkSDKcompatibility(e)` && |\n|  &&
             `                        }` && |\n|  &&
             `                    } else {` && |\n|  &&
             `                        MessageBox.error(e.toLocaleString());` && |\n|  &&
             `                    }` && |\n|  &&
             `                }` && |\n|  &&
             `            },` && |\n|  &&
             `            responseError(response) {` && |\n|  &&
             `                document.write(response);` && |\n|  &&
             `            },` && |\n|  &&
             `        };` && |\n|  &&
             `    });` && |\n|  &&
              ``.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_models_js IMPLEMENTATION.

  METHOD get.

    result =              `sap.ui.define([` && |\n|  &&
             `    "sap/ui/model/json/JSONModel",` && |\n|  &&
             `    "sap/ui/Device"` && |\n|  &&
             `],` && |\n|  &&
             `function (JSONModel, Device) {` && |\n|  &&
             `    "use strict";` && |\n|  &&
             `` && |\n|  &&
             `    return {` && |\n|  &&
             `        /**` && |\n|  &&
             `         * Provides runtime info for the device the UI5 app is running on as JSONModel` && |\n|  &&
             `         */` && |\n|  &&
             `        createDeviceModel: function () {` && |\n|  &&
             `            var oModel = new JSONModel(Device);` && |\n|  &&
             `            oModel.setDefaultBindingMode("OneWay");` && |\n|  &&
             `            return oModel;` && |\n|  &&
             `        }` && |\n|  &&
             `    };` && |\n|  &&
             `` && |\n|  &&
             `});` && |\n|  &&
              ``.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_manifest_json IMPLEMENTATION.

  METHOD get.

    result =              `{` &&
             `  "_version": "1.65.0",` &&
             `  "sap.app": {` &&
             `    "id": "z2ui5",` &&
             `    "type": "application",` &&
             `    "applicationVersion": {` &&
             `      "version": "0.0.1"` &&
             `    },` &&
             `    "title": "",` &&
             `    "description": "",` &&
             `    "resources": "resources.json",` &&
             `    "sourceTemplate": {` &&
             `      "id": "@sap/generator-fiori:basic",` &&
             `      "version": "1.15.0",` &&
             `      "toolsId": "3a966e20-9635-4c28-8861-d1b66f79f1de"` &&
             `    },` &&
             `    "dataSources": {` &&
             `      "http": {` &&
             `        "uri": "/sap/bc/z2ui5",` &&
             `        "type": "OData",` &&
             `        "settings": {` &&
             `          "annotations": [],` &&
             `          "localUri": "localService/metadata.xml",` &&
             `          "odataVersion": "2.0"` &&
             `        }` &&
             `      }` &&
             `    },` &&
             `    "crossNavigation": {` &&
             `      "inbounds": {` &&
             `        "z2ui5-display": {` &&
             `          "semanticObject": "z2ui5",` &&
             `          "action": "display",` &&
             `          "title": "",` &&
             `          "signature": {` &&
             `            "parameters": {},` &&
             `            "additionalParameters": "allowed"` &&
             `          }` &&
             `        }` &&
             `      }` &&
             `    }` &&
             `  },` &&
             `  "sap.ui": {` &&
             `    "technology": "UI5",` &&
             `    "icons": {` &&
             `      "icon": "",` &&
             `      "favIcon": "",` &&
             `      "phone": "",` &&
             `      "phone@2": "",` &&
             `      "tablet": "",` &&
             `      "tablet@2": ""` &&
             `    },` &&
             `    "deviceTypes": {` &&
             `      "desktop": true,` &&
             `      "tablet": true,` &&
             `      "phone": true` &&
             `    }` &&
             `  },` &&
             `  "sap.ui5": {` &&
             `    "flexEnabled": true,` &&
             `    "dependencies": {` &&
             `      "minUI5Version": "1.128.1",` &&
             `      "libs": {` &&
             `        "sap.m": {},` &&
             `        "sap.ui.core": {}` &&
             `      }` &&
             `    },` &&
             `    "contentDensities": {` &&
             `      "compact": true,` &&
             `      "cozy": true` &&
             `    },` &&
             `    "services": {` &&
             `      "ShellUIService": {` &&
             `        "factoryName": "sap.ushell.ui5service.ShellUIService"` &&
             `      }` &&
             `    },` &&
             `    "resources": {` &&
             `      "css": [` &&
             `        {` &&
             `          "uri": "css/style.css"` &&
             `        }` &&
             `      ]` &&
             `    },` &&
             `    "routing": {` &&
             `      "config": {` &&
             `        "routerClass": "sap.m.routing.Router",` &&
             `        "viewType": "XML",` &&
             `        "viewPath": "z2ui5.view",` &&
             `        "controlAggregation": "pages",` &&
             `        "controlId": "app",` &&
             `        "clearControlAggregation": false` &&
             `      },` &&
             `      "routes": [` &&
             `        {` &&
             `          "name": "RouteView1",` &&
             `          "pattern": ":?query:",` &&
             `          "target": [` &&
             `            "TargetView1"` &&
             `          ]` &&
             `        },` &&
             `        {` &&
             `          "name": "RouteView2",` &&
             `          "pattern": ":?query:",` &&
             `          "target": [` &&
             `            "TargetView2"` &&
             `          ]` &&
             `        }` &&
             `      ],` &&
             `      "targets": {` &&
             `        "TargetView1": {` &&
             `          "viewType": "XML",` &&
             `          "transition": "flip",` &&
             `          "clearControlAggregation": false,` &&
             `          "viewId": "View1",` &&
             `          "viewName": "View1"` &&
             `        },` &&
             `        "TargetView2": {` &&
             `          "viewType": "XML",` &&
             `          "transition": "flip",` &&
             `          "clearControlAggregation": false,` &&
             `          "viewId": "View2",` &&
             `          "viewName": "View2"` &&
             `        }` &&
             `      }` &&
             `    },` &&
             `    "rootView": {` &&
             `      "viewName": "z2ui5.view.App",` &&
             `      "type": "XML",` &&
             `      "id": "App"` &&
             `    }` &&
             `  },` &&
             `  "sap.cloud": {` &&
             `    "public": true,` &&
             `    "service": "z2ui5"` &&
             `  }` &&
             `}` &&
             `` &&
              ``.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_index_html IMPLEMENTATION.

  METHOD get.

    result =              `<!DOCTYPE html>` &&
             `<html lang="en">` &&
             `<head>` &&
             `    <meta charset="UTF-8">` &&
             `    <meta name="viewport" content="width=device-width, initial-scale=1.0">` &&
             `    <meta http-equiv="X-UA-Compatible" content="IE=edge">` &&
             `    <title></title>` &&
             `    <style>` &&
             `        html, body, body > div, #container, #container-uiarea {` &&
             `            height: 100%;` &&
             `        }` &&
             `    </style>` &&
             `    <script` &&
             `        id="sap-ui-bootstrap"` &&
             `        src="resources/sap-ui-core.js"` &&
             `        data-sap-ui-theme="sap_horizon"` &&
             `        data-sap-ui-resourceroots='{` &&
             `            "z2ui5": "./"` &&
             `        }'` &&
             `        data-sap-ui-oninit="module:sap/ui/core/ComponentSupport"` &&
             `        data-sap-ui-compatVersion="edge"` &&
             `        data-sap-ui-async="true"` &&
             `        data-sap-ui-frameOptions="trusted"` &&
             `    ></script>` &&
             `</head>` &&
             `<body class="sapUiBody sapUiSizeCompact" id="content">` &&
             `    <div` &&
             `        data-sap-ui-component` &&
             `        data-name="z2ui5"` &&
             `        data-id="container"` &&
             `        data-settings='{"id" : "z2ui5"}'` &&
             `        data-handle-validation="true"` &&
             `    ></div>` &&
             `</body>` &&
             `</html>` &&
             `` &&
              ``.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_debugtool_xml IMPLEMENTATION.

  METHOD get.

    result =              `<core:FragmentDefinition` &&
             `    xmlns="sap.m"` &&
             `    xmlns:mvc="sap.ui.core.mvc"` &&
             `    xmlns:core="sap.ui.core"` &&
             `    xmlns:html="http://www.w3.org/1999/xhtml"` &&
             `    xmlns:ce="sap.ui.codeeditor"` &&
             `>` &&
             `    <Dialog` &&
             `        title="abap2UI5 - DebugTool"` &&
             `        stretch="true"` &&
             `    >` &&
             `        <IconTabHeader` &&
             `            selectedKey="PLAIN"` &&
             `            select="onItemSelect"` &&
             `        >` &&
             `            <items>` &&
             `            <IconTabFilter` &&
             `                    text="Config"` &&
             `                    key="CONFIG"` &&
             `          enabled="true"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="Previous Request"` &&
             `                    key="REQUEST"` &&
             `          enabled="true"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="Response"` &&
             `                    key="PLAIN"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="Source Code"` &&
             `                    key="SOURCE"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="View"` &&
             `                    key="VIEW"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="View Model"` &&
             `                    key="MODEL"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="Popup"` &&
             `                    key="POPUP"` &&
             `          enabled="{/activePopup}"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="Popup Model"` &&
             `                    key="POPUP_MODEL"` &&
             `          enabled="{/activePopup}"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="Popover"` &&
             `                    key="POPOVER"` &&
             `          enabled="{/activePopover}"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="Popover Model"` &&
             `                    key="POPOVER_MODEL"` &&
             `          enabled="{/activePopover}"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="Nest1"` &&
             `                    key="NEST1"` &&
             `          enabled="{/activeNest1}"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="Nest1 Model"` &&
             `                    key="NEST1_MODEL"` &&
             `          enabled="{/activeNest1}"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="Nest2"` &&
             `                    key="NEST2"` &&
             `          enabled="{/activeNest2}"` &&
             `                />` &&
             `                <IconTabFilter` &&
             `                    text="Nest2 Model"` &&
             `                    key="NEST2_MODEL"` &&
             `          enabled="{/activeNest2}"` &&
             `                />` &&
             `            </items>` &&
             `        </IconTabHeader>` &&
             `      <VBox>` &&
             `        <ToggleButton text="Source XML after Templating" visible="{/isTemplating}" pressed="{/templatingSource}" press="onTemplatingPress" />` &&
             `        <ce:CodeEditor` &&
             `            type="{/type}"` &&
             `            value="{/value}"` &&
             `            height="2000px"` &&
             `            width="10000px"` &&
             `            visible="{/editor_visible}"` &&
             `        /></VBox>` &&
             `    <VBox visible="{/source_visible}">` &&
             `        <core:HTML/>` &&
             `      </VBox>` &&
             `        <endButton>` &&
             `            <Button` &&
             `                text="Close"` &&
             `                press="onClose"` &&
             `            />` &&
             `        </endButton>` &&
             `    </Dialog>` &&
             `</core:FragmentDefinition>` &&
             `` &&
              ``.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_debugtool_js IMPLEMENTATION.

  METHOD get.

    result =              `sap.ui.define(["sap/ui/core/Control", "sap/ui/core/Fragment", "sap/ui/model/json/JSONModel"], (Control, Fragment, JSONModel) => {` && |\n|  &&
             `    "use strict";` && |\n|  &&
             `` && |\n|  &&
             `    return Control.extend("z2ui5.cc.DebugTool", {` && |\n|  &&
             `` && |\n|  &&
             `        //printer XML` && |\n|  &&
             `        prettifyXml: function (sourceXml) {` && |\n|  &&
             `            const xmlDoc = new DOMParser().parseFromString(sourceXml, 'application/xml');` && |\n|  &&
             `            var sParse = ``&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;` && |\n|  &&
             `                &lt;xsl:strip-space elements="*" /&gt;` && |\n|  &&
             `                &lt;xsl:template match="para[content-style][not(text())]"&gt;` && |\n|  &&
             `                    &lt;xsl:value-of select="normalize-space(.)" /&gt;` && |\n|  &&
             `                &lt;/xsl:template&gt;` && |\n|  &&
             `                &lt;xsl:template match="node()|@*"&gt;` && |\n|  &&
             `                    &lt;xsl:copy&gt;` && |\n|  &&
             `                        &lt;xsl:apply-templates select="node()|@*" /&gt;` && |\n|  &&
             `                    &lt;/xsl:copy&gt;` && |\n|  &&
             `                &lt;/xsl:template&gt;` && |\n|  &&
             `                &lt;xsl:output indent="yes" /&gt;` && |\n|  &&
             `            &lt;/xsl:stylesheet&gt;``;` && |\n|  &&
             `            sParse = sParse.replace(/&gt;/g, unescape("%3E")).replace(/&lt;/g, unescape("%3C"));` && |\n|  &&
             `            const xsltDoc = new DOMParser().parseFromString(sParse, 'application/xml');` && |\n|  &&
             `` && |\n|  &&
             `            const xsltProcessor = new XSLTProcessor();` && |\n|  &&
             `            xsltProcessor.importStylesheet(xsltDoc);` && |\n|  &&
             `            const resultDoc = xsltProcessor.transformToDocument(xmlDoc);` && |\n|  &&
             `            const resultXml = new XMLSerializer().serializeToString(resultDoc);` && |\n|  &&
             `            return resultXml.replace(/&gt;/g, ">").replace(/&lt;/g, "<");` && |\n|  &&
             `        }, onItemSelect: function (oEvent) {` && |\n|  &&
             `            const selItem = oEvent.getSource().getSelectedKey();` && |\n|  &&
             `            const oView = z2ui5?.oView;` && |\n|  &&
             `            const oResponse = z2ui5?.oResponse;` && |\n|  &&
             `            const displayEditor = this.displayEditor.bind(this);` && |\n|  &&
             `` && |\n|  &&
             `            switch (selItem) {` && |\n|  &&
             `                case 'CONFIG':` && |\n|  &&
             `                    displayEditor(oEvent, JSON.stringify(z2ui5.oConfig, null, 3), 'json');` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'MODEL':` && |\n|  &&
             `                    displayEditor(oEvent, JSON.stringify(oView?.getModel()?.getData(), null, 3), 'json');` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'VIEW':` && |\n|  &&
             `                    const viewContent = oView?.mProperties?.viewContent || z2ui5.responseData.S_FRONT.PARAMS.S_VIEW.XML;` && |\n|  &&
             `                    displayEditor(oEvent, this.prettifyXml(viewContent), 'xml', this.prettifyXml(oView?._xContent.outerHTML));` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'PLAIN':` && |\n|  &&
             `                    displayEditor(oEvent, JSON.stringify(z2ui5.responseData, null, 3), 'json');` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'REQUEST':` && |\n|  &&
             `                    displayEditor(oEvent, JSON.stringify(z2ui5.oBody, null, 3), 'json');` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'POPUP':` && |\n|  &&
             `                    displayEditor(oEvent, this.prettifyXml(oResponse?.PARAMS?.S_POPUP?.XML), 'xml');` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'POPUP_MODEL':` && |\n|  &&
             `                    displayEditor(oEvent, JSON.stringify(z2ui5.oViewPopup.getModel().getData(), null, 3), 'json');` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'POPOVER':` && |\n|  &&
             `                    displayEditor(oEvent, this.prettifyXml(oResponse?.PARAMS?.S_POPOVER?.XML), 'xml');` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'POPOVER_MODEL':` && |\n|  &&
             `                    displayEditor(oEvent, JSON.stringify(z2ui5?.oViewPopover?.getModel()?.getData(), null, 3), 'json');` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'NEST1':` && |\n|  &&
             `                    displayEditor(oEvent, this.prettifyXml(z2ui5?.oViewNest?.mProperties?.viewContent), 'xml', this.prettifyXml(z2ui5?.oViewNest?._xContent.outerHTML));` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'NEST1_MODEL':` && |\n|  &&
             `                    displayEditor(oEvent, JSON.stringify(z2ui5?.oViewNest?.getModel()?.getData(), null, 3), 'json');` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'NEST2':` && |\n|  &&
             `                    displayEditor(oEvent, this.prettifyXml(z2ui5?.oViewNest2?.mProperties?.viewContent), 'xml', this.prettifyXml(z2ui5?.oViewNest2?._xContent.outerHTML));` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'NEST2_MODEL':` && |\n|  &&
             `                    displayEditor(oEvent, JSON.stringify(z2ui5?.oViewNest2?.getModel()?.getData(), null, 3), 'json');` && |\n|  &&
             `                    break;` && |\n|  &&
             `                case 'SOURCE':` && |\n|  &&
             `                    const parent = oEvent.getSource().getParent();` && |\n|  &&
             `                    const contentControl = parent.getContent()[2].getItems()[0];` && |\n|  &&
             `                    const url = ``${window.location.origin}/sap/bc/adt/oo/classes/${z2ui5.responseData.S_FRONT.APP}/source/main``;` && |\n|  &&
             `                    const content = atob('PGlmcmFtZSBpZD0idGVzdCIgc3JjPSInICsgdXJsICsgJyIgaGVpZ2h0PSI4MDBweCIgd2lkdGg9IjEyMDBweCIgLz4=').replace("' + url + '", url);` && |\n|  &&
             `                    contentControl.setProperty("content", content);` && |\n|  &&
             `                    const modelData = oEvent.getSource().getModel().oData;` && |\n|  &&
             `                    modelData.editor_visible = false;` && |\n|  &&
             `                    modelData.source_visible = true;` && |\n|  &&
             `                    oEvent.getSource().getModel().refresh();` && |\n|  &&
             `                    break;` && |\n|  &&
             `            }` && |\n|  &&
             `        },` && |\n|  &&
             `` && |\n|  &&
             `        displayEditor: function (oEvent, content, type, xcontent = "") {` && |\n|  &&
             `            const modelData = oEvent.getSource().getModel().oData;` && |\n|  &&
             `            modelData.editor_visible = true;` && |\n|  &&
             `            modelData.source_visible = false;` && |\n|  &&
             `            modelData.isTemplating = content.includes("xmlns:template");` && |\n|  &&
             `            modelData.value = content;` && |\n|  &&
             `            modelData.previousValue = content;` && |\n|  &&
             `            modelData.xContent = xcontent;` && |\n|  &&
             `            modelData.type = type;` && |\n|  &&
             `            oEvent.getSource().getModel().refresh();` && |\n|  &&
             `        },` && |\n|  &&
             `` && |\n|  &&
             `        onTemplatingPress: function (oEvent) {` && |\n|  &&
             `            const modelData = oEvent.getSource().getModel().oData;` && |\n|  &&
             `            modelData.value = oEvent.getSource().getPressed() ? modelData.xContent : modelData.previousValue;` && |\n|  &&
             `            oEvent.getSource().getModel().refresh();` && |\n|  &&
             `        },` && |\n|  &&
             `` && |\n|  &&
             `        onClose: function () {` && |\n|  &&
             `            this.close();` && |\n|  &&
             `        },` && |\n|  &&
             `` && |\n|  &&
             `        async show() {` && |\n|  &&
             `            if (!this.oDialog) {` && |\n|  &&
             `                this.oDialog = await Fragment.load({` && |\n|  &&
             `                    name: "z2ui5.cc.DebugTool",` && |\n|  &&
             `                    controller: this,` && |\n|  &&
             `                });` && |\n|  &&
             `            }` && |\n|  &&
             `` && |\n|  &&
             `            const value = JSON.stringify(z2ui5.responseData, null, 3);` && |\n|  &&
             `            const oData = {` && |\n|  &&
             `                type: 'json',` && |\n|  &&
             `                source_visible: false,` && |\n|  &&
             `                editor_visible: true,` && |\n|  &&
             `                value: value,` && |\n|  &&
             `                xContent: '',` && |\n|  &&
             `                previousValue: value,` && |\n|  &&
             `                isTemplating: false,` && |\n|  &&
             `                templatingSource: false,` && |\n|  &&
             `                activeNest1: z2ui5?.oViewNest?.mProperties?.viewContent !== undefined,` && |\n|  &&
             `                activeNest2: z2ui5?.oViewNest2?.mProperties?.viewContent !== undefined,` && |\n|  &&
             `                activePopup: z2ui5?.oResponse?.PARAMS?.S_POPUP?.XML !== undefined,` && |\n|  &&
             `                activePopover: z2ui5?.oResponse?.PARAMS?.S_POPOVER?.XML !== undefined,` && |\n|  &&
             `            };` && |\n|  &&
             `            const oModel = new JSONModel(oData);` && |\n|  &&
             `` && |\n|  &&
             `            this.oDialog.addStyleClass('dbg-ltr');` && |\n|  &&
             `            this.oDialog.setModel(oModel);` && |\n|  &&
             `            this.oDialog.open();` && |\n|  &&
             `        },` && |\n|  &&
             `` && |\n|  &&
             `        async close(){` && |\n|  &&
             `            if (this.oDialog){` && |\n|  &&
             `                this.oDialog.close();` && |\n|  &&
             `                this.oDialog.destroy();` && |\n|  &&
             `                this.oDialog = null;` && |\n|  &&
             `            }` && |\n|  &&
             `        },` && |\n|  &&
             `` && |\n|  &&
             `        async toggle(){` && |\n|  &&
             `            if (this.oDialog){` && |\n|  &&
             `                this.close()` && |\n|  &&
             `            } else {` && |\n|  &&
             `                this.show()` && |\n|  &&
             `            }` && |\n|  &&
             `        },` && |\n|  &&
             `` && |\n|  &&
             `        renderer(){` && |\n|  &&
             `        }` && |\n|  &&
             `    });` && |\n|  &&
             `});` && |\n|  &&
             `` && |\n|  &&
              ``.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_component_js IMPLEMENTATION.

  METHOD get.

    result =              `sap.ui.define(["sap/ui/core/UIComponent", "z2ui5/model/models", "z2ui5/cc/Server", "sap/ui/VersionInfo", "z2ui5/cc/DebugTool"` && |\n|  &&
             `], function (UIComponent, Models, Server, VersionInfo, DebugTool) {` && |\n|  &&
             `    return UIComponent.extend("z2ui5.Component", {` && |\n|  &&
             `        metadata: {` && |\n|  &&
             `            manifest: "json",` && |\n|  &&
             `            interfaces: [` && |\n|  &&
             `                "sap.ui.core.IAsyncContentCreation"` && |\n|  &&
             `            ]` && |\n|  &&
             `        },` && |\n|  &&
             `        async init() {` && |\n|  &&
             `            UIComponent.prototype.init.apply(this, arguments);` && |\n|  &&
             `` && |\n|  &&
             `            if (typeof z2ui5 == 'undefined') {` && |\n|  &&
             `                z2ui5 = {};` && |\n|  &&
             `            }` && |\n|  &&
             `            if (z2ui5?.checkLocal == false) {` && |\n|  &&
             `            z2ui5 = {};` && |\n|  &&
             `            }` && |\n|  &&
             `` && |\n|  &&
             `            z2ui5.oRouter = this.getRouter();` && |\n|  &&
             `            z2ui5.oRouter.initialize();` && |\n|  &&
             `            z2ui5.oRouter.stop();` && |\n|  &&
             `` && |\n|  &&
             `            z2ui5.oDeviceModel = Models.createDeviceModel();` && |\n|  &&
             `            this.setModel(z2ui5.oDeviceModel, "device");` && |\n|  &&
             `` && |\n|  &&
             `            z2ui5.oConfig = {};` && |\n|  &&
             `            z2ui5.oConfig.ComponentData = this.getComponentData();` && |\n|  &&
             `` && |\n|  &&
             `            try {` && |\n|  &&
             `                z2ui5.oLaunchpadService = await this.getService("ShellUIService");` && |\n|  &&
             `            } catch (e) { }` && |\n|  &&
             `` && |\n|  &&
             `            let oVersionInfo = await VersionInfo.load();` && |\n|  &&
             `            z2ui5.oConfig.UI5VersionInfo = {` && |\n|  &&
             `                version: oVersionInfo.version,` && |\n|  &&
             `                buildTimestamp: oVersionInfo.buildTimestamp,` && |\n|  &&
             `                gav: oVersionInfo.gav,` && |\n|  &&
             `            }` && |\n|  &&
             `` && |\n|  &&
             `            if (/iPad|iPhone/.test(navigator.platform)) {` && |\n|  &&
             `                window.addEventListener("__pagehide", this.__pagehide.bind(this));` && |\n|  &&
             `            } else {` && |\n|  &&
             `                window.addEventListener("__beforeunload", this.__beforeunload.bind(this));` && |\n|  &&
             `            }` && |\n|  &&
             `` && |\n|  &&
             `            document.addEventListener("keydown", function (zEvent) {` && |\n|  &&
             `                if (zEvent?.ctrlKey && zEvent?.key === "F12") {` && |\n|  &&
             `                    if (!z2ui5.debugTool) {` && |\n|  &&
             `                        z2ui5.debugTool = new DebugTool();` && |\n|  &&
             `                    }` && |\n|  &&
             `                    z2ui5.debugTool.toggle();` && |\n|  &&
             `                }` && |\n|  &&
             `            });` && |\n|  &&
             `` && |\n|  &&
             `            window.addEventListener("popstate", (event) => {` && |\n|  &&
             `                delete event?.state?.response?.PARAMS?.SET_PUSH_STATE;` && |\n|  &&
             `                delete event?.state?.response?.PARAMS?.SET_APP_STATE_ACTIVE;` && |\n|  &&
             `                if (event?.state?.view) {` && |\n|  &&
             `                    z2ui5.oController.ViewDestroy();` && |\n|  &&
             `                    z2ui5.oResponse = event.state.response;` && |\n|  &&
             `                    z2ui5.oController.displayView(event.state.view, event.state.model);` && |\n|  &&
             `                }` && |\n|  &&
             `            });` && |\n|  &&
             `        },` && |\n|  &&
             `` && |\n|  &&
             `        __beforeunload: function () {` && |\n|  &&
             `            window.removeEventListener("__beforeunload", this.__beforeunload.bind(this));` && |\n|  &&
             `            this.destroy();` && |\n|  &&
             `        },` && |\n|  &&
             `        __pagehide: function () {` && |\n|  &&
             `            window.removeEventListener("__pagehide", this.__pagehide.bind(this));` && |\n|  &&
             `            this.destroy();` && |\n|  &&
             `        },` && |\n|  &&
             `` && |\n|  &&
             `        exit: function () {` && |\n|  &&
             `            Server.endSession();` && |\n|  &&
             `            if (UIComponent.prototype.exit)` && |\n|  &&
             `                UIComponent.prototype.exit.apply(this, arguments);` && |\n|  &&
             `        },` && |\n|  &&
             `    });` && |\n|  &&
             `});` && |\n|  &&
              ``.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_app_xml IMPLEMENTATION.

  METHOD get.

    result =              `<mvc:View controllerName="z2ui5.controller.App"` &&
             `    xmlns:html="http://www.w3.org/1999/xhtml"` &&
             `    xmlns:mvc="sap.ui.core.mvc" displayBlock="true"` &&
             `    xmlns="sap.m">` &&
             `    <App id="app">` &&
             `    </App>` &&
             `</mvc:View>` &&
             `` &&
              ``.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_app_app_js IMPLEMENTATION.

  METHOD get.

    result =              `sap.ui.define(["sap/ui/core/mvc/Controller",` && |\n|  &&
             `  "z2ui5/controller/View1.controller",` && |\n|  &&
             `  "z2ui5/cc/Server",` && |\n|  &&
             `  "sap/ui/core/routing/HashChanger"` && |\n|  &&
             `], function (BaseController, Controller, Server, HashChanger) {` && |\n|  &&
             `  return BaseController.extend("z2ui5.controller.App", {` && |\n|  &&
             `` && |\n|  &&
             `    onInit() {` && |\n|  &&
             `` && |\n|  &&
             `      z2ui5.oOwnerComponent = this.getOwnerComponent();` && |\n|  &&
             `      z2ui5.oConfig.pathname = z2ui5.oOwnerComponent.getManifest()["sap.app"].dataSources.http.uri;` && |\n|  &&
             `      if (z2ui5?.checkLocal == true) {` && |\n|  &&
             `        z2ui5.oConfig.pathname = window.location.href;` && |\n|  &&
             `      };` && |\n|  &&
             `` && |\n|  &&
             `      z2ui5.oController = new Controller();` && |\n|  &&
             `      z2ui5.oApp = this.getView().byId("app");` && |\n|  &&
             `` && |\n|  &&
             `      z2ui5.oControllerNest = new Controller();` && |\n|  &&
             `      z2ui5.oControllerNest2 = new Controller();` && |\n|  &&
             `      z2ui5.oControllerPopup = new Controller();` && |\n|  &&
             `      z2ui5.oControllerPopover = new Controller();` && |\n|  &&
             `` && |\n|  &&
             `      z2ui5.onBeforeRoundtrip = [];` && |\n|  &&
             `      z2ui5.onAfterRendering = [];` && |\n|  &&
             `      z2ui5.onBeforeEventFrontend = [];` && |\n|  &&
             `      z2ui5.onAfterRoundtrip = [];` && |\n|  &&
             `` && |\n|  &&
             `      z2ui5.checkNestAfter = false;` && |\n|  &&
             `` && |\n|  &&
             `    //  if (sap.ui.core.routing.HashChanger.getInstance().getHash().includes("z2ui5-xapp-state")){` && |\n|  &&
             `       if (HashChanger.getInstance().getHash()){` && |\n|  &&
             `          z2ui5.checkInit = true;` && |\n|  &&
             `          Server.Roundtrip();` && |\n|  &&
             `      }` && |\n|  &&
             `` && |\n|  &&
             `    }` && |\n|  &&
             `  });` && |\n|  &&
             `});` && |\n|  &&
             `` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/Timer", ["sap/ui/core/Control"], (Control) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `` && |\n|  &&
             `  return Control.extend("z2ui5.Timer", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        delayMS: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             `        checkActive: {` && |\n|  &&
             `          type: "boolean",` && |\n|  &&
             `          defaultValue: true` && |\n|  &&
             `        },` && |\n|  &&
             `        checkRepeat: {` && |\n|  &&
             `          type: "boolean",` && |\n|  &&
             `          defaultValue: false` && |\n|  &&
             `        },` && |\n|  &&
             `      },` && |\n|  &&
             `      events: {` && |\n|  &&
             `        "finished": {` && |\n|  &&
             `          allowPreventDefault: true,` && |\n|  &&
             `          parameters: {},` && |\n|  &&
             `        }` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `    onAfterRendering() { },` && |\n|  &&
             `    delayedCall(oControl) {` && |\n|  &&
             `` && |\n|  &&
             `      if (oControl.getProperty("checkActive") == false) {` && |\n|  &&
             `        return;` && |\n|  &&
             `      }` && |\n|  &&
             `      setTimeout((oControl) => {` && |\n|  &&
             `        oControl.setProperty("checkActive", false)` && |\n|  &&
             `        oControl.fireFinished();` && |\n|  &&
             `        if (oControl.getProperty("checkRepeat")) {` && |\n|  &&
             `          oControl.delayedCall(oControl);` && |\n|  &&
             `        }` && |\n|  &&
             `      }` && |\n|  &&
             `        , parseInt(oControl.getProperty("delayMS")), oControl);` && |\n|  &&
             `    },` && |\n|  &&
             `    renderer(oRm, oControl) {` && |\n|  &&
             `      oControl.delayedCall(oControl);` && |\n|  &&
             `    }` && |\n|  &&
             `  });` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/Focus", ["sap/ui/core/Control",], (Control) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `  return Control.extend("z2ui5.Focus", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        setUpdate: {` && |\n|  &&
             `          type: "boolean",` && |\n|  &&
             `          defaultValue: true` && |\n|  &&
             `        },` && |\n|  &&
             `        focusId: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `        selectionStart: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: "0"` && |\n|  &&
             `        },` && |\n|  &&
             `        selectionEnd: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: "0"` && |\n|  &&
             `        },` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `    init() { },` && |\n|  &&
             `    setFocusId(val) {` && |\n|  &&
             `      try {` && |\n|  &&
             `        this.setProperty("focusId", val);` && |\n|  &&
             `        var oElement = z2ui5.oView.byId(val);` && |\n|  &&
             `        var oFocus = oElement.getFocusInfo();` && |\n|  &&
             `        oElement.applyFocusInfo(oFocus);` && |\n|  &&
             `      } catch (e) { }` && |\n|  &&
             `    },` && |\n|  &&
             `    renderer(oRm, oControl) {` && |\n|  &&
             `      if (!oControl.getProperty("setUpdate")) {` && |\n|  &&
             `        return;` && |\n|  &&
             `      }` && |\n|  &&
             `      oControl.setProperty("setUpdate", false);` && |\n|  &&
             `      setTimeout((oControl) => {` && |\n|  &&
             `        var oElement = z2ui5.oView.byId(oControl.getProperty("focusId"));` && |\n|  &&
             `        var oFocus = oElement.getFocusInfo();` && |\n|  &&
             `        oFocus.selectionStart = parseInt(oControl.getProperty("selectionStart"));` && |\n|  &&
             `        oFocus.selectionEnd = parseInt(oControl.getProperty("selectionEnd"));` && |\n|  &&
             `        oElement.applyFocusInfo(oFocus);` && |\n|  &&
             `      }` && |\n|  &&
             `        , 100, oControl);` && |\n|  &&
             `    }` && |\n|  &&
             `  });` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/Title", ["sap/ui/core/Control"], (Control) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `  return Control.extend("z2ui5.Title", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        title: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `    setTitle(val) {` && |\n|  &&
             `      this.setProperty("title", val);` && |\n|  &&
             `      document.title = val;` && |\n|  &&
             `    },` && |\n|  &&
             `    renderer(oRm, oControl) { }` && |\n|  &&
             `  });` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `sap.ui.define("z2ui5/LPTitle", ["sap/ui/core/Control"], (Control) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `  return Control.extend("z2ui5.LPTitle", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        title: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `        ApplicationFullWidth:{` && |\n|  &&
             `          type : "boolean"` && |\n|  &&
             `        }` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `    setTitle(val) {` && |\n|  &&
             `      try {` && |\n|  &&
             `        this.setProperty("title", val);` && |\n|  &&
             `        z2ui5.oLaunchpadService.setTitle(val);` && |\n|  &&
             `      } catch (e) {` && |\n|  &&
             `        console.error("Launchpad Service to set Title not found");` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    setApplicationFullWidth(val) {` && |\n|  &&
             `      this.setProperty("ApplicationFullWidth", val);` && |\n|  &&
             `      z2ui5.ApplicationFullWidth = val;` && |\n|  &&
             `    sap.ui.require([` && |\n|  &&
             `      "sap/ushell/services/AppConfiguration"` && |\n|  &&
             `    ], async (AppConfiguration)  => {` && |\n|  &&
             `      AppConfiguration.setApplicationFullWidth(z2ui5.ApplicationFullWidth);` && |\n|  &&
             `    });` && |\n|  &&
             `` && |\n|  &&
             `  },` && |\n|  &&
             `` && |\n|  &&
             `    renderer(oRm, oControl) { }` && |\n|  &&
             `  });` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `sap.ui.define("z2ui5/History", ["sap/ui/core/Control"], (Control) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `  return Control.extend("z2ui5.History", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        search: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `    setSearch(val) {` && |\n|  &&
             `      this.setProperty("search", val);` && |\n|  &&
             `      history.replaceState(null, null, window.location.pathname + val);` && |\n|  &&
             `    },` && |\n|  &&
             `    renderer(oRm, oControl) { }` && |\n|  &&
             `  });` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/Tree", ["sap/ui/core/Control"], (Control) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `` && |\n|  &&
             `  return Control.extend("z2ui5.Tree", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        tree_id: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        }` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    setBackend() {` && |\n|  &&
             `      z2ui5.treeState = z2ui5.oView.byId(this.getProperty("tree_id")).getBinding('items').getCurrentTreeState();` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    init() {` && |\n|  &&
             `      z2ui5.onBeforeRoundtrip.push(this.setBackend.bind(this));` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    renderer(oRm, oControl) {` && |\n|  &&
             `      if (!z2ui5.treeState) return;` && |\n|  &&
             `      setTimeout((id) => {` && |\n|  &&
             `        z2ui5.oView.byId(id).getBinding('items').setTreeState(z2ui5.treeState);` && |\n|  &&
             `      }, 100, oControl.getProperty("tree_id"));` && |\n|  &&
             `    }` && |\n|  &&
             `  });` && |\n|  &&
             `});` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/Scrolling", ["sap/ui/core/Control"], (Control) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `` && |\n|  &&
             `  return Control.extend("z2ui5.Scrolling", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        setUpdate: {` && |\n|  &&
             `          type: "boolean",` && |\n|  &&
             `          defaultValue: true` && |\n|  &&
             `        },` && |\n|  &&
             `        items: {` && |\n|  &&
             `          type: "Array"` && |\n|  &&
             `        }` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    setBackend() {` && |\n|  &&
             `      const items = this.getProperty("items");` && |\n|  &&
             `` && |\n|  &&
             `      if (items) {` && |\n|  &&
             `        items.forEach(item => {` && |\n|  &&
             `          try {` && |\n|  &&
             `            const scrollDelegate = z2ui5.oView.byId(item.N).getScrollDelegate();` && |\n|  &&
             `            item.V = scrollDelegate ? scrollDelegate.getScrollTop() : 0;` && |\n|  &&
             `          } catch {` && |\n|  &&
             `            try {` && |\n|  &&
             `              const element = document.getElementById(``${z2ui5.oView.byId(item.ID).getId()}-inner``);` && |\n|  &&
             `              item.V = element ? element.scrollTop : 0;` && |\n|  &&
             `            } catch { }` && |\n|  &&
             `          }` && |\n|  &&
             `        });` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    init() {` && |\n|  &&
             `      z2ui5.onBeforeRoundtrip.push(this.setBackend.bind(this));` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    renderer(oRm, oControl) {` && |\n|  &&
             `      if (!oControl.getProperty("setUpdate")) return;` && |\n|  &&
             `` && |\n|  &&
             `      oControl.setProperty("setUpdate", false);` && |\n|  &&
             `      const items = oControl.getProperty("items");` && |\n|  &&
             `      if (!items) return;` && |\n|  &&
             `` && |\n|  &&
             `      setTimeout(() => {` && |\n|  &&
             `        items.forEach(item => {` && |\n|  &&
             `          try {` && |\n|  &&
             `            z2ui5.oView.byId(item.N).scrollTo(item.V);` && |\n|  &&
             `          } catch {` && |\n|  &&
             `            try {` && |\n|  &&
             `              const element = document.getElementById(``${z2ui5.oView.byId(item.ID).getId()}-inner``);` && |\n|  &&
             `              if (element) element.scrollTop = item.V;` && |\n|  &&
             `            } catch {` && |\n|  &&
             `              setTimeout(() => {` && |\n|  &&
             `                z2ui5.oView.byId(item.N).scrollTo(item.V);` && |\n|  &&
             `              }, 1);` && |\n|  &&
             `            }` && |\n|  &&
             `          }` && |\n|  &&
             `        });` && |\n|  &&
             `      }, 100);` && |\n|  &&
             `    }` && |\n|  &&
             `  });` && |\n|  &&
             `});` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/Info", ["sap/ui/core/Control", "sap/ui/VersionInfo", "sap/ui/Device"], (Control) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `` && |\n|  &&
             `  return Control.extend("z2ui5.Info", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        ui5_version: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `        device_phone: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `        device_desktop: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `        device_tablet: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `        device_combi: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `        device_height: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `        device_width: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `        ui5_theme: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `        device_os: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `        device_systemtype: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `        device_browser: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `      },` && |\n|  &&
             `      events: {` && |\n|  &&
             `        "finished": {` && |\n|  &&
             `          allowPreventDefault: true,` && |\n|  &&
             `          parameters: {},` && |\n|  &&
             `        }` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    init() { },` && |\n|  &&
             `` && |\n|  &&
             `    onAfterRendering() {` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    async renderer(_, oControl) {` && |\n|  &&
             `` && |\n|  &&
             `      let oDevice = z2ui5.oView.getModel("device").oData;` && |\n|  &&
             `      oControl.setProperty("ui5_version", z2ui5.oConfig.UI5VersionInfo.version);` && |\n|  &&
             `      oControl.setProperty("device_phone", oDevice.system.phone);` && |\n|  &&
             `      oControl.setProperty("device_desktop", oDevice.system.desktop);` && |\n|  &&
             `      oControl.setProperty("device_tablet", oDevice.system.tablet);` && |\n|  &&
             `      oControl.setProperty("device_combi", oDevice.system.combi);` && |\n|  &&
             `      oControl.setProperty("device_height", oDevice.resize.height);` && |\n|  &&
             `      oControl.setProperty("device_width", oDevice.resize.width);` && |\n|  &&
             `      oControl.setProperty("device_os", oDevice.os.name);` && |\n|  &&
             `      oControl.setProperty("device_browser", oDevice.browser.name);` && |\n|  &&
             `      oControl.fireFinished();` && |\n|  &&
             `` && |\n|  &&
             `    }` && |\n|  &&
             `  });` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/Geolocation", ["sap/ui/core/Control"], (Control) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `` && |\n|  &&
             `  return Control.extend("z2ui5.Geolocation", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        longitude: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             `        latitude: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             `        altitude: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             `        accuracy: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             |\n|.
    result = result &&
             `        altitudeAccuracy: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             `        speed: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: false` && |\n|  &&
             `        },` && |\n|  &&
             `        heading: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: false` && |\n|  &&
             `        },` && |\n|  &&
             `        enableHighAccuracy: {` && |\n|  &&
             `          type: "boolean",` && |\n|  &&
             `          defaultValue: false` && |\n|  &&
             `        },` && |\n|  &&
             `        timeout: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: "5000"` && |\n|  &&
             `        }` && |\n|  &&
             `      },` && |\n|  &&
             `      events: {` && |\n|  &&
             `        "finished": {` && |\n|  &&
             `          allowPreventDefault: true,` && |\n|  &&
             `          parameters: {},` && |\n|  &&
             `        }` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    callbackPosition(position) {` && |\n|  &&
             `` && |\n|  &&
             `      this.setProperty("longitude", position.coords.longitude, true);` && |\n|  &&
             `      this.setProperty("latitude", position.coords.latitude, true);` && |\n|  &&
             `      this.setProperty("altitude", position.coords.altitude, true);` && |\n|  &&
             `      this.setProperty("accuracy", position.coords.accuracy, true);` && |\n|  &&
             `      this.setProperty("altitudeAccuracy", position.coords.altitudeAccuracy, true);` && |\n|  &&
             `      this.setProperty("speed", position.coords.speed, true);` && |\n|  &&
             `      this.setProperty("heading", position.coords.heading, true);` && |\n|  &&
             `      this.fireFinished();` && |\n|  &&
             `` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    async init() {` && |\n|  &&
             `` && |\n|  &&
             `      navigator.geolocation.getCurrentPosition(this.callbackPosition.bind(this));` && |\n|  &&
             `` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    exit() {` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    onAfterRendering() {` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    renderer() {` && |\n|  &&
             `    }` && |\n|  &&
             `  });` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/FileUploader", ["sap/ui/core/Control", "sap/m/Button", "sap/ui/unified/FileUploader", "sap/m/HBox"], function (Control, Button, FileUploader, HBox) {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `` && |\n|  &&
             `  return Control.extend("z2ui5.FileUploader", {` && |\n|  &&
             `` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        value: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             `        path: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             `        tooltip: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             `        fileType: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             `        placeholder: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             `        buttonText: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             `        style: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: ""` && |\n|  &&
             `        },` && |\n|  &&
             `        uploadButtonText: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: "Upload"` && |\n|  &&
             `        },` && |\n|  &&
             `        enabled: {` && |\n|  &&
             `          type: "boolean",` && |\n|  &&
             `          defaultValue: true` && |\n|  &&
             `        },` && |\n|  &&
             `        icon: {` && |\n|  &&
             `          type: "string",` && |\n|  &&
             `          defaultValue: "sap-icon://browse-folder"` && |\n|  &&
             `        },` && |\n|  &&
             `        iconOnly: {` && |\n|  &&
             `          type: "boolean",` && |\n|  &&
             `          defaultValue: false` && |\n|  &&
             `        },` && |\n|  &&
             `        buttonOnly: {` && |\n|  &&
             `          type: "boolean",` && |\n|  &&
             `          defaultValue: false` && |\n|  &&
             `        },` && |\n|  &&
             `        multiple: {` && |\n|  &&
             `          type: "boolean",` && |\n|  &&
             `          defaultValue: false` && |\n|  &&
             `        },` && |\n|  &&
             `        visible: {` && |\n|  &&
             `          type: "boolean",` && |\n|  &&
             `          defaultValue: true` && |\n|  &&
             `        },` && |\n|  &&
             `        checkDirectUpload: {` && |\n|  &&
             `          type: "boolean",` && |\n|  &&
             `          defaultValue: false` && |\n|  &&
             `        }` && |\n|  &&
             `      },` && |\n|  &&
             `` && |\n|  &&
             `      aggregations: {},` && |\n|  &&
             `      events: {` && |\n|  &&
             `        "upload": {` && |\n|  &&
             `          allowPreventDefault: true,` && |\n|  &&
             `          parameters: {}` && |\n|  &&
             `        }` && |\n|  &&
             `      },` && |\n|  &&
             `      renderer: null` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    renderer: function (oRm, oControl) {` && |\n|  &&
             `` && |\n|  &&
             `      if (!oControl.getProperty("checkDirectUpload")) {` && |\n|  &&
             `        oControl.oUploadButton = new Button({` && |\n|  &&
             `          text: oControl.getProperty("uploadButtonText"),` && |\n|  &&
             `          enabled: oControl.getProperty("path") !== "",` && |\n|  &&
             `          press: function (oEvent) {` && |\n|  &&
             `` && |\n|  &&
             `            this.setProperty("path", this.oFileUploader.getProperty("value"));` && |\n|  &&
             `` && |\n|  &&
             `            var file = z2ui5.oUpload.oFileUpload.files[0];` && |\n|  &&
             `            var reader = new FileReader();` && |\n|  &&
             `` && |\n|  &&
             `            reader.onload = function (evt) {` && |\n|  &&
             `              var vContent = evt.currentTarget.result;` && |\n|  &&
             `              this.setProperty("value", vContent);` && |\n|  &&
             `              this.fireUpload();` && |\n|  &&
             `              //this.getView().byId('picture' ).getDomRef().src = vContent;` && |\n|  &&
             `            }` && |\n|  &&
             `              .bind(this)` && |\n|  &&
             `` && |\n|  &&
             `            reader.readAsDataURL(file);` && |\n|  &&
             `          }` && |\n|  &&
             `            .bind(oControl)` && |\n|  &&
             `        });` && |\n|  &&
             `      }` && |\n|  &&
             `` && |\n|  &&
             `      oControl.oFileUploader = new FileUploader({` && |\n|  &&
             `        icon: oControl.getProperty("icon"),` && |\n|  &&
             `        iconOnly: oControl.getProperty("iconOnly"),` && |\n|  &&
             `        buttonOnly: oControl.getProperty("buttonOnly"),` && |\n|  &&
             `        buttonText: oControl.getProperty("buttonText"),` && |\n|  &&
             `        style: oControl.getProperty("style"),` && |\n|  &&
             `        fileType: oControl.getProperty("fileType"),` && |\n|  &&
             `        visible: oControl.getProperty("visible"),` && |\n|  &&
             `        uploadOnChange: oControl.getProperty("checkDirectUpload"),` && |\n|  &&
             `        enabled: oControl.getProperty("enabled"),` && |\n|  &&
             `        value: oControl.getProperty("path"),` && |\n|  &&
             `        placeholder: oControl.getProperty("placeholder"),` && |\n|  &&
             `        change: function (oEvent) {` && |\n|  &&
             `          if (oControl.getProperty("checkDirectUpload")) {` && |\n|  &&
             `            return;` && |\n|  &&
             `          }` && |\n|  &&
             `` && |\n|  &&
             `          var value = oEvent.getSource().getProperty("value");` && |\n|  &&
             `          this.setProperty("path", value);` && |\n|  &&
             `          if (value) {` && |\n|  &&
             `            this.oUploadButton.setEnabled();` && |\n|  &&
             `          } else {` && |\n|  &&
             `            this.oUploadButton.setEnabled(false);` && |\n|  &&
             `          }` && |\n|  &&
             `          this.oUploadButton.rerender();` && |\n|  &&
             `          z2ui5.oUpload = oEvent.oSource;` && |\n|  &&
             `        }` && |\n|  &&
             `          .bind(oControl),` && |\n|  &&
             `        uploadComplete: function (oEvent) {` && |\n|  &&
             `          if (!oControl.getProperty("checkDirectUpload")) {` && |\n|  &&
             `            return;` && |\n|  &&
             `          }` && |\n|  &&
             `` && |\n|  &&
             `          var value = oEvent.getSource().getProperty("value");` && |\n|  &&
             `          this.setProperty("path", value);` && |\n|  &&
             `` && |\n|  &&
             `          var file = oEvent.oSource.oFileUpload.files[0];` && |\n|  &&
             `          var reader = new FileReader();` && |\n|  &&
             `` && |\n|  &&
             `          reader.onload = function (evt) {` && |\n|  &&
             `            var vContent = evt.currentTarget.result;` && |\n|  &&
             `            this.setProperty("value", vContent);` && |\n|  &&
             `            this.fireUpload();` && |\n|  &&
             `          }` && |\n|  &&
             `            .bind(this)` && |\n|  &&
             `` && |\n|  &&
             `          reader.readAsDataURL(file);` && |\n|  &&
             `        }` && |\n|  &&
             `          .bind(oControl)` && |\n|  &&
             `      });` && |\n|  &&
             `` && |\n|  &&
             `      var hbox = new HBox();` && |\n|  &&
             `      hbox.addItem(oControl.oFileUploader);` && |\n|  &&
             `      hbox.addItem(oControl.oUploadButton);` && |\n|  &&
             `      oRm.renderControl(hbox);` && |\n|  &&
             `    }` && |\n|  &&
             `  });` && |\n|  &&
             `});` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/MultiInputExt", ["sap/ui/core/Control", "sap/m/Token", "sap/ui/core/Core", "sap/ui/core/Element"], (Control, Token, Core, Element) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `` && |\n|  &&
             `  return Control.extend("z2ui5.MultiInputExt", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        MultiInputId: {` && |\n|  &&
             `          type: "String"` && |\n|  &&
             `        },` && |\n|  &&
             `        MultiInputName: {` && |\n|  &&
             `          type: "String"` && |\n|  &&
             `        },` && |\n|  &&
             `        addedTokens: {` && |\n|  &&
             `          type: "Array"` && |\n|  &&
             `        },` && |\n|  &&
             `        checkInit: {` && |\n|  &&
             `          type: "Boolean",` && |\n|  &&
             `          defaultValue: false` && |\n|  &&
             `        },` && |\n|  &&
             `        removedTokens: {` && |\n|  &&
             `          type: "Array"` && |\n|  &&
             `        }` && |\n|  &&
             `      },` && |\n|  &&
             `      events: {` && |\n|  &&
             `        "change": {` && |\n|  &&
             `          allowPreventDefault: true,` && |\n|  &&
             `          parameters: {}` && |\n|  &&
             `        }` && |\n|  &&
             `      },` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    init() {` && |\n|  &&
             `      z2ui5.onAfterRendering.push(this.setControl.bind(this));` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    onTokenUpdate(oEvent) {` && |\n|  &&
             `      this.setProperty("addedTokens", []);` && |\n|  &&
             `      this.setProperty("removedTokens", []);` && |\n|  &&
             `` && |\n|  &&
             `      if (oEvent.mParameters.type == "removed") {` && |\n|  &&
             `        let removedTokens = [];` && |\n|  &&
             `        oEvent.mParameters.removedTokens.forEach((item) => {` && |\n|  &&
             `          removedTokens.push({` && |\n|  &&
             `            KEY: item.getKey(),` && |\n|  &&
             `            TEXT: item.getText()` && |\n|  &&
             `          });` && |\n|  &&
             `        }` && |\n|  &&
             `        );` && |\n|  &&
             `        this.setProperty("removedTokens", removedTokens);` && |\n|  &&
             `      } else {` && |\n|  &&
             `        let addedTokens = [];` && |\n|  &&
             `        oEvent.mParameters.addedTokens.forEach((item) => {` && |\n|  &&
             `          addedTokens.push({` && |\n|  &&
             `            KEY: item.getKey(),` && |\n|  &&
             `            TEXT: item.getText()` && |\n|  &&
             `          });` && |\n|  &&
             `        }` && |\n|  &&
             `        );` && |\n|  &&
             `        this.setProperty("addedTokens", addedTokens);` && |\n|  &&
             `      }` && |\n|  &&
             `      this.fireChange();` && |\n|  &&
             `    },` && |\n|  &&
             `    renderer(oRm, oControl) {` && |\n|  &&
             `      z2ui5.onAfterRendering.push(this.setControl.bind(oControl));` && |\n|  &&
             `    },` && |\n|  &&
             `    setControl() {` && |\n|  &&
             `      let table = z2ui5.oView.byId(this.getProperty("MultiInputId"));` && |\n|  &&
             `      if (!table) {` && |\n|  &&
             `        try {` && |\n|  &&
             `          // table = Core.byId(Element.getElementsByName(this.getProperty("MultiInputName"))[0].id.replace('-inner', ''));` && |\n|  &&
             `        } catch (e) {` && |\n|  &&
             `          return;` && |\n|  &&
             `        }` && |\n|  &&
             `      }` && |\n|  &&
             `      if (!table) {` && |\n|  &&
             `        return;` && |\n|  &&
             `      }` && |\n|  &&
             `      if (this.getProperty("checkInit") == true) {` && |\n|  &&
             `        return;` && |\n|  &&
             `      }` && |\n|  &&
             `      this.setProperty("checkInit", true);` && |\n|  &&
             `      table.attachTokenUpdate(this.onTokenUpdate.bind(this));` && |\n|  &&
             `      var fnValidator = function (args) {` && |\n|  &&
             `        var text = args.text;` && |\n|  &&
             `        return new Token({` && |\n|  &&
             `          key: text,` && |\n|  &&
             `          text: text` && |\n|  &&
             `        });` && |\n|  &&
             `      };` && |\n|  &&
             `      table.addValidator(fnValidator);` && |\n|  &&
             `    },` && |\n|  &&
             `    renderer(oRM, oControl) { }` && |\n|  &&
             `  });` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/SmartMultiInputExt", ["sap/ui/core/Control", "sap/m/Token", "sap/ui/core/Core", "sap/ui/core/Element"], (Control) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `` && |\n|  &&
             `  return Control.extend("z2ui5.SmartMultiInputExt", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        multiInputId: {` && |\n|  &&
             `          type: "String"` && |\n|  &&
             `        },` && |\n|  &&
             `        addedTokens: {` && |\n|  &&
             `          type: "Array"` && |\n|  &&
             `        },` && |\n|  &&
             `        removedTokens: {` && |\n|  &&
             `          type: "Array"` && |\n|  &&
             `        },` && |\n|  &&
             `        rangeData: {` && |\n|  &&
             `          type: "Array",` && |\n|  &&
             `          defaultValue: []` && |\n|  &&
             `        },` && |\n|  &&
             `        checkInit: {` && |\n|  &&
             `          type: "Boolean",` && |\n|  &&
             `          defaultValue: false` && |\n|  &&
             `        }` && |\n|  &&
             `      },` && |\n|  &&
             `      events: {` && |\n|  &&
             `        "change": {` && |\n|  &&
             `          allowPreventDefault: true,` && |\n|  &&
             `          parameters: {}` && |\n|  &&
             `        }` && |\n|  &&
             `      },` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    init() {` && |\n|  &&
             `      z2ui5.onAfterRendering.push(this.setControl.bind(this));` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    onTokenUpdate(oEvent) {` && |\n|  &&
             `      this.setProperty("addedTokens", []);` && |\n|  &&
             `      this.setProperty("removedTokens", []);` && |\n|  &&
             `` && |\n|  &&
             `      if (oEvent.mParameters.type == "removed") {` && |\n|  &&
             `        let removedTokens = [];` && |\n|  &&
             `        oEvent.mParameters.removedTokens.forEach((item) => {` && |\n|  &&
             `          removedTokens.push({` && |\n|  &&
             `            KEY: item.getKey(),` && |\n|  &&
             `            TEXT: item.getText()` && |\n|  &&
             `          });` && |\n|  &&
             `        }` && |\n|  &&
             `        );` && |\n|  &&
             `        this.setProperty("removedTokens", removedTokens);` && |\n|  &&
             `      } else {` && |\n|  &&
             `        let addedTokens = [];` && |\n|  &&
             `        oEvent.mParameters.addedTokens.forEach((item) => {` && |\n|  &&
             `          addedTokens.push({` && |\n|  &&
             `            KEY: item.getKey(),` && |\n|  &&
             `            TEXT: item.getText()` && |\n|  &&
             `          });` && |\n|  &&
             `        }` && |\n|  &&
             `        );` && |\n|  &&
             `        this.setProperty("addedTokens", addedTokens);` && |\n|  &&
             `      }` && |\n|  &&
             `      const aTokens = oEvent.getSource().getTokens();` && |\n|  &&
             `      this.setProperty("rangeData", oEvent.getSource().getRangeData().map((oRangeData, iIndex) => {` && |\n|  &&
             `        const oToken = aTokens[iIndex];` && |\n|  &&
             `        oRangeData.tokenText = oToken.getText();` && |\n|  &&
             `        oRangeData.tokenLongKey = oToken.data("longKey");` && |\n|  &&
             `        return oRangeData;` && |\n|  &&
             `      }));` && |\n|  &&
             `      this.fireChange();` && |\n|  &&
             `    },` && |\n|  &&
             `    setRangeData(aRangeData) {` && |\n|  &&
             `      this.setProperty("rangeData", aRangeData);` && |\n|  &&
             `      this.inputInitialized().then((input) => {` && |\n|  &&
             `        input.setRangeData(aRangeData.map((oRangeData) => {` && |\n|  &&
             `          const oRangeDataNew = {};` && |\n|  &&
             `          Object.entries(oRangeData).forEach((aEntry) => {` && |\n|  &&
             `            const sKeyNameNew = aEntry[0].toLowerCase();` && |\n|  &&
             `            oRangeDataNew[(sKeyNameNew === "keyfield" ? "keyField" : sKeyNameNew)] = aEntry[1];` && |\n|  &&
             `          });` && |\n|  &&
             |\n|.
    result = result &&
             `          return oRangeDataNew;` && |\n|  &&
             `        }));` && |\n|  &&
             `        //we need to set token text explicitly, as setRangeData does no recalculation` && |\n|  &&
             `        input.getTokens().forEach((token, index) => {` && |\n|  &&
             `          const oRangeData = aRangeData[index];` && |\n|  &&
             `          token.data("longKey", oRangeData.TOKENLONGKEY);` && |\n|  &&
             `          token.data("range", null);` && |\n|  &&
             `          const sTokenText = oRangeData.TOKENTEXT;` && |\n|  &&
             `          if (sTokenText) {` && |\n|  &&
             `            token.setText(sTokenText);` && |\n|  &&
             `          }` && |\n|  &&
             `        });` && |\n|  &&
             `      });` && |\n|  &&
             `    },` && |\n|  &&
             `    renderer(oRm, oControl) { },` && |\n|  &&
             `    setControl() {` && |\n|  &&
             `      const input = z2ui5.oView.byId(this.getProperty("multiInputId"));` && |\n|  &&
             `      if (!input) {` && |\n|  &&
             `        return;` && |\n|  &&
             `      }` && |\n|  &&
             `      if (this.getProperty("checkInit") == true) {` && |\n|  &&
             `        return;` && |\n|  &&
             `      }` && |\n|  &&
             `      this.setProperty("checkInit", true);` && |\n|  &&
             `      input.attachTokenUpdate(this.onTokenUpdate.bind(this));` && |\n|  &&
             `      input.attachInnerControlsCreated(this.onInnerControlsCreated.bind(this));` && |\n|  &&
             `    },` && |\n|  &&
             `    inputInitialized(input) {` && |\n|  &&
             `      return new Promise((resolve, reject) => {` && |\n|  &&
             `        if (this._bInnerControlsCreated) {` && |\n|  &&
             `          resolve(input); //resolve immediately` && |\n|  &&
             `        } else {` && |\n|  &&
             `          this._oPendingInnerControlsCreated = resolve; //resolve later` && |\n|  &&
             `        }` && |\n|  &&
             `      });` && |\n|  &&
             `    },` && |\n|  &&
             `    _oPendingInnerControlsCreated: null,` && |\n|  &&
             `    _bInnerControlsCreated: false,` && |\n|  &&
             `    onInnerControlsCreated(oEvent) {` && |\n|  &&
             `      const input = oEvent.getSource();` && |\n|  &&
             `      if (this._oPendingInnerControlsCreated) {` && |\n|  &&
             `        this._oPendingInnerControlsCreated(input);` && |\n|  &&
             `      }` && |\n|  &&
             `      this._oPendingInnerControlsCreated = null;` && |\n|  &&
             `      this._bInnerControlsCreated = true;` && |\n|  &&
             `    }` && |\n|  &&
             `  });` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/CameraPicture", [` && |\n|  &&
             `  "sap/ui/core/Control",` && |\n|  &&
             `  "sap/m/Dialog",` && |\n|  &&
             `  "sap/m/Button"` && |\n|  &&
             `], function (Control, Dialog, Button) {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `  return Control.extend("z2ui5.CameraPicture", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        id: { type: "string" },` && |\n|  &&
             `        value: { type: "string" },` && |\n|  &&
             `        press: { type: "string" },` && |\n|  &&
             `        autoplay: { type: "boolean", defaultValue: true }` && |\n|  &&
             `      },` && |\n|  &&
             `      events: {` && |\n|  &&
             `        "OnPhoto": {` && |\n|  &&
             `          allowPreventDefault: true,` && |\n|  &&
             `          parameters: {` && |\n|  &&
             `            "photo": {` && |\n|  &&
             `              type: "string"` && |\n|  &&
             `            }` && |\n|  &&
             `          }` && |\n|  &&
             `        }` && |\n|  &&
             `      },` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    capture: function (oEvent) {` && |\n|  &&
             `` && |\n|  &&
             `      var video = document.querySelector("#zvideo");` && |\n|  &&
             `      var canvas = document.getElementById('zcanvas');` && |\n|  &&
             `      var resultb64 = "";` && |\n|  &&
             `      canvas.width = 200;` && |\n|  &&
             `      canvas.height = 200;` && |\n|  &&
             `      canvas.getContext('2d').drawImage(video, 0, 0, 200, 200);` && |\n|  &&
             `      resultb64 = canvas.toDataURL();` && |\n|  &&
             `      this.setProperty("value", resultb64);` && |\n|  &&
             `      this.fireOnPhoto({` && |\n|  &&
             `        "photo": resultb64` && |\n|  &&
             `      });` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    onPicture: function (oEvent) {` && |\n|  &&
             `` && |\n|  &&
             `      if (!this._oScanDialog) {` && |\n|  &&
             `        this._oScanDialog = new Dialog({` && |\n|  &&
             `          title: "Device Photo Function",` && |\n|  &&
             `          contentWidth: "640px",` && |\n|  &&
             `          contentHeight: "480px",` && |\n|  &&
             `          horizontalScrolling: false,` && |\n|  &&
             `          verticalScrolling: false,` && |\n|  &&
             `          stretch: true,` && |\n|  &&
             `          content: [` && |\n|  &&
             `            new HTML({` && |\n|  &&
             `              id: this.getId() + 'PictureContainer',` && |\n|  &&
             `              content: '<video width="600px" height="400px" autoplay="true" id="zvideo">'` && |\n|  &&
             `            }),` && |\n|  &&
             `            new Button({` && |\n|  &&
             `              text: "Capture",` && |\n|  &&
             `              press: function (oEvent) {` && |\n|  &&
             `                this.capture();` && |\n|  &&
             `                this._oScanDialog.close();` && |\n|  &&
             `              }.bind(this)` && |\n|  &&
             `            }),` && |\n|  &&
             `            new HTML({` && |\n|  &&
             `              content: '<canvas hidden id="zcanvas" style="overflow:auto"></canvas>'` && |\n|  &&
             `            }),` && |\n|  &&
             `          ],` && |\n|  &&
             `          endButton: new Button({` && |\n|  &&
             `            text: "Cancel",` && |\n|  &&
             `            press: function (oEvent) {` && |\n|  &&
             `              this._oScanDialog.close();` && |\n|  &&
             `            }.bind(this)` && |\n|  &&
             `          }),` && |\n|  &&
             `        });` && |\n|  &&
             `      }` && |\n|  &&
             `` && |\n|  &&
             `      this._oScanDialog.open();` && |\n|  &&
             `` && |\n|  &&
             `      setTimeout(function () {` && |\n|  &&
             `        var video = document.querySelector('#zvideo');` && |\n|  &&
             `        if (navigator.mediaDevices.getUserMedia) {` && |\n|  &&
             `          navigator.mediaDevices.getUserMedia({ video: { facingMode: { exact: "environment" } } })` && |\n|  &&
             `            .then(function (stream) {` && |\n|  &&
             `              video.srcObject = stream;` && |\n|  &&
             `            })` && |\n|  &&
             `            .catch(function (error) {` && |\n|  &&
             `              console.log("Something went wrong!");` && |\n|  &&
             `            });` && |\n|  &&
             `        }` && |\n|  &&
             `      }.bind(this), 300);` && |\n|  &&
             `` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    renderer: function (oRM, oControl) {` && |\n|  &&
             `` && |\n|  &&
             `      var oButton = new Button({` && |\n|  &&
             `        icon: "sap-icon://camera",` && |\n|  &&
             `        text: "Camera",` && |\n|  &&
             `        press: oControl.onPicture.bind(oControl),` && |\n|  &&
             `      });` && |\n|  &&
             `      oRM.renderControl(oButton);` && |\n|  &&
             `` && |\n|  &&
             `    },` && |\n|  &&
             `  });` && |\n|  &&
             `});` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/UITableExt", ["sap/ui/core/Control"], (Control) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `` && |\n|  &&
             `  return Control.extend("z2ui5.UITableExt", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        tableId: {` && |\n|  &&
             `          type: "String"` && |\n|  &&
             `        }` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    init() {` && |\n|  &&
             `      z2ui5.onBeforeRoundtrip.push(this.readFilter.bind(this));` && |\n|  &&
             `      z2ui5.onAfterRoundtrip.push(this.setFilter.bind(this));` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    readFilter() {` && |\n|  &&
             `      try {` && |\n|  &&
             `        let id = this.getProperty("tableId");` && |\n|  &&
             `        let oTable = z2ui5.oView.byId(id);` && |\n|  &&
             `        this.aFilters = oTable.getBinding().aFilters;` && |\n|  &&
             `      } catch (e) { }` && |\n|  &&
             `      ;` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    setFilter() {` && |\n|  &&
             `      try {` && |\n|  &&
             `        setTimeout((aFilters) => {` && |\n|  &&
             `          let id = this.getProperty("tableId");` && |\n|  &&
             `          let oTable = z2ui5.oView.byId(id);` && |\n|  &&
             `          oTable.getBinding().filter(aFilters);` && |\n|  &&
             `        }` && |\n|  &&
             `          , 100, this.aFilters);` && |\n|  &&
             `      } catch (e) { }` && |\n|  &&
             `      ;` && |\n|  &&
             `    },` && |\n|  &&
             `` && |\n|  &&
             `    renderer(oRM, oControl) { }` && |\n|  &&
             `  });` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/Util", [], () => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `  return {` && |\n|  &&
             `    DateCreateObject: (s) => new Date(s),` && |\n|  &&
             `    //  DateAbapTimestampToDate: (sTimestamp) => new sap.gantt.misc.Format.abapTimestampToDate(sTimestamp), commented for UI5 2.x compatibility` && |\n|  &&
             `    DateAbapDateToDateObject: (d) => new Date(d.slice(0, 4), parseInt(d.slice(4, 6)) - 1, d.slice(6, 8)),` && |\n|  &&
             `    DateAbapDateTimeToDateObject: (d, t = '000000') => new Date(d.slice(0, 4), parseInt(d.slice(4, 6)) - 1, d.slice(6, 8), t.slice(0, 2), t.slice(2, 4), t.slice(4, 6)),` && |\n|  &&
             `  };` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `sap.ui.require(["z2ui5/Util"], (Util) => {` && |\n|  &&
             `  z2ui5.Util = Util;` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/Favicon", ["sap/ui/core/Control"], (Control) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `  return Control.extend("z2ui5.Favicon", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        favicon: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `    setFavicon(val) {` && |\n|  &&
             `      this.setProperty("favicon", val);` && |\n|  &&
             `      let headTitle = document.querySelector('head');` && |\n|  &&
             `      let setFavicon = document.createElement('link');` && |\n|  &&
             `      setFavicon.setAttribute('rel', 'shortcut icon');` && |\n|  &&
             `      setFavicon.setAttribute('href', val);` && |\n|  &&
             `      headTitle.appendChild(setFavicon);` && |\n|  &&
             `    },` && |\n|  &&
             `    renderer(oRm, oControl) { }` && |\n|  &&
             `  });` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
             `` && |\n|  &&
             `sap.ui.define("z2ui5/Dirty", ["sap/ui/core/Control", "sap/ushell/Container"], (Control, Container) => {` && |\n|  &&
             `  "use strict";` && |\n|  &&
             `  return Control.extend("z2ui5.Dirty", {` && |\n|  &&
             `    metadata: {` && |\n|  &&
             `      properties: {` && |\n|  &&
             `        isDirty: {` && |\n|  &&
             `          type: "string"` && |\n|  &&
             `        },` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `    setIsDirty(val) {` && |\n|  &&
             `      if (Container) {` && |\n|  &&
             `        Container.setDirtyFlag(val);` && |\n|  &&
             `      } else {` && |\n|  &&
             `        window.onbeforeunload = function (e) {` && |\n|  &&
             `          if (val) {` && |\n|  &&
             `            e.preventDefault();` && |\n|  &&
             `          }` && |\n|  &&
             `        }` && |\n|  &&
             `      }` && |\n|  &&
             `    },` && |\n|  &&
             `    renderer(oRm, oControl) { }` && |\n|  &&
             `  });` && |\n|  &&
             `}` && |\n|  &&
             `);` && |\n|  &&
              ``.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_core_srv_util IMPLEMENTATION.
  METHOD app_get_url.

    IF classname IS INITIAL.
      classname = rtti_get_classname_by_ref( client->get_app( ) ).
    ENDIF.

    DATA(lv_url) = |{ client->get( )-s_config-origin }{ client->get( )-s_config-pathname }?|.
    DATA(lt_param) = url_param_get_tab( client->get( )-s_config-search ).
    DELETE lt_param WHERE n = `app_start`.
    INSERT VALUE #( n = `app_start`
                    v = to_lower( classname ) ) INTO TABLE lt_param.

    result = lv_url && url_param_create_url( lt_param ) && client->get( )-s_config-hash.

  ENDMETHOD.

  METHOD app_get_url_source_code.

    DATA(ls_config) = client->get( )-s_config.
    result = |{ ls_config-origin }/sap/bc/adt/oo/classes/|
       && |{ rtti_get_classname_by_ref( client->get_app( ) ) }/source/main|.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_core_srv_json IMPLEMENTATION.
  METHOD model_front_to_back.

    IF line_exists( t_attri->*[ view = view ] ).
      DATA(lv_view) = view.
    ELSE.
      lv_view = z2ui5_if_client=>cs_view-main.
    ENDIF.

    LOOP AT t_attri->* REFERENCE INTO DATA(lr_attri)
         WHERE     bind_type = z2ui5_if_core_types=>cs_bind_type-two_way
               AND view      = lv_view.
      TRY.

          DATA(lo_val_front) = model->slice( lr_attri->name_client ).
          IF lo_val_front IS NOT BOUND.
            CONTINUE.
          ENDIF.

          IF lr_attri->custom_mapper_back IS BOUND.
            lo_val_front = lo_val_front->map( lr_attri->custom_mapper_back ).
          ENDIF.

          IF lr_attri->custom_filter_back IS BOUND.
            lo_val_front = lo_val_front->filter( lr_attri->custom_filter_back ).
          ENDIF.

          ASSIGN lr_attri->r_ref->* TO FIELD-SYMBOL(<val>).
          IF sy-subrc <> 0.
            CONTINUE.
          ENDIF.

          lo_val_front->to_abap( IMPORTING ev_container = <val> ).

        CATCH cx_root INTO DATA(x).
          z2ui5_cl_util=>x_raise( |JSON_PARSING_ERROR: { x->get_text( ) } | ).
      ENDTRY.
    ENDLOOP.

  ENDMETHOD.
  METHOD model_back_to_front.
    TRY.

        DATA(ajson_result) = CAST z2ui5_if_ajson( z2ui5_cl_ajson=>create_empty( ) ).
        LOOP AT t_attri->* REFERENCE INTO DATA(lr_attri) WHERE bind_type <> ``.

          IF lr_attri->custom_mapper IS BOUND.
            DATA(ajson) = CAST z2ui5_if_ajson( z2ui5_cl_ajson=>create_empty(
                                                   ii_custom_mapping = lr_attri->custom_mapper ) ).
          ELSE.
            ajson = CAST z2ui5_if_ajson( z2ui5_cl_ajson=>create_empty(
                                             ii_custom_mapping = z2ui5_cl_ajson_mapping=>create_upper_case( ) ) ).
          ENDIF.

          CASE lr_attri->bind_type.
            WHEN z2ui5_if_core_types=>cs_bind_type-one_way
            OR z2ui5_if_core_types=>cs_bind_type-two_way.

              ASSIGN lr_attri->r_ref->* TO FIELD-SYMBOL(<attribute>).
              IF sy-subrc <> 0.
                CONTINUE.
              ENDIF.

              ajson->set( iv_ignore_empty = abap_false
                          iv_path         = `/`
                          iv_val          = <attribute> ).

            WHEN z2ui5_if_core_types=>cs_bind_type-one_time.
              ajson->set( iv_ignore_empty = abap_false
                          iv_path         = `/`
                          iv_val          = lr_attri->json_bind_local ).

            WHEN OTHERS.
              ASSERT `` = `ERROR_UNKNOWN_BIND_MODE`.
          ENDCASE.

          IF lr_attri->custom_filter IS BOUND.
            ajson = ajson->filter( lr_attri->custom_filter ).
          ENDIF.

          ajson_result->set( iv_path = lr_attri->name_client
                             iv_val  = ajson ).
        ENDLOOP.

        result = ajson_result->stringify( ).
        result = COND #( WHEN result IS INITIAL THEN `{}` ELSE result ).

      CATCH cx_root INTO DATA(x).
        ASSERT x IS NOT BOUND.
    ENDTRY.
  ENDMETHOD.
  METHOD request_json_to_abap.
    TRY.

        DATA(lo_ajson) = CAST z2ui5_if_ajson( z2ui5_cl_ajson=>parse( val ) ).

        DATA(lv_model_edit_name) = |/{ z2ui5_if_core_types=>cs_ui5-two_way_model }|.

        result-o_model = z2ui5_cl_ajson=>create_empty( ).
        DATA(lo_model) = lo_ajson->slice( lv_model_edit_name ).
        result-o_model->set( iv_path = lv_model_edit_name
                             iv_val  = lo_model ).
        lo_ajson->delete( lv_model_edit_name ).

        lo_ajson = lo_ajson->slice( `/S_FRONT` ).
        lo_ajson->to_abap( EXPORTING iv_corresponding = abap_true
                           IMPORTING ev_container     = result-s_front ).

        result-s_front-o_comp_data = lo_ajson->slice( `/CONFIG/ComponentData` ).

        result-s_control-check_launchpad = xsdbool(    result-s_front-search   CS `scenario=LAUNCHPAD`
                                                    OR result-s_front-pathname CS `/ui2/flp`
                                                    OR result-s_front-pathname CS `test/flpSandbox`
             ).
        IF result-s_front-id IS NOT INITIAL.
          RETURN.
        ENDIF.

        TRY.
            IF result-s_front-o_comp_data IS BOUND.
              DATA(lo_comp) = result-s_front-o_comp_data.
              DATA(lv_app_start) = lo_comp->get( `/startupParameters/app_start/1` ).
              result-s_control-app_start = lv_app_start.
              result-s_control-app_start = z2ui5_cl_util=>c_trim_upper( result-s_control-app_start ).
            ENDIF.
          CATCH cx_root.
        ENDTRY.

        TRY.
            DATA(lv_hash) = result-s_front-hash.
            SPLIT lv_hash AT '&/' INTO DATA(lv_dummy) lv_hash.
            IF lv_hash IS INITIAL.
              lv_hash = result-s_front-hash+2.
            ENDIF.
            result-s_control-app_start_draft = z2ui5_cl_util=>c_trim_upper(
                                           z2ui5_cl_util=>url_param_get( val = `z2ui5-xapp-state`
                                                                         url = lv_hash ) ).
          CATCH cx_root.
        ENDTRY.
        IF result-s_control-app_start IS NOT INITIAL.
          IF result-s_control-app_start(1) = `-`.
            REPLACE FIRST OCCURRENCE OF `-` IN result-s_control-app_start WITH `/`.
            REPLACE FIRST OCCURRENCE OF `-` IN result-s_control-app_start WITH `/`.
          ENDIF.
          RETURN.
        ENDIF.

        result-s_control-app_start = z2ui5_cl_util=>c_trim_upper(
                                         z2ui5_cl_util=>url_param_get( val = `app_start`
                                                                       url = result-s_front-search ) ).
      CATCH cx_root INTO DATA(x).
        RAISE EXCEPTION TYPE z2ui5_cx_util_error
          EXPORTING
            val = x.
    ENDTRY.
  ENDMETHOD.
  METHOD response_abap_to_json.
    TRY.

        DATA(ajson_result) = CAST z2ui5_if_ajson( z2ui5_cl_ajson=>create_empty(
                                                      ii_custom_mapping = z2ui5_cl_ajson_mapping=>create_upper_case( ) ) ).

        ajson_result->set( iv_path = `/`
                           iv_val  = val-s_front ).
        ajson_result = ajson_result->filter( NEW z2ui5_cl_core_srv_json( ) ).
        DATA(lv_frontend) = ajson_result->stringify( ).

        result = |\{| &&
            |"S_FRONT":{ lv_frontend },| &&
            |"MODEL":{ val-model }| &&
          |\}|.

      CATCH cx_root INTO DATA(x).
        ASSERT x IS NOT BOUND.
    ENDTRY.
  ENDMETHOD.
  METHOD z2ui5_if_ajson_filter~keep_node.

    rv_keep = abap_true.

    CASE iv_visit.

      WHEN z2ui5_if_ajson_filter=>visit_type-value.

        CASE is_node-type.
          WHEN z2ui5_if_ajson_types=>node_type-boolean.
            IF is_node-value = `false`.
              rv_keep = abap_false.
            ENDIF.
          WHEN z2ui5_if_ajson_types=>node_type-number.
            IF is_node-value = `0`.
              rv_keep = abap_false.
            ENDIF.
          WHEN z2ui5_if_ajson_types=>node_type-string.
            IF is_node-value = ``.
              rv_keep = abap_false.
            ENDIF.
        ENDCASE.

      WHEN z2ui5_if_ajson_filter=>visit_type-close.

        IF is_node-children = 0.
          rv_keep = abap_false.
        ENDIF.

    ENDCASE.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_core_srv_event IMPLEMENTATION.

  METHOD get_event.

    result = |{ z2ui5_if_core_types=>cs_ui5-event_backend_function }(['{ val }'|.

    IF s_cnt-check_allow_multi_req = abap_true.
      result = |{ result },false,true|.
    ENDIF.

    result = |{ result }]{ get_t_arg( t_arg ) }|.

  ENDMETHOD.

  METHOD get_event_client.

    result = |{ z2ui5_if_core_types=>cs_ui5-event_frontend_function }('{ val }'|.
    result = result && get_t_arg( t_arg ).

  ENDMETHOD.

  METHOD get_t_arg.

    IF val IS NOT INITIAL.

      LOOP AT val REFERENCE INTO DATA(lr_arg).
        DATA(lv_new) = lr_arg->*.
        IF lv_new IS INITIAL.
          CONTINUE.
        ENDIF.
        IF lv_new(1) <> `$` AND lv_new(1) <> `{`.
          lv_new = |'{ lv_new }'|.
        ENDIF.
        result = |{ result }, { lv_new }|.
      ENDLOOP.

    ENDIF.

    result = |{ result })|.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_core_srv_diss IMPLEMENTATION.
  METHOD constructor.

    mt_attri = attri.
    mo_app = app.

  ENDMETHOD.

  METHOD create_new_entry.

    result = VALUE z2ui5_if_core_types=>ty_s_attri( ).
    result-name = name.
    DATA(lo_model) = NEW z2ui5_cl_core_srv_attri( attri = mt_attri
                                                  app   = mo_app ).
    result-r_ref       = lo_model->attri_get_val_ref( name ).
    result-o_typedescr = cl_abap_datadescr=>describe_by_data_ref( result-r_ref ).

  ENDMETHOD.

  METHOD diss_dref.

    IF z2ui5_cl_util=>check_unassign_inital( ir_attri->r_ref ).
      RETURN.
    ENDIF.

    DATA(lr_ref) = z2ui5_cl_util=>unassign_data( ir_attri->r_ref ).
    IF lr_ref IS INITIAL.
      RETURN.
    ENDIF.

    DATA(ls_attri2) = VALUE z2ui5_if_core_types=>ty_s_attri( ).
    ls_attri2-o_typedescr = cl_abap_datadescr=>describe_by_data_ref( lr_ref ).

    CASE ls_attri2-o_typedescr->kind.

      WHEN cl_abap_datadescr=>kind_struct.
        DATA(lt_attri) = diss_struc( ir_attri ).
        INSERT LINES OF lt_attri INTO TABLE result.

      WHEN OTHERS.

        ls_attri2-name = |{ ir_attri->name }->*|.
        DATA(lo_model) = NEW z2ui5_cl_core_srv_attri( attri = mt_attri
                                                      app   = mo_app ).
        ls_attri2-r_ref = lo_model->attri_get_val_ref( ls_attri2-name ).
        INSERT ls_attri2 INTO TABLE result.

    ENDCASE.

  ENDMETHOD.

  METHOD diss_oref.

    IF z2ui5_cl_util=>check_unassign_inital( ir_attri->r_ref ).
      RETURN.
    ENDIF.

    DATA(lr_ref) = z2ui5_cl_util=>unassign_object( ir_attri->r_ref ).
    DATA(lt_attri) = z2ui5_cl_util=>rtti_get_t_attri_by_oref( lr_ref ).

    LOOP AT lt_attri REFERENCE INTO DATA(lr_attri)
         WHERE     visibility   = cl_abap_objectdescr=>public
               AND is_interface = abap_false
               AND is_constant  = abap_false.
      TRY.
          DATA(lv_name) = COND #( WHEN ir_attri->name IS NOT INITIAL THEN |{ ir_attri->name }->| ) && lr_attri->name.
          DATA(ls_new) = create_new_entry( lv_name ).
          INSERT ls_new INTO TABLE result.

        CATCH cx_root.
      ENDTRY.
    ENDLOOP.

  ENDMETHOD.

  METHOD diss_struc.

    IF ir_attri->o_typedescr->kind = cl_abap_typedescr=>kind_ref.
      DATA(lv_name) = |{ ir_attri->name }->|.
      DATA(lr_ref) = z2ui5_cl_util=>unassign_data( ir_attri->r_ref ).
    ELSE.
      lv_name = |{ ir_attri->name }-|.
      lr_ref = ir_attri->r_ref.
    ENDIF.

    DATA(lt_attri) = z2ui5_cl_util=>rtti_get_t_attri_by_any( lr_ref ).

    LOOP AT lt_attri INTO DATA(ls_attri).
      DATA(ls_new) = create_new_entry( lv_name && ls_attri-name ).
      INSERT ls_new INTO TABLE result.
    ENDLOOP.

  ENDMETHOD.

  METHOD main.

    TRY.

        main_init( ).

        IF line_exists( mt_attri->*[ check_dissolved = abap_false ] ).
          main_run( ).
        ENDIF.

      CATCH cx_root.
        CLEAR mt_attri->*.
        main_init( ).

        IF line_exists( mt_attri->*[ check_dissolved = abap_false ] ).
          main_run( ).
        ENDIF.
    ENDTRY.

  ENDMETHOD.

  METHOD main_init.

    IF mt_attri->* IS NOT INITIAL.
      LOOP AT mt_attri->* TRANSPORTING NO FIELDS
           WHERE bind_type <> z2ui5_if_core_types=>cs_bind_type-one_time.
      ENDLOOP.
      IF sy-subrc = 0.
        RETURN.
      ENDIF.
    ENDIF.

    DATA(ls_attri) = VALUE z2ui5_if_core_types=>ty_s_attri( r_ref = REF #( mo_app ) ).
    DATA(lt_init) = diss_oref( REF #( ls_attri ) ).
    INSERT LINES OF lt_init INTO TABLE mt_attri->*.

  ENDMETHOD.

  METHOD main_run.

    DATA(lt_attri_new) = VALUE z2ui5_if_core_types=>ty_t_attri( ).

    LOOP AT mt_attri->* REFERENCE INTO DATA(lr_attri)
         WHERE     check_dissolved  = abap_false
               AND bind_type       <> z2ui5_if_core_types=>cs_bind_type-one_time.

      lr_attri->check_dissolved = abap_true.

      IF lr_attri->o_typedescr IS NOT BOUND.
        DATA(ls_entry) = create_new_entry( lr_attri->name ).
        lr_attri->o_typedescr = ls_entry-o_typedescr.
        lr_attri->r_ref       = ls_entry-r_ref.
      ENDIF.

      CASE lr_attri->o_typedescr->kind.

        WHEN cl_abap_typedescr=>kind_struct.
          DATA(lt_attri_struc) = diss_struc( lr_attri ).
          INSERT LINES OF lt_attri_struc INTO TABLE lt_attri_new.

        WHEN cl_abap_typedescr=>kind_ref.

          CASE lr_attri->o_typedescr->type_kind.

            WHEN cl_abap_typedescr=>typekind_oref.
              DATA(lt_attri_oref) = diss_oref( lr_attri ).
              INSERT LINES OF lt_attri_oref INTO TABLE lt_attri_new.
            WHEN cl_abap_typedescr=>typekind_dref.
              DATA(lt_attri_dref) = diss_dref( lr_attri ).
              INSERT LINES OF lt_attri_dref INTO TABLE lt_attri_new.
            WHEN OTHERS.
              ASSERT 1 = 0.
          ENDCASE.
        WHEN OTHERS.
      ENDCASE.

    ENDLOOP.
    INSERT LINES OF lt_attri_new INTO TABLE mt_attri->*.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_core_srv_bind IMPLEMENTATION.
  METHOD bind_tab_cell.

    FIELD-SYMBOLS <ele> TYPE any.
    FIELD-SYMBOLS <row> TYPE any.
    DATA lr_ref_in TYPE REF TO data.

    FIELD-SYMBOLS <tab> TYPE STANDARD TABLE.

    ASSIGN ms_config-tab->* TO <tab>.
    ASSIGN <tab>[ ms_config-tab_index ] TO <row>.

    DATA(lt_attri) = z2ui5_cl_util=>rtti_get_t_attri_by_any( ms_config-tab ).
    LOOP AT lt_attri ASSIGNING FIELD-SYMBOL(<comp>).

      ASSIGN COMPONENT <comp>-name OF STRUCTURE <row> TO <ele>.
      ASSERT sy-subrc = 0.
      lr_ref_in = REF #( <ele> ).

      IF i_val = lr_ref_in.
        result = |{ iv_name }/{ shift_right( CONV string( ms_config-tab_index - 1 ) ) }/{ <comp>-name }|.
        RETURN.
      ENDIF.

    ENDLOOP.

    RAISE EXCEPTION TYPE z2ui5_cx_util_error
      EXPORTING
        val = `BINDING_ERROR_TAB_CELL_LEVEL - No class attribute for binding found - Please check if the binded values are public attributes of your class`.

  ENDMETHOD.

  METHOD check_raise_existing.

    IF mr_attri->bind_type <> mv_type.
      RAISE EXCEPTION TYPE z2ui5_cx_util_error
        EXPORTING
          val = |<p>Binding Error - Two different binding types for same attribute used ({ mr_attri->name }).|.
    ENDIF.

    IF mr_attri->custom_mapper IS BOUND.

      DATA(lv_name1) = z2ui5_cl_util=>rtti_get_classname_by_ref( mr_attri->custom_mapper ).
      DATA(lv_name2) = z2ui5_cl_util=>rtti_get_classname_by_ref( ms_config-custom_mapper ).
      IF lv_name1 <> lv_name2.
        RAISE EXCEPTION TYPE z2ui5_cx_util_error
          EXPORTING
            val = |<p>Binding Error - Two different mapper for same attribute used ({ mr_attri->name }).|.
      ENDIF.
    ENDIF.

    IF mr_attri->custom_mapper_back IS BOUND AND mr_attri->custom_mapper_back <> ms_config-custom_mapper_back.
      RAISE EXCEPTION TYPE z2ui5_cx_util_error
        EXPORTING
          val = |<p>Binding Error - Two different mapper back for same attribute used ({ mr_attri->name }).|.
    ENDIF.

    IF mr_attri->custom_filter IS BOUND AND mr_attri->custom_filter <> ms_config-custom_filter.
      RAISE EXCEPTION TYPE z2ui5_cx_util_error
        EXPORTING
          val = |<p>Binding Error - Two different filter for same attribute used ({ mr_attri->name }).|.
    ENDIF.

  ENDMETHOD.

  METHOD check_raise_new.

    IF mr_attri->custom_filter_back IS BOUND.
      TRY.
          DATA(lo_dummy) = CAST if_serializable_object( mr_attri->custom_filter_back ) ##NEEDED.
        CATCH cx_root.
          RAISE EXCEPTION TYPE z2ui5_cx_util_error
            EXPORTING
              val = `<p>custom_filter_back used but it is not serializable, please use if_serializable_object`.

      ENDTRY.
    ENDIF.

    IF mr_attri->custom_filter_back IS BOUND.
      TRY.
          DATA(lo_dummy2) = CAST if_serializable_object( mr_attri->custom_mapper_back ) ##NEEDED.
        CATCH cx_root.
          RAISE EXCEPTION TYPE z2ui5_cx_util_error
            EXPORTING
              val = `<p>mo_custom_mapper_back used but it is not serializable, please use if_serializable_object`.

      ENDTRY.
    ENDIF.

  ENDMETHOD.

  METHOD clear.

    TRY.
        DATA(lv_path) = shift_right( val = val
                                     sub = `->*` ).
        mo_app->mt_attri->*[ name = lv_path ]-check_dissolved = abap_false.
        mo_app->mt_attri->*[ name = val ]-check_dissolved = abap_false.
        mo_app->mt_attri->*[ name = lv_path ]-name_client = ``.
        mo_app->mt_attri->*[ name = lv_path ]-bind_type = ``.

        LOOP AT mo_app->mt_attri->* REFERENCE INTO DATA(lr_bind2)
             WHERE name = lv_path.
          CLEAR lr_bind2->r_ref.
        ENDLOOP.

      CATCH cx_root.
    ENDTRY.

  ENDMETHOD.

  METHOD constructor.

    mo_app = app.

  ENDMETHOD.

  METHOD get_client_name.

    result = replace( val  = mr_attri->name
                      sub  = `-`
                      with = `/`
                      occ  = 0 ).
    result = replace( val  = result
                      sub  = `>`
                      with = ``
                      occ  = 0 ).
    result = COND #( WHEN mv_type = z2ui5_if_core_types=>cs_bind_type-two_way
                     THEN |/{ z2ui5_if_core_types=>cs_ui5-two_way_model }| )
        && |/{ result }|.

  ENDMETHOD.

  METHOD main.

    IF z2ui5_cl_util=>check_bound_a_not_inital( config-tab ).

      result = main_cell( val    = val
                          type   = type
                          config = config ).

      RETURN.
    ENDIF.

    ms_config = config.
    mv_type   = type.

    DATA(lo_model) = NEW z2ui5_cl_core_srv_attri( attri = mo_app->mt_attri
                                                  app   = mo_app->mo_app ).

    lo_model->attri_refs_update( ).

    mr_attri = lo_model->attri_search_a_dissolve( val ).

    IF mr_attri->bind_type IS NOT INITIAL.
      check_raise_existing( ).
    ELSE.
      check_raise_new( ).
      update_model_attri( ).
    ENDIF.
    result = mr_attri->name_client.

    IF |/{ z2ui5_if_core_types=>cs_ui5-two_way_model }| = result.
      RAISE EXCEPTION TYPE z2ui5_cx_util_error
        EXPORTING
          val = `<p>Name of variable not allowed - x is reserved word - use anoter name for your attribute`.

    ENDIF.

    IF ms_config-switch_default_model = abap_true.
      result = |http>{ result }|.
    ENDIF.

    IF ms_config-path_only = abap_false.
      result = |\{{ result }\}|.
    ENDIF.

  ENDMETHOD.

  METHOD main_cell.

    ms_config = config.
    mv_type   = type.

    DATA(lo_bind) = NEW z2ui5_cl_core_srv_bind( mo_app ).
    result = lo_bind->main( val    = config-tab
                            type   = type
                            config = VALUE #( path_only = abap_true ) ).

    result = bind_tab_cell( iv_name = result
                            i_val   = val ).

    IF ms_config-path_only = abap_false.
      result = |\{{ result }\}|.
    ENDIF.

  ENDMETHOD.

  METHOD main_local.
    TRY.

        DATA(lo_json) = CAST z2ui5_if_ajson( z2ui5_cl_ajson=>new( ) ).
        lo_json->set( iv_path = `/`
                      iv_val  = val ).

        IF config-custom_mapper IS BOUND.
          lo_json = lo_json->map( config-custom_mapper ).
        ELSE.
          lo_json = lo_json->map( z2ui5_cl_ajson_mapping=>create_upper_case( ) ).
        ENDIF.

        IF config-custom_filter IS BOUND.
          lo_json = lo_json->filter( config-custom_filter ).
        ELSE.
          lo_json = lo_json->filter( z2ui5_cl_ajson_filter_lib=>create_empty_filter( ) ).
        ENDIF.

        DATA(lv_id) = to_upper( z2ui5_cl_util=>uuid_get_c22( ) ).
        INSERT VALUE #( name_client     = |/{ lv_id }|
                        name            = lv_id
                        json_bind_local = lo_json
                        bind_type       = z2ui5_if_core_types=>cs_bind_type-one_time )
               INTO TABLE mo_app->mt_attri->*.

        result = |/{ lv_id }|.

        IF ms_config-switch_default_model = abap_true.
          result = |http>{ result }|.
        ENDIF.

        IF config-path_only = abap_false.
          result = |\{{ result }\}|.
        ENDIF.

      CATCH cx_root INTO DATA(x).
        ASSERT x IS NOT BOUND.
    ENDTRY.
  ENDMETHOD.

  METHOD update_model_attri.

    mr_attri->bind_type          = mv_type.
    mr_attri->view               = ms_config-view.
    mr_attri->custom_filter      = ms_config-custom_filter.
    mr_attri->custom_filter_back = ms_config-custom_filter_back.
    mr_attri->custom_mapper      = ms_config-custom_mapper.
    mr_attri->custom_mapper_back = ms_config-custom_mapper_back.
    mr_attri->view               = COND #( WHEN ms_config-view IS INITIAL
                                           THEN z2ui5_if_client=>cs_view-main
                                           ELSE ms_config-view ).
    mr_attri->name_client        = get_client_name( ).

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_core_srv_attri IMPLEMENTATION.
  METHOD attri_after_load.

    LOOP AT mt_attri->* REFERENCE INTO DATA(lr_attri).
      TRY.
          lr_attri->r_ref       = attri_get_val_ref( lr_attri->name ).
          lr_attri->o_typedescr = cl_abap_datadescr=>describe_by_data_ref( lr_attri->r_ref ).

          IF lr_attri->srtti_data IS NOT INITIAL.
            ASSIGN lr_attri->r_ref->* TO FIELD-SYMBOL(<val>).
            <val> = z2ui5_cl_util=>xml_srtti_parse( lr_attri->srtti_data ).
            CLEAR lr_attri->srtti_data.
          ENDIF.

        CATCH cx_root.
      ENDTRY.
    ENDLOOP.

  ENDMETHOD.

  METHOD attri_before_save.

    LOOP AT mt_attri->* REFERENCE INTO DATA(lr_attri).

      IF lr_attri->o_typedescr IS NOT BOUND.
        CONTINUE.
      ENDIF.

      IF lr_attri->bind_type = z2ui5_if_core_types=>cs_bind_type-one_time.
        DELETE mt_attri->*.
        CONTINUE.
      ENDIF.

      IF lr_attri->o_typedescr->type_kind <> cl_abap_classdescr=>typekind_dref.
        CLEAR lr_attri->r_ref.
        CONTINUE.
      ENDIF.

      IF lr_attri->r_ref IS NOT BOUND.
        CONTINUE.
      ENDIF.

      ASSIGN lr_attri->r_ref->* TO FIELD-SYMBOL(<val_ref>).
      IF <val_ref> IS NOT INITIAL.
        ASSIGN <val_ref>->* TO FIELD-SYMBOL(<val>).
        lr_attri->srtti_data = z2ui5_cl_util=>xml_srtti_stringify( <val> ).
        CLEAR <val>.
      ENDIF.

      CLEAR <val_ref>.
      CLEAR lr_attri->r_ref.

    ENDLOOP.

  ENDMETHOD.

  METHOD attri_search_a_dissolve.

    result = attri_search( val ).
    IF result IS BOUND.
      RETURN.
    ENDIF.

    DATA(lo_dissolve) = NEW z2ui5_cl_core_srv_diss( attri = mt_attri
                                                    app   = mo_app ).

    DO 5 TIMES.

      lo_dissolve->main( ).

      result = attri_search( val ).
      IF result IS BOUND.
        RETURN.
      ENDIF.

      IF line_exists( mt_attri->*[ check_dissolved = abap_false ] ).
        CONTINUE.
      ENDIF.

      EXIT.
    ENDDO.

    """"" new
    DATA(lt_attri) = mt_attri->*.
    DELETE lt_attri WHERE bind_type IS INITIAL.
    CLEAR mt_attri->*.
    DO 5 TIMES.

      lo_dissolve->main( ).

      result = attri_search( val ).
      IF result IS BOUND.
        LOOP AT mt_attri->* ASSIGNING FIELD-SYMBOL(<ls_attri>).
          DATA(lv_name) = <ls_attri>-name.
          IF line_exists( lt_attri[ name = lv_name ] ).
            <ls_attri>-bind_type   = lt_attri[ name = lv_name ]-bind_type.
            <ls_attri>-name_client = lt_attri[ name = lv_name ]-name_client.
            <ls_attri>-view        = lt_attri[ name = lv_name ]-view.
          ENDIF.
        ENDLOOP.
        RETURN.
      ENDIF.

      IF line_exists( mt_attri->*[ check_dissolved = abap_false ] ).
        CONTINUE.
      ENDIF.

      EXIT.
    ENDDO.

    """""

    RAISE EXCEPTION TYPE z2ui5_cx_util_error
      EXPORTING
        val = `BINDING_ERROR - No class attribute for binding found - Please check if the binded values are public attributes of your class or switch to bind_local`.

  ENDMETHOD.

  METHOD attri_get_val_ref.

    ASSIGN mo_app->(iv_path) TO FIELD-SYMBOL(<attri>).

    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE z2ui5_cx_util_error
        EXPORTING
          val = `DEREF_FAILED_TARGET_INITIAL`.
    ENDIF.

    GET REFERENCE OF <attri> INTO result.
    IF sy-subrc <> 0.
      ASSERT 1 = 0.
    ENDIF.

  ENDMETHOD.

  METHOD attri_refs_update.

    LOOP AT mt_attri->* REFERENCE INTO DATA(lr_attri).
      TRY.
          lr_attri->r_ref       = attri_get_val_ref( lr_attri->name ).
          lr_attri->o_typedescr = cl_abap_datadescr=>describe_by_data_ref( lr_attri->r_ref ).
        CATCH cx_root.
      ENDTRY.
    ENDLOOP.

  ENDMETHOD.

  METHOD constructor.

    mt_attri = attri.
    mo_app = app.

  ENDMETHOD.

  METHOD attri_search.

    LOOP AT mt_attri->* REFERENCE INTO DATA(lr_attri)
         WHERE o_typedescr IS BOUND.

      IF     lr_attri->o_typedescr->kind <> cl_abap_typedescr=>kind_elem
         AND lr_attri->o_typedescr->kind <> cl_abap_typedescr=>kind_struct
         AND lr_attri->o_typedescr->kind <> cl_abap_typedescr=>kind_table.
        CONTINUE.
      ENDIF.

      IF lr_attri->r_ref = val.
        result = lr_attri.
        RETURN.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.
ENDCLASS.
CLASS z2ui5_cl_core_handler IMPLEMENTATION.

  METHOD constructor.

    mv_request_json = val.
    mo_action = NEW z2ui5_cl_core_action( me ).

  ENDMETHOD.

  METHOD main.

    main_begin( ).
    DO.
      IF main_process( ).
        EXIT.
      ENDIF.
    ENDDO.

    result = VALUE #( body       = mv_response
                      s_stateful = ms_response-s_front-params-s_stateful
    ).

  ENDMETHOD.

  METHOD main_begin.
    TRY.

        DATA(lo_json_mapper) = NEW z2ui5_cl_core_srv_json( ).
        ms_request = lo_json_mapper->request_json_to_abap( mv_request_json ).

        IF ms_request-s_front-id IS NOT INITIAL.
          mo_action = mo_action->factory_by_frontend( ).

        ELSEIF ms_request-s_control-app_start IS NOT INITIAL.
          NEW z2ui5_cl_core_srv_draft( )->cleanup( ).
          mo_action = mo_action->factory_first_start( ).

        ELSE.
          mo_action = mo_action->factory_system_startup( ).
        ENDIF.

      CATCH cx_root INTO DATA(x).
        ASSERT x->get_text( ) = 1.
    ENDTRY.
  ENDMETHOD.

  METHOD main_end.

    ms_response = VALUE #( s_front-params = mo_action->ms_next-s_set
                           s_front-id     = mo_action->mo_app->ms_draft-id
                           s_front-app    = z2ui5_cl_util=>rtti_get_classname_by_ref( mo_action->mo_app->mo_app )
        ).

    IF    ms_response-s_front-params-s_view-check_update_model        = abap_true
       OR ms_response-s_front-params-s_view_nest-check_update_model   = abap_true
       OR ms_response-s_front-params-s_view_nest2-check_update_model  = abap_true
       OR ms_response-s_front-params-s_popup-check_update_model       = abap_true
       OR ms_response-s_front-params-s_popover-check_update_model     = abap_true
       OR ms_response-s_front-params-s_view-xml IS NOT INITIAL
       OR ms_response-s_front-params-s_view_nest-xml                 IS NOT INITIAL
       OR ms_response-s_front-params-s_view_nest2-xml                IS NOT INITIAL
       OR ms_response-s_front-params-s_popup-xml IS NOT INITIAL
       OR ms_response-s_front-params-s_popover-xml                   IS NOT INITIAL.

      DATA(lo_model) = NEW z2ui5_cl_core_srv_attri( attri = mo_action->mo_app->mt_attri
                                                    app   = mo_action->mo_app->mo_app ).
      lo_model->attri_refs_update( ).
      ms_response-model = mo_action->mo_app->model_json_stringify( ).

    ELSE.
      ms_response-model = `{}`.
    ENDIF.

    DATA(lo_json_mapper) = NEW z2ui5_cl_core_srv_json( ).
    mv_response = lo_json_mapper->response_abap_to_json( ms_response ).

    CLEAR mo_action->ms_next.

    IF CAST z2ui5_if_app( mo_action->mo_app->mo_app )->check_sticky = abap_false.
      mo_action->mo_app->db_save( ).
    ENDIF.

  ENDMETHOD.

  METHOD main_process.
    TRY.

        DATA(li_client) = NEW z2ui5_cl_core_client( mo_action ).
        DATA(li_app)    = CAST z2ui5_if_app( mo_action->mo_app->mo_app ).

        IF li_app->check_sticky = abap_false.
          ROLLBACK WORK.
        ENDIF.
        li_app->main( li_client ).
        IF li_app->check_sticky = abap_false.
          ROLLBACK WORK.
        ENDIF.

        IF mo_action->ms_next-o_app_leave IS NOT INITIAL.
          mo_action = mo_action->factory_stack_leave( ).

        ELSEIF mo_action->ms_next-o_app_call IS NOT INITIAL.
          mo_action = mo_action->factory_stack_call( ).

        ELSE.
          main_end( ).
          check_go_client = abap_true.
        ENDIF.

      CATCH cx_root INTO DATA(x).
        ASSERT x->get_text( ) = 1.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_core_client IMPLEMENTATION.

  METHOD constructor.

    mo_action = action.

  ENDMETHOD.

  METHOD z2ui5_if_client~follow_up_action.

*    mo_action->ms_next-s_set-s_follow_up_action-custom_js = val.
    INSERT val INTO TABLE mo_action->ms_next-s_set-s_follow_up_action-custom_js.

  ENDMETHOD.

  METHOD z2ui5_if_client~get.

    result = VALUE #( event                  = mo_action->ms_actual-event
                      check_launchpad_active = mo_action->mo_http_post->ms_request-s_control-check_launchpad
                      t_event_arg            = mo_action->ms_actual-t_event_arg
                      s_draft                = CORRESPONDING #( mo_action->mo_app->ms_draft )
                      check_on_navigated     = mo_action->ms_actual-check_on_navigated
                      s_config               = CORRESPONDING #( mo_action->mo_http_post->ms_request-s_front )
                      r_event_data           = mo_action->ms_actual-r_data
      ).

    TRY.
        DATA(lo_params) = mo_action->mo_http_post->ms_request-s_front-o_comp_data->slice( `/startupParameters/` ).
        IF lo_params IS NOT BOUND.
          RETURN.
        ENDIF.
        LOOP AT lo_params->mt_json_tree
             REFERENCE INTO DATA(lr_comp)
             WHERE name = `1`.

          INSERT VALUE #( n = shift_left( val = shift_right( val = lr_comp->path
                                                             sub = `/` )
                                          sub = `/` )
                          v = lr_comp->value ) INTO TABLE result-t_comp_params.
        ENDLOOP.
      CATCH cx_root.
    ENDTRY.

  ENDMETHOD.

  METHOD z2ui5_if_client~get_event_arg.

    TRY.
        result = mo_action->ms_actual-t_event_arg[ v ].
      CATCH cx_root.
    ENDTRY.

  ENDMETHOD.

  METHOD z2ui5_if_client~get_app.

    IF id IS NOT INITIAL.
      DATA(lo_app) = z2ui5_cl_core_app=>db_load( id ).
      result = CAST #( lo_app->mo_app ).
    ELSE.
      result = CAST #( mo_action->mo_app->mo_app ).
    ENDIF.

  ENDMETHOD.

  METHOD z2ui5_if_client~message_box_display.

    IF z2ui5_cl_util=>rtti_check_clike( text ) = abap_false.
      DATA(lt_msg) = z2ui5_cl_util=>msg_get( text ).
      IF lines( lt_msg ) = 1.
        DATA(lv_text) = lt_msg[ 1 ]-text.

        DATA(lv_type) = z2ui5_cl_util=>ui5_get_msg_type( lt_msg[ 1 ]-type ).
        lv_type = to_lower( lv_type ).
        DATA(lv_title) = SWITCH #( lt_msg[ 1 ]-type
                                   WHEN 'E' THEN `Error`
                                   WHEN 'S' THEN `Success`
                                   WHEN `W` THEN `Warning`
                                   ELSE          `Information` ).

      ELSEIF lines( lt_msg ) > 1.
        lv_text = | { lines( lt_msg ) } Messages found: |.
        DATA(lv_details) = `<ul>`.
        LOOP AT lt_msg REFERENCE INTO DATA(lr_msg).
          lv_details = |{ lv_details }<li>{ lr_msg->text }</li>|.
        ENDLOOP.
        lv_details = |{ lv_details }</ul>|.
        IF title IS INITIAL.
          lv_title = SWITCH #( lt_msg[ 1 ]-type
                               WHEN 'E' THEN `Error`
                               WHEN 'S' THEN `Success`
                               WHEN `W` THEN `Warning`
                               ELSE          `Information` ).
        ENDIF.
        lv_type = z2ui5_cl_util=>ui5_get_msg_type( lt_msg[ 1 ]-type ).
      ELSE.
        RETURN.
      ENDIF.
    ELSE.
      lv_text = text.
      lv_type = type.
      lv_title = title.
      lv_details = details.

      IF lv_type = 'information'.
        lv_type = 'show'.
        IF lv_title IS INITIAL.
          lv_title = 'Information'.
        ENDIF.
      ENDIF.
    ENDIF.

    IF lv_type = ''.
      lv_type = 'show'.
    ENDIF.

    mo_action->ms_next-s_set-s_msg_box = VALUE #( text              = lv_text
                                                  type              = lv_type
                                                  title             = lv_title
                                                  styleclass        = styleclass
                                                  onclose           = onclose
                                                  actions           = actions
                                                  emphasizedaction  = emphasizedaction
                                                  initialfocus      = initialfocus
                                                  textdirection     = textdirection
                                                  icon              = icon
                                                  details           = lv_details
                                                  closeonnavigation = closeonnavigation
                                               ).

  ENDMETHOD.

  METHOD z2ui5_if_client~message_toast_display.

    mo_action->ms_next-s_set-s_msg_toast = VALUE #( text                     = text
                                                    duration                 = duration
                                                    width                    = width
                                                    my                       = my
                                                    at                       = at
                                                    of                       = of
                                                    offset                   = offset
                                                    collision                = collision
                                                    onclose                  = onclose
                                                    autoclose                = autoclose
                                                    animationtimingfunction  = animationtimingfunction
                                                    animationduration        = animationduration
                                                    closeonbrowsernavigation = closeonbrowsernavigation
                                                    class                    = class
                                                  ).

  ENDMETHOD.

  METHOD z2ui5_if_client~nav_app_call.

    IF app IS NOT BOUND.
      z2ui5_cl_util=>x_raise( `NAV_APP_LEAVE_TO_INITIAL_APP_ERROR` ).
    ENDIF.

    mo_action->ms_next-o_app_call = app.

    IF app->id_app IS INITIAL.
      app->id_app = z2ui5_cl_util=>uuid_get_c32( ).
    ENDIF.
    result = app->id_app.
  ENDMETHOD.

  METHOD z2ui5_if_client~nav_app_leave.

    IF app IS NOT SUPPLIED.
      app = z2ui5_if_client~get_app( z2ui5_if_client~get( )-s_draft-id_prev_app_stack ).
    ENDIF.

    IF app IS NOT BOUND.
      z2ui5_cl_util=>x_raise( `NAV_APP_LEAVE_TO_INITIAL_APP_ERROR` ).
    ENDIF.

    mo_action->ms_next-o_app_leave = app.

    IF app->id_app IS INITIAL.
      app->id_app = z2ui5_cl_util=>uuid_get_c32( ).
    ENDIF.
    result = app->id_app.

  ENDMETHOD.

  METHOD z2ui5_if_client~nest2_view_destroy.

    mo_action->ms_next-s_set-s_view_nest2-check_update_model = abap_true.

  ENDMETHOD.

  METHOD z2ui5_if_client~nest2_view_display.

    mo_action->ms_next-s_set-s_view_nest2-xml            = val.
    mo_action->ms_next-s_set-s_view_nest2-id             = id.
    mo_action->ms_next-s_set-s_view_nest2-method_destroy = method_destroy.
    mo_action->ms_next-s_set-s_view_nest2-method_insert  = method_insert.

  ENDMETHOD.

  METHOD z2ui5_if_client~nest2_view_model_update.

    mo_action->ms_next-s_set-s_view_nest2-check_update_model = abap_true.

  ENDMETHOD.

  METHOD z2ui5_if_client~nest_view_destroy.

    mo_action->ms_next-s_set-s_view_nest-check_update_model = abap_true.

  ENDMETHOD.

  METHOD z2ui5_if_client~nest_view_display.

    mo_action->ms_next-s_set-s_view_nest-xml            = val.
    mo_action->ms_next-s_set-s_view_nest-id             = id.
    mo_action->ms_next-s_set-s_view_nest-method_destroy = method_destroy.
    mo_action->ms_next-s_set-s_view_nest-method_insert  = method_insert.

  ENDMETHOD.

  METHOD z2ui5_if_client~nest_view_model_update.

    mo_action->ms_next-s_set-s_view_nest-check_update_model = abap_true.

  ENDMETHOD.

  METHOD z2ui5_if_client~popover_destroy.

    mo_action->ms_next-s_set-s_popover-check_destroy = abap_true.

  ENDMETHOD.

  METHOD z2ui5_if_client~popover_display.

    mo_action->ms_next-s_set-s_popover-check_destroy = abap_false.
    mo_action->ms_next-s_set-s_popover-xml           = xml.
    mo_action->ms_next-s_set-s_popover-open_by_id    = by_id.

  ENDMETHOD.

  METHOD z2ui5_if_client~popover_model_update.

    mo_action->ms_next-s_set-s_popover-check_update_model = abap_true.

  ENDMETHOD.

  METHOD z2ui5_if_client~popup_destroy.

    mo_action->ms_next-s_set-s_popup = VALUE #( check_destroy = abap_true ).

  ENDMETHOD.

  METHOD z2ui5_if_client~popup_display.

    mo_action->ms_next-s_set-s_popup-check_destroy = abap_false.
    mo_action->ms_next-s_set-s_popup-xml           = val.

  ENDMETHOD.

  METHOD z2ui5_if_client~popup_model_update.

    mo_action->ms_next-s_set-s_popup-check_update_model = abap_true.

  ENDMETHOD.

  METHOD z2ui5_if_client~view_destroy.

    mo_action->ms_next-s_set-s_view-check_destroy = abap_true.

  ENDMETHOD.

  METHOD z2ui5_if_client~view_display.

    mo_action->ms_next-s_set-s_view-xml = val.
    mo_action->ms_next-s_set-s_view-switchDefaultModelAnnoURI = switch_default_model_anno_uri.
    mo_action->ms_next-s_set-s_view-switch_default_model_path = switch_default_model_path.

  ENDMETHOD.

  METHOD z2ui5_if_client~view_model_update.

    mo_action->ms_next-s_set-s_view-check_update_model = abap_true.

  ENDMETHOD.

  METHOD z2ui5_if_client~_bind.

    DATA(lo_bind) = NEW z2ui5_cl_core_srv_bind( mo_action->mo_app ).
    result = lo_bind->main( val    = z2ui5_cl_util=>conv_get_as_data_ref( val )
                            type   = z2ui5_if_core_types=>cs_bind_type-one_way
                            config = VALUE #( path_only     = path
                                              custom_filter = custom_filter
                                              custom_mapper = custom_mapper
                                              tab           = z2ui5_cl_util=>conv_get_as_data_ref( tab )
                                              tab_index     = tab_index
                                              switch_default_model = switch_Default_Model ) ).
  ENDMETHOD.

  METHOD z2ui5_if_client~_bind_edit.

    DATA(lo_bind) = NEW z2ui5_cl_core_srv_bind( mo_action->mo_app ).
    result = lo_bind->main( val    = z2ui5_cl_util=>conv_get_as_data_ref( val )
                            type   = z2ui5_if_core_types=>cs_bind_type-two_way
                            config = VALUE #( path_only          = path
                                              custom_filter      = custom_filter
                                              custom_filter_back = custom_filter_back
                                              custom_mapper      = custom_mapper
                                              custom_mapper_back = custom_mapper_back
                                              tab                = z2ui5_cl_util=>conv_get_as_data_ref( tab )
                                              tab_index          = tab_index
                                              switch_default_model = switch_Default_Model ) ).

  ENDMETHOD.

  METHOD z2ui5_if_client~_bind_local.

    DATA(lo_bind) = NEW z2ui5_cl_core_srv_bind( mo_action->mo_app ).
    result = lo_bind->main_local( val    = val
                                  config = VALUE #( path_only     = path
                                                    custom_mapper = custom_mapper
                                                    custom_filter = custom_filter
                                                    switch_default_model = switch_Default_Model ) ).

  ENDMETHOD.

  METHOD z2ui5_if_client~_event.

    DATA(lo_ui5) = NEW z2ui5_cl_core_srv_event( ).
    result = lo_ui5->get_event( val   = val
                                t_arg = t_arg
                                s_cnt = s_ctrl ).

    IF r_data IS NOT INITIAL.
      CREATE DATA mo_action->ms_next-r_data LIKE r_data.
      mo_action->ms_next-r_data = z2ui5_cl_util=>conv_copy_ref_data( r_data ).
    ENDIF.

  ENDMETHOD.

  METHOD z2ui5_if_client~_event_client.

    DATA(lo_ui5) = NEW z2ui5_cl_core_srv_event( ).
    result = lo_ui5->get_event_client( val   = val
                                       t_arg = t_arg ).

  ENDMETHOD.

  METHOD z2ui5_if_client~set_nav_back.

    mo_action->ms_next-s_set-set_nav_back = val.

  ENDMETHOD.

  METHOD z2ui5_if_client~set_push_state.

    mo_action->ms_next-s_set-set_push_state = val.

  ENDMETHOD.
  METHOD z2ui5_if_client~set_app_state_active.

    mo_action->ms_next-s_set-set_app_state_active = val.

  ENDMETHOD.

  METHOD z2ui5_if_client~set_session_stateful.

    DATA(lv_check_sticky) = CAST z2ui5_if_app( mo_action->mo_app->mo_app )->check_sticky.
    IF lv_check_sticky = abap_true AND val = abap_true.
      RAISE EXCEPTION TYPE z2ui5_cx_util_error
        EXPORTING
          val = `STATEFUL_ALREADY_ACTIVATED_ERROR`.
    ENDIF.
    IF val = abap_true.
      mo_action->ms_next-s_set-s_stateful-active = 1.
      CAST z2ui5_if_app( mo_action->mo_app->mo_app )->check_sticky = abap_true.
    ELSE.
      mo_action->ms_next-s_set-s_stateful-active = 0.
      CAST z2ui5_if_app( mo_action->mo_app->mo_app )->check_sticky = abap_false.
    ENDIF.
    mo_action->ms_next-s_set-s_stateful-switched = abap_true.

  ENDMETHOD.

  METHOD z2ui5_if_client~check_app_prev_stack.

    DATA(ls_get) = z2ui5_if_client~get( ).
    result = xsdbool( ls_get-s_draft-id_prev_app_stack IS NOT INITIAL ).

  ENDMETHOD.

  METHOD z2ui5_if_client~check_on_init.

    result = xsdbool( CAST z2ui5_if_app(  mo_action->mo_app->mo_app )->check_initialized = abap_false ).

  ENDMETHOD.

  METHOD z2ui5_if_client~check_on_navigated.

    DATA(ls_get) = z2ui5_if_client~get( ).
    result = ls_get-check_on_navigated.

  ENDMETHOD.

  METHOD z2ui5_if_client~get_app_prev.

    DATA(ls_get) = z2ui5_if_client~get( ).
    result = z2ui5_if_client~get_app( ls_get-s_draft-id_prev_app ).

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_core_app IMPLEMENTATION.

  METHOD all_xml_parse.

    z2ui5_cl_util=>xml_parse( EXPORTING xml = xml
                              IMPORTING any = result ).

  ENDMETHOD.

  METHOD all_xml_stringify.

    TRY.

        DATA(lo_model) = NEW z2ui5_cl_core_srv_attri( attri = mt_attri
                                                      app   = mo_app ).
        lo_model->attri_before_save( ).
        result = z2ui5_cl_util=>xml_stringify( me ).

      CATCH cx_root INTO DATA(x2).
        TRY.

            lo_model->attri_refs_update( ).

            CLEAR mt_attri->*.

            DATA(lo_dissolver) = NEW z2ui5_cl_core_srv_diss( attri = mt_attri
                                                             app   = mo_app ).

            lo_dissolver->main( ).
            lo_dissolver->main( ).
            lo_model = NEW z2ui5_cl_core_srv_attri( attri = mt_attri
                                                    app   = mo_app ).
            lo_model->attri_before_save( ).

            result = z2ui5_cl_util=>xml_stringify( me ).

          CATCH cx_root INTO DATA(cx).

            RAISE EXCEPTION TYPE z2ui5_cx_util_error
              EXPORTING
                val = |<p>{ cx->get_text( ) }<p>{ x2->get_text( ) } or <p> Please check if all generic data references are public attributes of your class|.

        ENDTRY.
    ENDTRY.

  ENDMETHOD.

  METHOD constructor.

    CREATE DATA mt_attri.

  ENDMETHOD.

  METHOD db_load.

    DATA(lo_db) = NEW z2ui5_cl_core_srv_draft( ).
    DATA(ls_db) = lo_db->read_draft( id ).
    result = all_xml_parse( ls_db-data ).

    DATA(lo_model) = NEW z2ui5_cl_core_srv_attri( attri = result->mt_attri
                                                  app   = result->mo_app ).

    lo_model->attri_after_load( ).

  ENDMETHOD.

  METHOD db_load_by_app.

    DATA(lo_db) = NEW z2ui5_cl_core_srv_draft( ).
    DATA(ls_db) = lo_db->read_draft( app->id_draft ).
    result = all_xml_parse( ls_db-data ).

    result->mo_app = app.

    DATA(lo_model) = NEW z2ui5_cl_core_srv_attri( attri = result->mt_attri
                                                  app   = result->mo_app ).

    lo_model->attri_refs_update( ).

  ENDMETHOD.

  METHOD db_save.

    IF mo_app IS BOUND.
      CAST z2ui5_if_app( mo_app )->id_draft = ms_draft-id.
      CAST z2ui5_if_app( mo_app )->check_initialized = abap_true.
    ENDIF.

    DATA(lo_db) = NEW z2ui5_cl_core_srv_draft( ).
    lo_db->create( draft     = ms_draft
                   model_xml = all_xml_stringify( ) ).

  ENDMETHOD.

  METHOD model_json_parse.

    DATA(lo_json_mapper) = NEW z2ui5_cl_core_srv_json( ).
    lo_json_mapper->model_front_to_back( view    = iv_view
                                         t_attri = mt_attri
                                         model   = io_model ).

  ENDMETHOD.

  METHOD model_json_stringify.

    DATA(lo_json_mapper) = NEW z2ui5_cl_core_srv_json( ).
    result = lo_json_mapper->model_back_to_front( mt_attri ).

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_core_action IMPLEMENTATION.

  METHOD constructor.

    mo_http_post = val.
    mo_app = NEW #( ).

  ENDMETHOD.

  METHOD factory_by_frontend.

    result = NEW #( mo_http_post ).

    IF mo_http_post->mo_action->mo_app->mo_app IS BOUND.
      result->mo_app = mo_http_post->mo_action->mo_app.
    ELSE.
      result->mo_app = z2ui5_cl_core_app=>db_load( mo_http_post->ms_request-s_front-id ).
    ENDIF.

    result->mo_app->ms_draft-id      = z2ui5_cl_util=>uuid_get_c32( ).
    result->mo_app->ms_draft-id_prev = mo_http_post->ms_request-s_front-id.
    result->ms_actual-view           = mo_http_post->ms_request-s_front-view.

    result->mo_app->model_json_parse( iv_view  = mo_http_post->ms_request-s_front-view
                                      io_model = mo_http_post->ms_request-o_model ).

    result->ms_actual-event              = mo_http_post->ms_request-s_front-event.
    result->ms_actual-t_event_arg        = mo_http_post->ms_request-s_front-t_event_arg.
    result->ms_actual-check_on_navigated = abap_false.

  ENDMETHOD.

  METHOD factory_first_start.

    TRY.
        result = NEW #( mo_http_post ).

        IF mo_http_post->ms_request-s_control-app_start_draft IS NOT INITIAL.
          TRY.

              DATA(lo_app) = z2ui5_cl_core_app=>db_load( mo_http_post->ms_request-s_control-app_start_draft ).
              result->mo_app = lo_app.
              result->ms_actual-check_on_navigated = abap_true.
              result->ms_next-s_set-set_app_state_active = abap_true.
              result->mo_app->ms_draft-id_prev_app_stack = ''.
              result->mo_app->ms_draft-id = z2ui5_cl_util=>uuid_get_c32( ).
              RETURN.
            CATCH cx_root.
          ENDTRY.
        ENDIF.

        result->mo_app->ms_draft-id = z2ui5_cl_util=>uuid_get_c32( ).

        CREATE OBJECT result->mo_app->mo_app TYPE (mo_http_post->ms_request-s_control-app_start).

        DATA(li_app) = CAST z2ui5_if_app( result->mo_app->mo_app ).
        li_app->id_draft = result->mo_app->ms_draft-id.

        result->ms_actual-check_on_navigated = abap_true.

      CATCH cx_root INTO DATA(x).
        RAISE EXCEPTION TYPE z2ui5_cx_util_error
          EXPORTING
            val      = |App with name { mo_http_post->ms_request-s_control-app_start } not found...|
            previous = x.
    ENDTRY.

  ENDMETHOD.

  METHOD factory_stack_call.

    result = prepare_app_stack( ms_next-o_app_call ).
    result->mo_app->ms_draft-id_prev_app_stack = mo_app->ms_draft-id.

  ENDMETHOD.

  METHOD factory_stack_leave.

    result = prepare_app_stack( ms_next-o_app_leave ).

    " check for new app?
    TRY.
        DATA(lo_draft) = NEW z2ui5_cl_core_srv_draft( ).
        DATA(ls_draft) = lo_draft->read_info( ms_next-o_app_leave->id_draft ).
      CATCH cx_root.
        result->mo_app->ms_draft-id_prev_app_stack = mo_app->ms_draft-id_prev_app_stack.
        RETURN.
    ENDTRY.

    " check for already existing app?
    IF mo_app->ms_draft-id_prev_app_stack IS NOT INITIAL.
      ls_draft = lo_draft->read_info( mo_app->ms_draft-id_prev_app_stack ).
      result->mo_app->ms_draft-id_prev_app_stack = ls_draft-id_prev_app_stack.
    ENDIF.

  ENDMETHOD.

  METHOD factory_system_startup.

    result = NEW #( mo_http_post ).

    result->mo_app->ms_draft-id          = z2ui5_cl_util=>uuid_get_c32( ).
    result->ms_actual-check_on_navigated = abap_true.
    result->mo_app->mo_app               = z2ui5_cl_app_startup=>factory( ).

    DATA(li_app) = CAST z2ui5_if_app( result->mo_app->mo_app ).
    li_app->id_draft = result->mo_app->ms_draft-id.

  ENDMETHOD.

  METHOD prepare_app_stack.

    mo_app->db_save( ).

    val->id_draft = COND string( WHEN val->id_draft IS INITIAL
                                 THEN z2ui5_cl_util=>uuid_get_c32( )
                                 ELSE ms_next-o_app_leave->id_draft ).

    result = NEW #( mo_http_post ).
    TRY.
        result->mo_app = z2ui5_cl_core_app=>db_load_by_app( val ).
      CATCH cx_root.
        result->mo_app->mo_app = val.
    ENDTRY.
    result->mo_app->ms_draft-id          = val->id_draft.

    result->mo_app->ms_draft-id_prev     = mo_app->ms_draft-id.
    result->mo_app->ms_draft-id_prev_app = mo_app->ms_draft-id.
    result->ms_actual-check_on_navigated = abap_true.
    result->ms_next-s_set                = ms_next-s_set.

    result->ms_next-s_set-s_view-check_update_model = abap_false.
    result->ms_next-s_set-s_view_nest-check_update_model = abap_false.
    result->ms_next-s_set-s_view_nest2-check_update_model = abap_false.
    result->ms_next-s_set-s_popup-check_update_model = abap_false.
    result->ms_next-s_set-s_popover-check_update_model = abap_false.

    IF ms_next-s_set-s_follow_up_action IS NOT INITIAL.
      DATA(lv_action) = ms_next-s_set-s_follow_up_action-custom_js[ 1 ].
      SPLIT lv_action AT `.eB(['` INTO DATA(lv_dummy)
            result->ms_actual-event.
      SPLIT result->ms_actual-event AT `']` INTO result->ms_actual-event lv_dummy.
    ENDIF.
    result->ms_actual-r_data = ms_next-r_data.

    CLEAR result->ms_next-s_set-s_msg_box.
    CLEAR result->ms_next-s_set-s_msg_toast.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_core_srv_draft IMPLEMENTATION.
  METHOD cleanup.

    DATA(lv_four_hours_ago) = z2ui5_cl_util=>time_substract_seconds( time    = z2ui5_cl_util=>time_get_timestampl( )
                                                                     seconds = 60 * 60 * 4 ).

    DELETE FROM z2ui5_t_99 WHERE timestampl < @lv_four_hours_ago.
    COMMIT WORK.

  ENDMETHOD.

  METHOD create.

    ASSERT draft-id IS NOT INITIAL.

    DATA(ls_db) = VALUE z2ui5_if_core_types=>ty_s_db( id                = draft-id
                                                      id_prev           = draft-id_prev
                                                      id_prev_app       = draft-id_prev_app
                                                      id_prev_app_stack = draft-id_prev_app_stack
                                                      timestampl        = z2ui5_cl_util=>time_get_timestampl( )
                                                      data              = model_xml ).

    MODIFY z2ui5_t_99 FROM @ls_db.
    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE z2ui5_cx_util_error
        EXPORTING
          val = `CREATE_OF_DRAFT_ENTRY_ON_DATABASE_FAILED`.
    ENDIF.
    COMMIT WORK AND WAIT.

  ENDMETHOD.

  METHOD read.

    IF check_load_app = abap_true.

      SELECT SINGLE * FROM z2ui5_t_99
        WHERE id = @id
        INTO @result ##SUBRC_OK.

    ELSE.

      SELECT SINGLE id, id_prev, id_prev_app, id_prev_app_stack
        FROM z2ui5_t_99
        WHERE id = @id
        INTO CORRESPONDING FIELDS OF @result ##SUBRC_OK.

    ENDIF.

    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE z2ui5_cx_util_error
        EXPORTING
          val = `NO_DRAFT_ENTRY_OF_PREVIOUS_REQUEST_FOUND`.
    ENDIF.

  ENDMETHOD.

  METHOD read_draft.

    result = read( id ).

  ENDMETHOD.

  METHOD read_info.

    DATA(ls_db) = read( id             = id
                        check_load_app = abap_false ).

    result = CORRESPONDING #( ls_db ).

  ENDMETHOD.

  METHOD count_entries.

    SELECT COUNT( * )
      FROM z2ui5_t_99
      INTO @result.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cx_util_error IMPLEMENTATION.
  METHOD constructor ##ADT_SUPPRESS_GENERATION.

    super->constructor( previous = previous ).
    CLEAR textid.

    TRY.
        ms_error-x_root ?= val.
      CATCH cx_root.
        ms_error-text = val.
    ENDTRY.
    ms_error-uuid = z2ui5_cl_util=>uuid_get_c32( ).

  ENDMETHOD.

  METHOD if_message~get_text.

    IF ms_error-x_root IS NOT INITIAL.
      result = ms_error-x_root->get_text( ).
      DATA(error) = abap_true.
    ELSEIF ms_error-text IS NOT INITIAL.
      result = ms_error-text.
      error = abap_true.
    ENDIF.

    result = COND #( WHEN error = abap_true AND result IS INITIAL THEN `unknown error` ELSE result ).

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_util_abap_http IMPLEMENTATION.
  METHOD delete_response_cookie.

    DATA(lv_val) = CONV string( val ).

    IF mo_server_onprem IS BOUND.

      DATA object TYPE REF TO object.
      FIELD-SYMBOLS <any> TYPE any.

      ASSIGN mo_server_onprem->('RESPONSE') TO <any>.
      object = <any>.

      CALL METHOD object->('DELETE_COOKIE')
        EXPORTING
          name = lv_val.

    ELSE.

*      CALL METHOD mo_response_cloud->('DELETE_COOKIE_AT_CLIENT')
*        EXPORTING
*          name = lv_val.

    ENDIF.

  ENDMETHOD.

  METHOD get_response_cookie.

    DATA object TYPE REF TO object.
    FIELD-SYMBOLS <any> TYPE any.

    DATA(lv_val) = CONV string( val ).

    IF mo_server_onprem IS BOUND.

      ASSIGN mo_server_onprem->('RESPONSE') TO <any>.
      object = <any>.

      CALL METHOD object->('GET_COOKIE')
        EXPORTING
          name  = lv_val
        IMPORTING
          value = result.

    ELSE.

*      CALL METHOD mo_request_cloud->('GET_COOKIE')
*        EXPORTING
*          i_name  = lv_val
*        RECEIVING
*          r_value = result.

    ENDIF.

  ENDMETHOD.

  METHOD get_header_field.

    DATA object TYPE REF TO object.
    FIELD-SYMBOLS <any> TYPE any.

    DATA(lv_val) = CONV string( val ).

    IF mo_server_onprem IS BOUND.

      ASSIGN mo_server_onprem->('REQUEST') TO <any>.
      object = <any>.

      CALL METHOD object->('GET_HEADER_FIELD')
        EXPORTING
          name  = lv_val
        RECEIVING
          value = result.

    ELSE.

      CALL METHOD mo_request_cloud->('IF_WEB_HTTP_REQUEST~GET_HEADER_FIELD')
        EXPORTING
          i_name  = lv_val
        RECEIVING
          r_value = result.

    ENDIF.

  ENDMETHOD.

  METHOD set_header_field.

    DATA object TYPE REF TO object.
    FIELD-SYMBOLS <any> TYPE any.

    DATA(lv_n) = CONV string( n ).
    DATA(lv_v) = CONV string( v ).
    IF mo_server_onprem IS BOUND.

      ASSIGN mo_server_onprem->('RESPONSE') TO <any>.
      object = <any>.

      CALL METHOD object->('SET_HEADER_FIELD')
        EXPORTING
          name  = lv_n
          value = lv_v.

    ELSE.

      CALL METHOD mo_response_cloud->('IF_WEB_HTTP_RESPONSE~SET_HEADER_FIELD')
        EXPORTING
          i_name  = lv_n
          i_value = lv_v.

    ENDIF.

  ENDMETHOD.

  METHOD factory.

    result = NEW #( ).
    result->mo_server_onprem = server.

  ENDMETHOD.

  METHOD factory_cloud.

    result = NEW #( ).
    result->mo_request_cloud  = req.
    result->mo_response_cloud = res.

  ENDMETHOD.

  METHOD get_cdata.

    DATA object TYPE REF TO object.
    FIELD-SYMBOLS <any> TYPE any.

    IF mo_server_onprem IS BOUND.

      ASSIGN mo_server_onprem->('REQUEST') TO <any>.
      object = <any>.

      CALL METHOD object->('GET_CDATA')
        RECEIVING
          data = result.

    ELSE.

      CALL METHOD mo_request_cloud->('IF_WEB_HTTP_REQUEST~GET_TEXT')
        RECEIVING
          r_value = result.

    ENDIF.

  ENDMETHOD.

  METHOD get_method.

    DATA object TYPE REF TO object.
    FIELD-SYMBOLS <any> TYPE any.

    IF mo_server_onprem IS BOUND.

      ASSIGN mo_server_onprem->('REQUEST') TO <any>.
      object = <any>.

      CALL METHOD object->('IF_HTTP_REQUEST~GET_METHOD')
        RECEIVING
          method = result.

    ELSE.

      CALL METHOD mo_request_cloud->('IF_WEB_HTTP_REQUEST~GET_METHOD')
        RECEIVING
          r_value = result.

    ENDIF.

  ENDMETHOD.

  METHOD set_cdata.

    DATA object TYPE REF TO object.
    FIELD-SYMBOLS <any> TYPE any.

    IF mo_server_onprem IS BOUND.

      ASSIGN mo_server_onprem->('RESPONSE') TO <any>.
      object = <any>.

      CALL METHOD object->('SET_CDATA')
        EXPORTING
          data = val.

    ELSE.

      CALL METHOD mo_response_cloud->('IF_WEB_HTTP_RESPONSE~SET_TEXT')
        EXPORTING
          i_text = val.

    ENDIF.

  ENDMETHOD.

  METHOD set_status.

    DATA object TYPE REF TO object.
    FIELD-SYMBOLS <any> TYPE any.

    DATA(lv_reason) = CONV string( reason ).

    IF mo_server_onprem IS BOUND.

      ASSIGN mo_server_onprem->('RESPONSE') TO <any>.
      object = <any>.

      CALL METHOD object->('IF_HTTP_RESPONSE~SET_STATUS')
        EXPORTING
          code   = code
          reason = lv_reason.

    ELSE.

      CALL METHOD mo_response_cloud->('IF_WEB_HTTP_RESPONSE~SET_STATUS')
        EXPORTING
          i_code   = code
          i_reason = lv_reason.

    ENDIF.

  ENDMETHOD.

  METHOD set_session_stateful.

    IF mo_server_onprem IS BOUND.

      CALL METHOD mo_server_onprem->('SET_SESSION_STATEFUL')
        EXPORTING
          stateful = val.

    ELSE.

      ASSERT 1 = 'NO_STATEFUL_FEATURE_IN_CLOUD_ERROR'.

    ENDIF.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_util_abap IMPLEMENTATION.
  METHOD context_check_abap_cloud.

    TRY.
        cl_abap_typedescr=>describe_by_name( 'T100' ).
        result = abap_false.
      CATCH cx_root.
        result = abap_true.
    ENDTRY.

  ENDMETHOD.

  METHOD rtti_get_t_fixvalues.

    TYPES:
      BEGIN OF fixvalue,
        low        TYPE c LENGTH 10,
        high       TYPE c LENGTH 10,
        option     TYPE c LENGTH 2,
        ddlanguage TYPE c LENGTH 1,
        ddtext     TYPE c LENGTH 60,
      END OF fixvalue.
    TYPES fixvalues TYPE STANDARD TABLE OF fixvalue WITH DEFAULT KEY.
    DATA lt_values TYPE fixvalues.

    DATA lv_langu TYPE c LENGTH 1.
    DATA temp1 LIKE LINE OF lt_values.
    DATA lr_fix LIKE REF TO temp1.
    DATA temp2 TYPE z2ui5_cl_util_abap=>ty_s_fix_val.
    lv_langu = ' '.
    lv_langu = langu.

    CALL METHOD elemdescr->('GET_DDIC_FIXED_VALUES')
      EXPORTING
        p_langu        = lv_langu
      RECEIVING
        p_fixed_values = lt_values
      EXCEPTIONS
        not_found      = 1
        no_ddic_type   = 2
        OTHERS         = 3.

    LOOP AT lt_values REFERENCE INTO lr_fix.
      CLEAR temp2.
      temp2-low = lr_fix->low.
      temp2-high = lr_fix->high.
      temp2-descr = lr_fix->ddtext.
      INSERT temp2
             INTO TABLE result.

    ENDLOOP.

  ENDMETHOD.

  METHOD conv_decode_x_base64.
    DATA lv_web_http_name TYPE c LENGTH 19.
    DATA classname TYPE c LENGTH 15.

    TRY.
        lv_web_http_name = 'CL_WEB_HTTP_UTILITY'.
        CALL METHOD (lv_web_http_name)=>('DECODE_X_BASE64')
          EXPORTING
            encoded = val
          RECEIVING
            decoded = result.

      CATCH cx_root.
        classname = 'CL_HTTP_UTILITY'.
        CALL METHOD (classname)=>('DECODE_X_BASE64')
          EXPORTING
            encoded = val
          RECEIVING
            decoded = result.

    ENDTRY.

  ENDMETHOD.

  METHOD conv_encode_x_base64.
    DATA lv_web_http_name TYPE c LENGTH 19.
    DATA classname TYPE c LENGTH 15.

    TRY.
        lv_web_http_name = 'CL_WEB_HTTP_UTILITY'.
        CALL METHOD (lv_web_http_name)=>('ENCODE_X_BASE64')
          EXPORTING
            unencoded = val
          RECEIVING
            encoded   = result.

      CATCH cx_root.
        classname = 'CL_HTTP_UTILITY'.
        CALL METHOD (classname)=>('ENCODE_X_BASE64')
          EXPORTING
            unencoded = val
          RECEIVING
            encoded   = result.

    ENDTRY.

  ENDMETHOD.

  METHOD conv_get_string_by_xstring.

    DATA conv TYPE REF TO object.
    DATA conv_codepage TYPE c LENGTH 21.
    DATA conv_in_class TYPE c LENGTH 18.

    TRY.

        conv_codepage = 'CL_ABAP_CONV_CODEPAGE'.
        CALL METHOD (conv_codepage)=>create_in
          RECEIVING
            instance = conv.

        CALL METHOD conv->('IF_ABAP_CONV_IN~CONVERT')
          EXPORTING
            source = val
          RECEIVING
            result = result.

      CATCH cx_root.
        conv_in_class = 'CL_ABAP_CONV_IN_CE'.
        CALL METHOD (conv_in_class)=>create
          EXPORTING
            encoding = 'UTF-8'
          RECEIVING
            conv     = conv.

        CALL METHOD conv->('CONVERT')
          EXPORTING
            input = val
          IMPORTING
            data  = result.
    ENDTRY.

  ENDMETHOD.

  METHOD conv_get_xstring_by_string.

    DATA conv TYPE REF TO object.
    DATA conv_codepage TYPE c LENGTH 21.
    DATA conv_out_class TYPE c LENGTH 19.

    TRY.

        conv_codepage = 'CL_ABAP_CONV_CODEPAGE'.
        CALL METHOD (conv_codepage)=>create_out
          RECEIVING
            instance = conv.

        CALL METHOD conv->('IF_ABAP_CONV_OUT~CONVERT')
          EXPORTING
            source = val
          RECEIVING
            result = result.

      CATCH cx_root.
        conv_out_class = 'CL_ABAP_CONV_OUT_CE'.
        CALL METHOD (conv_out_class)=>create
          EXPORTING
            encoding = 'UTF-8'
          RECEIVING
            conv     = conv.

        CALL METHOD conv->('CONVERT')
          EXPORTING
            data   = val
          IMPORTING
            buffer = result.
    ENDTRY.

  ENDMETHOD.

  METHOD source_get_method.

    DATA object TYPE REF TO object.
    FIELD-SYMBOLS <any> TYPE any.
    DATA lt_source TYPE string_table.
    DATA lt_string TYPE string_table.
    DATA lv_class TYPE string.
    DATA lv_method TYPE string.
    DATA xco_cp_abap TYPE c LENGTH 11.
    DATA lv_name TYPE c LENGTH 13.
    DATA lv_check_method LIKE abap_false.
    DATA lv_source LIKE LINE OF lt_source.
    DATA lv_source_upper TYPE string.

    TRY.
        lv_class  = to_upper( iv_classname ).

        lv_method = to_upper( iv_methodname ).
        xco_cp_abap = 'XCO_CP_ABAP'.
        CALL METHOD (xco_cp_abap)=>('CLASS')
          EXPORTING
            iv_name  = lv_class
          RECEIVING
            ro_class = object.

        ASSIGN ('OBJECT->IF_XCO_AO_CLASS~IMPLEMENTATION') TO <any>.
        ASSERT sy-subrc = 0.
        object = <any>.

        CALL METHOD object->('IF_XCO_CLAS_IMPLEMENTATION~METHOD')
          EXPORTING
            iv_name   = lv_method
          RECEIVING
            ro_method = object.

        CALL METHOD object->('IF_XCO_CLAS_I_METHOD~CONTENT')
          RECEIVING
            ro_content = object.

        CALL METHOD object->('IF_XCO_CLAS_I_METHOD_CONTENT~GET_SOURCE')
          RECEIVING
            rt_source = result.

      CATCH cx_root.
        lv_name = 'CL_OO_FACTORY'.
        CALL METHOD (lv_name)=>('CREATE_INSTANCE')
          RECEIVING
            result = object.

        CALL METHOD object->('IF_OO_CLIF_SOURCE_FACTORY~CREATE_CLIF_SOURCE')
          EXPORTING
            clif_name = lv_class
          RECEIVING
            result    = object.

        CALL METHOD object->('IF_OO_CLIF_SOURCE~GET_SOURCE')
          IMPORTING
            source = lt_source.
        lv_check_method = abap_false.

        LOOP AT lt_source INTO lv_source.

          lv_source_upper = to_upper( lv_source ).

          IF lv_source_upper CS `ENDMETHOD`.
            lv_check_method = abap_false.
          ENDIF.

          IF lv_source_upper CS |METHOD { lv_method }|.
            lv_check_method = abap_true.
            CONTINUE.
          ENDIF.

          IF lv_check_method = abap_true.
            INSERT lv_source INTO TABLE lt_string.
          ENDIF.

        ENDLOOP.

    ENDTRY.

    result = lt_string.

  ENDMETHOD.

  METHOD rtti_get_classes_impl_intf.

    DATA obj TYPE REF TO object.
    FIELD-SYMBOLS <any> TYPE any.
    DATA lt_implementation_names TYPE string_table.
    TYPES BEGIN OF ty_s_impl.
    TYPES   clsname    TYPE c LENGTH 30.
    TYPES   refclsname TYPE c LENGTH 30.
    TYPES END OF ty_s_impl.
    DATA lt_impl TYPE STANDARD TABLE OF ty_s_impl WITH DEFAULT KEY.
    TYPES BEGIN OF ty_s_key.
    TYPES   intkey TYPE c LENGTH 30.
    TYPES END OF ty_s_key.
    DATA ls_key TYPE ty_s_key.
    DATA BEGIN OF ls_clskey.
    DATA   clsname TYPE c LENGTH 30.
    DATA END OF ls_clskey.
    DATA class TYPE REF TO data.
    DATA xco_cp_abap TYPE c LENGTH 11.
    DATA temp3 TYPE z2ui5_cl_util_abap=>ty_t_classes.
    DATA implementation_name LIKE LINE OF lt_implementation_names.
    DATA temp4 LIKE LINE OF temp3.
    DATA lv_fm TYPE string.
    DATA type TYPE c LENGTH 12.
    FIELD-SYMBOLS <class> TYPE data.
    DATA temp5 LIKE LINE OF lt_impl.
    DATA lr_impl LIKE REF TO temp5.
    FIELD-SYMBOLS <description> TYPE any.
    DATA temp6 TYPE z2ui5_cl_util_abap=>ty_s_class_descr.

    TRY.

        ls_clskey-clsname = val.
        xco_cp_abap = 'XCO_CP_ABAP'.
        CALL METHOD (xco_cp_abap)=>interface
          EXPORTING
            iv_name      = ls_clskey-clsname
          RECEIVING
            ro_interface = obj.

        ASSIGN obj->('IF_XCO_AO_INTERFACE~IMPLEMENTATIONS') TO <any>.
        IF sy-subrc <> 0.
          RAISE EXCEPTION TYPE cx_sy_dyn_call_illegal_class.
        ENDIF.
        obj = <any>.

        ASSIGN obj->('IF_XCO_INTF_IMPLEMENTATIONS_FC~ALL') TO <any>.
        IF sy-subrc <> 0.
          RAISE EXCEPTION TYPE cx_sy_dyn_call_illegal_class.
        ENDIF.
        obj = <any>.

        CALL METHOD obj->('IF_XCO_INTF_IMPLEMENTATIONS~GET_NAMES')
          RECEIVING
            rt_names = lt_implementation_names.
        CLEAR temp3.

        LOOP AT lt_implementation_names INTO implementation_name.

          temp4-classname = implementation_name.
          temp4-description = rtti_get_class_descr_on_cloud( implementation_name ).
          INSERT temp4 INTO TABLE temp3.
        ENDLOOP.
        result = temp3.

      CATCH cx_root.

        ls_key-intkey = val.
        lv_fm = `SEO_INTERFACE_IMPLEM_GET_ALL`.
        CALL FUNCTION lv_fm
          EXPORTING
            intkey       = ls_key
          IMPORTING
            impkeys      = lt_impl
          EXCEPTIONS
            not_existing = 1
            OTHERS       = 2.
        IF sy-subrc <> 0.
          RETURN.
        ENDIF.
        type = 'SEOC_CLASS_R'.
        CREATE DATA class TYPE (type).

        ASSIGN class->* TO <class>.

        LOOP AT lt_impl REFERENCE INTO lr_impl.

          CLEAR <class>.

          ls_clskey-clsname = lr_impl->clsname.

          lv_fm = `SEO_CLASS_READ`.
          CALL FUNCTION lv_fm
            EXPORTING
              clskey = ls_clskey
            IMPORTING
              class  = <class>.
          ASSIGN
            COMPONENT 'DESCRIPT'
            OF STRUCTURE <class>
            TO <description>.
          ASSERT sy-subrc = 0.
          CLEAR temp6.
          temp6-classname = lr_impl->clsname.
          temp6-description = <description>.
          INSERT
            temp6
            INTO TABLE result.
        ENDLOOP.

    ENDTRY.

  ENDMETHOD.

  METHOD rtti_get_data_element_texts.

    DATA ddic_ref     TYPE REF TO data.
    DATA data_element TYPE REF TO object.
    DATA content      TYPE REF TO object.
    DATA: BEGIN OF ddic,
            reptext   TYPE string,
            scrtext_s TYPE string,
            scrtext_m TYPE string,
            scrtext_l TYPE string,
          END OF ddic.
    DATA exists TYPE abap_bool.

    DATA data_element_name LIKE i_data_element_name.
    DATA temp7 TYPE REF TO cl_abap_structdescr.
    DATA struct_desrc LIKE temp7.
    FIELD-SYMBOLS <ddic> TYPE data.
    DATA lo_typedescr TYPE REF TO cl_abap_typedescr.
    DATA temp8 TYPE REF TO cl_abap_datadescr.
    DATA data_descr LIKE temp8.
    DATA xco_cp_abap_dictionary TYPE c LENGTH 22.
    data_element_name = i_data_element_name.

    TRY.
        cl_abap_typedescr=>describe_by_name( 'T100' ).
        temp7 ?= cl_abap_structdescr=>describe_by_name( 'DFIES' ).

        struct_desrc = temp7.

        CREATE DATA ddic_ref TYPE HANDLE struct_desrc.

        ASSIGN ddic_ref->* TO <ddic>.
        ASSERT sy-subrc = 0.
        cl_abap_elemdescr=>describe_by_name( EXPORTING  p_name      = data_element_name
                                             RECEIVING  p_descr_ref = lo_typedescr
                                             EXCEPTIONS OTHERS      = 1 ).
        IF sy-subrc <> 0.
          RETURN.
        ENDIF.
        temp8 ?= lo_typedescr.

        data_descr = temp8.

        CALL METHOD data_descr->('GET_DDIC_FIELD')
          RECEIVING
            p_flddescr   = <ddic>
          EXCEPTIONS
            not_found    = 1
            no_ddic_type = 2
            OTHERS       = 3.
        IF sy-subrc <> 0.
          RETURN.
        ENDIF.

        MOVE-CORRESPONDING <ddic> TO ddic.
        result-header = ddic-reptext.
        result-short  = ddic-scrtext_s.
        result-medium = ddic-scrtext_m.
        result-long   = ddic-scrtext_l.

      CATCH cx_root.
        TRY.

            xco_cp_abap_dictionary = 'XCO_CP_ABAP_DICTIONARY'.
            CALL METHOD (xco_cp_abap_dictionary)=>('DATA_ELEMENT')
              EXPORTING
                iv_name         = data_element_name
              RECEIVING
                ro_data_element = data_element.

            CALL METHOD data_element->('IF_XCO_AD_DATA_ELEMENT~EXISTS')
              RECEIVING
                rv_exists = exists.

            IF exists = abap_false.
              RETURN.
            ENDIF.

            CALL METHOD data_element->('IF_XCO_AD_DATA_ELEMENT~CONTENT')
              RECEIVING
                ro_content = content.

            CALL METHOD content->('IF_XCO_DTEL_CONTENT~GET_HEADING_FIELD_LABEL')
              RECEIVING
                rs_heading_field_label = result-header.

            CALL METHOD content->('IF_XCO_DTEL_CONTENT~GET_SHORT_FIELD_LABEL')
              RECEIVING
                rs_short_field_label = result-short.

            CALL METHOD content->('IF_XCO_DTEL_CONTENT~GET_MEDIUM_FIELD_LABEL')
              RECEIVING
                rs_medium_field_label = result-medium.

            CALL METHOD content->('IF_XCO_DTEL_CONTENT~GET_LONG_FIELD_LABEL')
              RECEIVING
                rs_long_field_label = result-long.

          CATCH cx_root.
        ENDTRY.
    ENDTRY.

  ENDMETHOD.

  METHOD uuid_get_c22.

    DATA lv_uuid TYPE c LENGTH 22.
    DATA lv_classname TYPE string.
    DATA lv_fm TYPE string.

    TRY.

        TRY.

            lv_classname = `CL_SYSTEM_UUID`.
            CALL METHOD (lv_classname)=>if_system_uuid_static~create_uuid_c22
              RECEIVING
                uuid = lv_uuid.

          CATCH cx_sy_dyn_call_illegal_class.
            lv_fm = `GUID_CREATE`.
            CALL FUNCTION lv_fm
              IMPORTING
                ev_guid_22 = lv_uuid.

        ENDTRY.

        result = lv_uuid.

      CATCH cx_root.
        ASSERT 1 = 0.
    ENDTRY.

    result = replace( val  = result
                      sub  = `}`
                      with = `0`
                      occ  = 0 ).
    result = replace( val  = result
                      sub  = `{`
                      with = `0`
                      occ  = 0 ).
    result = replace( val  = result
                      sub  = `"`
                      with = `0`
                      occ  = 0 ).
    result = replace( val  = result
                      sub  = `'`
                      with = `0`
                      occ  = 0 ).

  ENDMETHOD.

  METHOD uuid_get_c32.
    DATA lv_uuid TYPE c LENGTH 32.
    DATA lv_classname TYPE string.
    DATA lv_fm TYPE string.

    TRY.

        TRY.

            lv_classname = `CL_SYSTEM_UUID`.
            CALL METHOD (lv_classname)=>if_system_uuid_static~create_uuid_c32
              RECEIVING
                uuid = lv_uuid.

          CATCH cx_root.
            lv_fm = `GUID_CREATE`.
            CALL FUNCTION lv_fm
              IMPORTING
                ev_guid_32 = lv_uuid.

        ENDTRY.

        result = lv_uuid.

      CATCH cx_root.
        ASSERT 1 = 0.
    ENDTRY.
  ENDMETHOD.

  METHOD rtti_get_class_descr_on_cloud.

    DATA obj          TYPE REF TO object.
    DATA content      TYPE REF TO object.
    DATA lv_classname TYPE c LENGTH 30.
    DATA xco_cp_abap TYPE c LENGTH 11.

    lv_classname = i_classname.
    xco_cp_abap = 'XCO_CP_ABAP'.
    CALL METHOD (xco_cp_abap)=>('CLASS')
      EXPORTING
        iv_name  = lv_classname
      RECEIVING
        ro_class = obj.

    CALL METHOD obj->('IF_XCO_AO_CLASS~CONTENT')
      RECEIVING
        ro_content = content.

    CALL METHOD content->('IF_XCO_CLAS_CONTENT~GET_SHORT_DESCRIPTION')
      RECEIVING
        rv_short_description = result.

  ENDMETHOD.

  METHOD rtti_get_t_attri_on_prem.

    DATA structdescr TYPE REF TO cl_abap_structdescr.
    DATA dfies       TYPE REF TO data.
    DATA s_dfies     TYPE ty_s_dfies.

    FIELD-SYMBOLS <dfies> TYPE STANDARD TABLE.
    FIELD-SYMBOLS <line>  TYPE any.

    DATA temp9 TYPE cl_abap_structdescr=>component_table.
    DATA comps LIKE temp9.
    DATA temp10 TYPE REF TO cl_abap_structdescr.
    DATA lo_struct LIKE temp10.
    DATA new_struct_desc TYPE REF TO cl_abap_structdescr.
    DATA new_table_desc TYPE REF TO cl_abap_tabledescr.
    DATA comp LIKE LINE OF comps.
    FIELD-SYMBOLS <value> TYPE any.
    FIELD-SYMBOLS <value_dest> TYPE any.
    CLEAR temp9.

    comps = temp9.

    temp10 ?= cl_abap_structdescr=>describe_by_name( 'DFIES' ).

    lo_struct = temp10.
    comps = lo_struct->get_components( ).

    TRY.
        new_struct_desc = cl_abap_structdescr=>create( comps ).

        new_table_desc = cl_abap_tabledescr=>create( p_line_type  = new_struct_desc
                                                           p_table_kind = cl_abap_tabledescr=>tablekind_std ).

        CREATE DATA dfies TYPE HANDLE new_table_desc.

        ASSIGN dfies->* TO <dfies>.
        IF <dfies> IS NOT ASSIGNED.
          RETURN.
        ENDIF.

        IF tabname IS INITIAL.

          RAISE EXCEPTION TYPE z2ui5_cx_util_error
            EXPORTING
              val = `RTTI_BY_NAME_TAB_INITIAL`.
        ENDIF.

        structdescr ?= cl_abap_structdescr=>describe_by_name( tabname ).
        <dfies> = structdescr->get_ddic_field_list( ).

        LOOP AT <dfies> ASSIGNING <line>.
          LOOP AT comps INTO comp.
            ASSIGN COMPONENT comp-name OF STRUCTURE <line> TO <value>.
            IF <value> IS NOT ASSIGNED.
              CONTINUE.
            ENDIF.
            ASSIGN COMPONENT comp-name OF STRUCTURE s_dfies TO <value_dest>.
            IF <value_dest> IS NOT ASSIGNED.
              CONTINUE.
            ENDIF.

            <value_dest> = <value>.

            UNASSIGN <value>.
            UNASSIGN <value_dest>.

          ENDLOOP.

          APPEND s_dfies TO result.
          CLEAR s_dfies.

        ENDLOOP.

      CATCH cx_root.
    ENDTRY.

  ENDMETHOD.

  METHOD rtti_get_t_attri_on_cloud.

*    DATA db        TYPE REF TO object.
*    DATA fields    TYPE REF TO object.
*    DATA r_names   TYPE REF TO data.
*    DATA t_param   TYPE abap_parmbind_tab.
*    DATA field     TYPE REF TO object.
*    DATA content   TYPE REF TO object.
*    DATA r_content TYPE REF TO data.
*    DATA type      TYPE REF TO object.
*    DATA element   TYPE REF TO object.
*    DATA tab       TYPE c LENGTH 16.
*
*    FIELD-SYMBOLS <any>   TYPE any.
*    FIELD-SYMBOLS <names> TYPE STANDARD TABLE.
*    FIELD-SYMBOLS <name>  TYPE any.
*    FIELD-SYMBOLS <fiel>  TYPE REF TO object.
*
*    tab = tabname.
*
*    CALL METHOD ('XCO_CP_ABAP_DICTIONARY')=>database_table
*      EXPORTING
*        iv_name           = tab
*      RECEIVING
*        ro_database_table = db.
*
*    ASSIGN db->('IF_XCO_DATABASE_TABLE~FIELDS->IF_XCO_DBT_FIELDS_FACTORY~ALL') TO <any>.
*
*    IF sy-subrc <> 0.
*      RETURN.
*    ENDIF.
*
*    fields = <any>.
*
*    CREATE DATA r_names TYPE ('SXCO_T_AD_FIELD_NAMES').
*    ASSIGN r_names->* TO <Names>.
*    IF <Names> IS NOT ASSIGNED.
*      RETURN.
*    ENDIF.
*
*    CALL METHOD fields->('IF_XCO_DBT_FIELDS~GET_NAMES')
*      RECEIVING
*        rt_names = <Names>.
*
*    LOOP AT <Names> ASSIGNING <name>.
*
*      CLEAR t_param.
*
*      INSERT VALUE #( name  = 'IV_NAME'
*                      kind  = cl_abap_objectdescr=>exporting
*                      value = REF #( <name> ) ) INTO TABLE t_param.
*      INSERT VALUE #( name  = 'RO_FIELD'
*                      kind  = cl_abap_objectdescr=>receiving
*                      value = REF #( field ) ) INTO TABLE t_param.
*
*      CALL METHOD db->(`IF_XCO_DATABASE_TABLE~FIELD`)
*        PARAMETER-TABLE t_param.
*
*      ASSIGN t_param[ name = 'RO_FIELD' ] TO FIELD-SYMBOL(<line>).
*      IF <line> IS NOT ASSIGNED.
*        CONTINUE.
*      ENDIF.
*      ASSIGN <line>-value->* TO <fiel>.
*      IF <fiel> IS NOT ASSIGNED.
*        CONTINUE.
*      ENDIF.
*
*      CALL METHOD <fiel>->('IF_XCO_DBT_FIELD~CONTENT')
*        RECEIVING
*          ro_content = content.
*
*      CREATE DATA r_content TYPE ('IF_XCO_DBT_FIELD_CONTENT=>TS_CONTENT').
*      ASSIGN r_content->* TO FIELD-SYMBOL(<Content>) CASTING TYPE ('IF_XCO_DBT_FIELD_CONTENT=>TS_CONTENT').
*      IF <content> IS NOT ASSIGNED.
*        CONTINUE.
*      ENDIF.
*
*      CALL METHOD content->('IF_XCO_DBT_FIELD_CONTENT~GET')
*        RECEIVING
*          rs_content = <Content>.
*
*      ASSIGN COMPONENT 'KEY_INDICATOR' OF STRUCTURE <content> TO FIELD-SYMBOL(<key>).
*      IF <key> IS NOT ASSIGNED.
*        CONTINUE.
*      ENDIF.
*      ASSIGN COMPONENT 'SHORT_DESCRIPTION' OF STRUCTURE <content> TO FIELD-SYMBOL(<text>).
*      IF <text> IS NOT ASSIGNED.
*        CONTINUE.
*      ENDIF.
*      ASSIGN COMPONENT 'TYPE' OF STRUCTURE <content> TO FIELD-SYMBOL(<type>).
*      IF <type> IS NOT ASSIGNED.
*        CONTINUE.
*      ENDIF.
*
*      type = <type>.
*
*      CALL METHOD type->('IF_XCO_DBT_FIELD_TYPE~GET_DATA_ELEMENT')
*        RECEIVING
*          ro_data_element = element.
*
*      IF <text> IS INITIAL.
*        <text> = <name>.
*      ENDIF.
*
*      ASSIGN element->('IF_XCO_AD_OBJECT~NAME') TO FIELD-SYMBOL(<rname>).
*      IF <rname> IS NOT ASSIGNED.
*        CONTINUE.
*      ENDIF.
*
*      IF sy-subrc = 0.
*        result = VALUE #( BASE result
*                          ( fieldname = <name> keyflag = <key> tabname = tab scrtext_s = <text> rollname = <rname> ) ).
*      ELSE.
*        result = VALUE #( BASE result
*                          ( fieldname = <name> keyflag = <key> tabname = tab scrtext_s = <text> rollname = <name> ) ).
*      ENDIF.
*
*      UNASSIGN <Content>.
*      UNASSIGN <key>.
*      UNASSIGN <Text>.
*      UNASSIGN <type>.
*      UNASSIGN <rname>.
*
*    ENDLOOP.

  ENDMETHOD.

  METHOD rtti_get_t_dfies_by_table_name.

    IF context_check_abap_cloud( ) IS NOT INITIAL.
      result = rtti_get_t_attri_on_cloud( table_name ).
    ELSE.
      result = rtti_get_t_attri_on_prem( table_name ).
    ENDIF.

  ENDMETHOD.
ENDCLASS.
CLASS kHGwlIiCDAqWuzmHSWUVKThwDidmDe DEFINITION DEFERRED.
CLASS kHGwlIiCDAqWuzmHSWUVSQazryNNUC DEFINITION DEFERRED.
* renamed: z2ui5_cl_util :: lcl_range_to_sql
CLASS kHGwlIiCDAqWuzmHSWUVSQazryNNUC DEFINITION
  FINAL CREATE PUBLIC.

  PUBLIC SECTION.

    CONSTANTS: BEGIN OF signs,
                 including TYPE string VALUE 'I',
                 excluding TYPE string VALUE 'E',
               END OF signs.

    CONSTANTS: BEGIN OF options,
                 equal                TYPE string VALUE 'EQ',
                 not_equal            TYPE string VALUE 'NE',
                 between              TYPE string VALUE 'BT',
                 not_between          TYPE string VALUE 'NB',
                 contains_pattern     TYPE string VALUE 'CP',
                 not_contains_pattern TYPE string VALUE 'NP',
                 greater_than         TYPE string VALUE 'GT',
                 greater_equal        TYPE string VALUE 'GE',
                 less_equal           TYPE string VALUE 'LE',
                 less_than            TYPE string VALUE 'LT',
               END OF options.

    METHODS constructor
      IMPORTING
        iv_fieldname TYPE clike
        ir_range     TYPE REF TO data.

    METHODS get_sql
      RETURNING
        VALUE(result) TYPE string.

  PROTECTED SECTION.
    DATA mv_fieldname TYPE string.
    DATA mr_range     TYPE REF TO data.

    CLASS-METHODS quote
      IMPORTING
        val        TYPE clike
      RETURNING
        VALUE(out) TYPE string.

ENDCLASS.
CLASS kHGwlIiCDAqWuzmHSWUVSQazryNNUC IMPLEMENTATION.
  METHOD constructor.

    mr_range = ir_range.
    mv_fieldname = |{ to_upper( iv_fieldname ) }|.

  ENDMETHOD.

  METHOD get_sql.

    FIELD-SYMBOLS <lt_range> TYPE STANDARD TABLE.

    ASSIGN me->mr_range->* TO <lt_range>.

    IF xsdbool( <lt_range> IS INITIAL ) = abap_true.
      RETURN.
    ENDIF.

    result = `(`.

    LOOP AT <lt_range> ASSIGNING FIELD-SYMBOL(<ls_range_item>).

      ASSIGN COMPONENT 'SIGN' OF STRUCTURE <ls_range_item> TO FIELD-SYMBOL(<lv_sign>).
      ASSIGN COMPONENT 'OPTION' OF STRUCTURE <ls_range_item> TO FIELD-SYMBOL(<lv_option>).
      ASSIGN COMPONENT 'LOW' OF STRUCTURE <ls_range_item> TO FIELD-SYMBOL(<lv_low>).
      ASSIGN COMPONENT 'HIGH' OF STRUCTURE <ls_range_item> TO FIELD-SYMBOL(<lv_high>).

      IF sy-tabix <> 1.
        result = |{ result } OR|.
      ENDIF.

      IF <lv_sign> = signs-excluding.
        result = |{ result } NOT|.
      ENDIF.

      result = |{ result } { me->mv_fieldname }|.

      CASE <lv_option>.
        WHEN options-equal OR
             options-not_equal OR
             options-greater_than OR
             options-greater_equal OR
             options-less_equal OR
             options-less_than.
          result = |{ result } { <lv_option> } { quote( <lv_low> ) }|.

        WHEN options-between.
          result = |{ result } BETWEEN { quote( <lv_low> ) } AND { quote( <lv_high> ) }|.

        WHEN options-not_between.
          result = |{ result } NOT BETWEEN { quote( <lv_low> ) } AND { quote( <lv_high> ) }|.

        WHEN options-contains_pattern.
          TRANSLATE <lv_low> USING '*%'.
          result = |{ result } LIKE { quote( <lv_low> ) }|.

        WHEN options-not_contains_pattern.
          TRANSLATE <lv_low> USING '*%'.
          result = |{ result } NOT LIKE { quote( <lv_low> ) }|.
      ENDCASE.
    ENDLOOP.

    result = |{ result } )|.

  ENDMETHOD.

  METHOD quote.
    out = |'{ replace( val  = val
                       sub  = `'`
                       with = `''`
                       occ  = 0 ) }'|.
  ENDMETHOD.
ENDCLASS.

* renamed: z2ui5_cl_util :: lcl_msp_mapper
CLASS kHGwlIiCDAqWuzmHSWUVKThwDidmDe DEFINITION
  FINAL CREATE PUBLIC.

  PUBLIC SECTION.
    CLASS-METHODS msg_map
      IMPORTING
        name          TYPE clike
        val           TYPE data
        is_msg        TYPE z2ui5_cl_util=>ty_s_msg
      RETURNING
        VALUE(result) TYPE z2ui5_cl_util=>ty_s_msg.

    CLASS-METHODS msg_get
      IMPORTING
        val           TYPE any
      RETURNING
        VALUE(result) TYPE z2ui5_cl_util=>ty_t_msg.

ENDCLASS.

CLASS kHGwlIiCDAqWuzmHSWUVKThwDidmDe IMPLEMENTATION.

  METHOD msg_get.

    DATA(lv_kind) = z2ui5_cl_util=>rtti_get_type_kind( val ).
    CASE lv_kind.

      WHEN cl_abap_datadescr=>typekind_table.
        FIELD-SYMBOLS <tab> TYPE ANY TABLE.
        ASSIGN val TO <tab>.
        LOOP AT <tab> ASSIGNING FIELD-SYMBOL(<row>).
          DATA(lt_tab) = msg_get( <row> ).
          INSERT LINES OF lt_tab INTO TABLE result.
        ENDLOOP.

      WHEN cl_abap_datadescr=>typekind_struct1 OR cl_abap_datadescr=>typekind_struct2.

        IF val IS INITIAL.
          RETURN.
        ENDIF.

        DATA(lt_attri) = z2ui5_cl_util=>rtti_get_t_attri_by_any( val ).

        DATA(ls_result) = VALUE z2ui5_cl_util=>ty_s_msg( ).
        LOOP AT lt_attri REFERENCE INTO DATA(ls_attri).
          DATA(lv_name) = |VAL-{ ls_attri->name }|.
          ASSIGN (lv_name) TO FIELD-SYMBOL(<comp>).

          IF ls_attri->name = 'ITEM'.
            lt_tab = msg_get( <comp> ).
            INSERT LINES OF lt_tab INTO TABLE result.
            RETURN.
          ELSE.
            ls_result = msg_map( name = ls_attri->name val = <comp> is_msg = ls_result ).
          ENDIF.

        ENDLOOP.
        IF ls_result-text IS INITIAL AND ls_result-id IS NOT INITIAL.
          MESSAGE ID ls_result-id TYPE 'I' NUMBER ls_result-no
                  WITH ls_result-v1 ls_result-v2 ls_result-v3 ls_result-v4
                  INTO ls_result-text.
        ENDIF.
        INSERT ls_result INTO TABLE result.

      WHEN cl_abap_datadescr=>typekind_oref.
        TRY.
            DATA(lx) = CAST cx_root( val ).
            ls_result = VALUE #( type = 'E' text = lx->get_text( ) ).
            DATA(lt_attri_o) = z2ui5_cl_util=>rtti_get_t_attri_by_oref( val ).
            LOOP AT lt_attri_o REFERENCE INTO DATA(ls_attri_o)
                 WHERE visibility = 'U'.
              lv_name = |VAL->{ ls_attri_o->name }|.
              ASSIGN (lv_name) TO <comp>.
              ls_result = msg_map( name = ls_attri_o->name val = <comp> is_msg = ls_result ).
            ENDLOOP.
            INSERT ls_result INTO TABLE result.
          CATCH cx_root.

            DATA obj TYPE REF TO object.
            obj = val.

            TRY.

                DATA lr_tab TYPE REF TO data.
                CREATE DATA lr_tab TYPE ('if_bali_log=>ty_item_table').
                ASSIGN lr_tab->* TO FIELD-SYMBOL(<tab2>).

                CALL METHOD obj->(`IF_BALI_LOG~GET_ALL_ITEMS`)
                  RECEIVING
                    item_table = <tab2>.

                DATA(lt_tab2) = msg_get( <tab2> ).
                INSERT LINES OF lt_tab2 INTO TABLE result.

              CATCH cx_root.

                TRY.

                    CREATE DATA lr_tab TYPE ('BAPIRETTAB').
                    ASSIGN lr_tab->* TO <tab2>.

                    CALL METHOD obj->(`ZIF_LOGGER~EXPORT_TO_TABLE`)
                      RECEIVING
                        rt_bapiret = <tab2>.

                    lt_tab2 = msg_get( <tab2> ).
                    INSERT LINES OF lt_tab2 INTO TABLE result.

                  CATCH cx_root INTO DATA(lx2).
                    lt_attri_o = z2ui5_cl_util=>rtti_get_t_attri_by_oref( val ).
                    LOOP AT lt_attri_o REFERENCE INTO ls_attri_o
                         WHERE visibility = 'U'.
                      lv_name = |OBJ->{ ls_attri_o->name }|.
                      ASSIGN (lv_name) TO <comp>.
                      ls_result = msg_map( name = ls_attri_o->name val = <comp> is_msg = ls_result ).
                    ENDLOOP.
                    INSERT ls_result INTO TABLE result.

                ENDTRY.
            ENDTRY.
        ENDTRY.

      WHEN OTHERS.

        IF z2ui5_cl_util=>rtti_check_clike( val ).
          INSERT VALUE #( text = val
          )
                 INTO TABLE result.
        ENDIF.
    ENDCASE.

  ENDMETHOD.

  METHOD msg_map.

    result = is_msg.
    CASE name.
      WHEN 'ID' OR 'MSGID'.
        result-id = val.
      WHEN 'NO' OR 'NUMBER' OR 'MSGNO'.
        result-no = val.
      WHEN 'MESSAGE' OR 'TEXT'.
        result-text = val.
      WHEN 'TYPE' OR 'MSGTY'.
        result-type = val.
      WHEN 'MESSAGE_V1' OR 'MSGV1' OR 'V1'.
        result-v1 = val.
      WHEN 'MESSAGE_V2' OR 'MSGV2' OR 'V2'.
        result-v2 = val.
      WHEN 'MESSAGE_V3' OR 'MSGV3' OR 'V3'.
        result-v3 = val.
      WHEN 'MESSAGE_V4' OR 'MSGV4' OR 'V4'.
        result-v4 = val.
      WHEN 'TIME_STMP'.
        result-timestampl = val.
    ENDCASE.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_util IMPLEMENTATION.
  METHOD boolean_abap_2_json.

    IF boolean_check_by_data( val ).
      result = COND #( WHEN val = abap_true THEN `true` ELSE `false` ).
    ELSE.
      result = val.
    ENDIF.

  ENDMETHOD.

  METHOD boolean_check_by_data.

    TRY.
        DATA(lv_type_name) = rtti_get_type_name( val ).
        result = boolean_check_by_name( lv_type_name ).
      CATCH cx_root.
    ENDTRY.

  ENDMETHOD.

  METHOD boolean_check_by_name.

    CASE val.
      WHEN 'ABAP_BOOL'
          OR 'XSDBOOLEAN'
          OR 'FLAG'
          OR 'XFLAG'
          OR 'XFELD'
          OR 'ABAP_BOOLEAN'
          OR 'WDY_BOOLEAN'
          OR 'BOOLE_D'
          OR 'OS_BOOLEAN'.
        result = abap_true.
    ENDCASE.

  ENDMETHOD.

  METHOD check_bound_a_not_inital.

    IF val IS NOT BOUND.
      result = abap_false.
      RETURN.
    ENDIF.
    result = xsdbool( check_unassign_inital( val ) = abap_false ).

  ENDMETHOD.

  METHOD check_unassign_inital.

    IF val IS INITIAL.
      result = abap_true.
      RETURN.
    ENDIF.

    FIELD-SYMBOLS <any> TYPE data.
    ASSIGN val->* TO <any>.

    result = xsdbool( <any> IS INITIAL ).

  ENDMETHOD.

  METHOD conv_copy_ref_data.

    FIELD-SYMBOLS <from>   TYPE data.
    FIELD-SYMBOLS <result> TYPE data.

    IF rtti_check_ref_data( from ).
      ASSIGN from->* TO <from>.
    ELSE.
      ASSIGN from TO <from>.
    ENDIF.
    CREATE DATA result LIKE <from>.
    ASSIGN result->* TO <result>.

    <result> = <from>.

  ENDMETHOD.

  METHOD conv_get_as_data_ref.

    GET REFERENCE OF val INTO result.

  ENDMETHOD.

  METHOD c_trim.

    result = shift_left( shift_right( CONV string( val ) ) ).
    result = shift_right( val = result
                          sub = cl_abap_char_utilities=>horizontal_tab ).
    result = shift_left( val = result
                         sub = cl_abap_char_utilities=>horizontal_tab ).
    result = shift_left( shift_right( result ) ).

  ENDMETHOD.

  METHOD c_trim_lower.

    result = to_lower( c_trim( CONV string( val ) ) ).

  ENDMETHOD.

  METHOD c_trim_upper.

    result = to_upper( c_trim( CONV string( val ) ) ).

  ENDMETHOD.

  METHOD filter_itab.

    DATA ref TYPE REF TO data.

    LOOP AT val REFERENCE INTO ref.

      LOOP AT filter INTO DATA(ls_filter).

        ASSIGN ref->(ls_filter-name) TO FIELD-SYMBOL(<field>).
        IF sy-subrc <> 0.
          CONTINUE.
        ENDIF.
        IF <field> NOT IN ls_filter-t_range.
          DELETE val.
          EXIT.
        ENDIF.

      ENDLOOP.

    ENDLOOP.

  ENDMETHOD.

  METHOD filter_get_multi_by_data.

    LOOP AT rtti_get_t_attri_by_any( val ) REFERENCE INTO DATA(lr_comp).
      INSERT VALUE #( name = lr_comp->name ) INTO TABLE result.
    ENDLOOP.

  ENDMETHOD.

  METHOD filter_get_range_by_token.

    DATA(lv_length) = strlen( value ) - 1.
    CASE value(1).

      WHEN `=`.
        result = VALUE #( sign   = `I`
                          option = `EQ`
                          low    = value+1 ).
      WHEN `<`.
        IF value+1(1) = `=`.
          result = VALUE #( sign   = `I`
                            option = `LE`
                            low    = value+2 ).
        ELSE.
          result = VALUE #( sign   = `I`
                            option = `LT`
                            low    = value+1 ).
        ENDIF.
      WHEN `>`.
        IF value+1(1) = `=`.
          result = VALUE #( sign   = `I`
                            option = `GE`
                            low    = value+2 ).
        ELSE.
          result = VALUE #( sign   = `I`
                            option = `GT`
                            low    = value+1 ).
        ENDIF.

      WHEN `*`.
        IF value+lv_length(1) = `*`.
          SHIFT value RIGHT DELETING TRAILING `*`.
          SHIFT value LEFT DELETING LEADING `*`.
          result = VALUE #( sign   = `I`
                            option = `CP`
                            low    = value ).
        ENDIF.

      WHEN OTHERS.
        IF value CP `...`.
          SPLIT value AT `...` INTO result-low result-high.
          result-option = `BT`.
        ELSE.
          result = VALUE #( sign   = `I`
                            option = `EQ`
                            low    = value ).
        ENDIF.

    ENDCASE.

  ENDMETHOD.

  METHOD filter_update_tokens.

    result = val.
    DATA(lr_filter) = REF #( result[ name = name ] ).
    LOOP AT lr_filter->t_token_removed INTO DATA(ls_token).
      DELETE lr_filter->t_token WHERE key = ls_token-key.
    ENDLOOP.

    LOOP AT lr_filter->t_token_added INTO ls_token.
      INSERT VALUE #( key      = ls_token-key
                      text     = ls_token-text
                      visible  = abap_true
                      editable = abap_true ) INTO TABLE lr_filter->t_token.
    ENDLOOP.

    CLEAR lr_filter->t_token_removed.
    CLEAR lr_filter->t_token_added.

    " TODO: variable is assigned but never used (ABAP cleaner)
    DATA(lt_token) = result[ name = name ]-t_token.
    DATA(lt_range) = z2ui5_cl_util=>filter_get_range_t_by_token_t( result[ name = name ]-t_token ).
    lr_filter->t_range = lt_range.

  ENDMETHOD.

  METHOD filter_get_range_t_by_token_t.

    LOOP AT val INTO DATA(ls_token).
      INSERT filter_get_range_by_token( ls_token-text ) INTO TABLE result.
    ENDLOOP.

  ENDMETHOD.

  METHOD filter_get_token_range_mapping.

    result = VALUE #( (   n = `EQ`     v = `={LOW}` )
                      (   n = `LT`     v = `<{LOW}` )
                      (   n = `LE`     v = `<={LOW}` )
                      (   n = `GT`     v = `>{LOW}` )
                      (   n = `GE`     v = `>={LOW}` )
                      (   n = `CP`     v = `*{LOW}*` )
                      (   n = `BT`     v = `{LOW}...{HIGH}` )
                      (   n = `NE`     v = `!(={LOW})` )
                      (   n = `NE`     v = `!(<leer>)` )
                      (   n = `<leer>` v = `<leer>` ) ).

  ENDMETHOD.

  METHOD filter_get_token_t_by_range_t.

    DATA(lt_mapping) = filter_get_token_range_mapping( ).

    DATA(lt_tab) = VALUE ty_t_range( ).

    itab_corresponding( EXPORTING val = val
                        CHANGING  tab = lt_tab
    ).

    LOOP AT lt_tab REFERENCE INTO DATA(lr_row).

      DATA(lv_value) = lt_mapping[ n = lr_row->option ]-v.
      REPLACE `{LOW}`  IN lv_value WITH lr_row->low.
      REPLACE `{HIGH}` IN lv_value WITH lr_row->high.

      INSERT VALUE #( key      = lv_value
                      text     = lv_value
                      visible  = abap_true
                      editable = abap_true ) INTO TABLE result.
    ENDLOOP.

  ENDMETHOD.

  METHOD itab_filter_by_val.

    FIELD-SYMBOLS <row> TYPE any.

    LOOP AT tab ASSIGNING <row>.
      DATA(lv_row) = ``.
      DATA(lv_index) = 1.
      DO.
        ASSIGN COMPONENT lv_index OF STRUCTURE <row> TO FIELD-SYMBOL(<field>).
        IF sy-subrc <> 0.
          EXIT.
        ENDIF.
        lv_row = lv_row && <field>.
        lv_index = lv_index + 1.
      ENDDO.

      IF lv_row NS val.
        DELETE tab.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD itab_get_csv_by_itab.

    FIELD-SYMBOLS <tab> TYPE table.

    ASSIGN val TO <tab>.
    DATA(tab) = CAST cl_abap_tabledescr( cl_abap_typedescr=>describe_by_data( <tab> ) ).

    DATA(struc) = CAST cl_abap_structdescr( tab->get_table_line_type( ) ).

    LOOP AT struc->get_components( ) REFERENCE INTO DATA(lr_comp).
      result = |{ result }{ lr_comp->name };|.
    ENDLOOP.

    result = result && cl_abap_char_utilities=>cr_lf.

    DATA lr_row TYPE REF TO data.
    LOOP AT <tab> REFERENCE INTO lr_row.

      DATA(lv_index) = 1.
      DO.
        ASSIGN lr_row->* TO FIELD-SYMBOL(<row>).
        ASSIGN COMPONENT lv_index OF STRUCTURE <row> TO FIELD-SYMBOL(<field>).
        IF sy-subrc <> 0.
          EXIT.
        ENDIF.
        lv_index = lv_index + 1.
        result = |{ result }{ <field> };|.
      ENDDO.
      result = result && cl_abap_char_utilities=>cr_lf.
    ENDLOOP.

  ENDMETHOD.

  METHOD itab_get_itab_by_csv.

    DATA lt_comp TYPE cl_abap_structdescr=>component_table.
    FIELD-SYMBOLS <tab> TYPE STANDARD TABLE.
    DATA lr_row TYPE REF TO data.

    SPLIT val AT cl_abap_char_utilities=>newline INTO TABLE DATA(lt_rows).
    SPLIT lt_rows[ 1 ] AT ';' INTO TABLE DATA(lt_cols).

    LOOP AT lt_cols REFERENCE INTO DATA(lr_col).

      DATA(lv_name) = c_trim_upper( lr_col->* ).
      REPLACE ` ` IN lv_name WITH `_`.

      INSERT VALUE #( name = lv_name
                      type = cl_abap_elemdescr=>get_c( 40 ) ) INTO TABLE lt_comp.
    ENDLOOP.

    DATA(struc) = cl_abap_structdescr=>get( lt_comp ).
    DATA(data) = CAST cl_abap_datadescr( struc ).
    DATA(o_table_desc) = cl_abap_tabledescr=>create( p_line_type  = data
                                                     p_table_kind = cl_abap_tabledescr=>tablekind_std
                                                     p_unique     = abap_false ).

    CREATE DATA result TYPE HANDLE o_table_desc.
    ASSIGN result->* TO <tab>.
    DELETE lt_rows WHERE table_line IS INITIAL.

    LOOP AT lt_rows REFERENCE INTO DATA(lr_rows) FROM 2.

      SPLIT lr_rows->* AT ';' INTO TABLE lt_cols.
      CREATE DATA lr_row TYPE HANDLE struc.

      LOOP AT lt_cols REFERENCE INTO lr_col.
        ASSIGN lr_row->* TO FIELD-SYMBOL(<row>).
        ASSIGN COMPONENT sy-tabix OF STRUCTURE <row> TO FIELD-SYMBOL(<field>).
        ASSERT sy-subrc = 0.
        <field> = lr_col->*.
      ENDLOOP.

      INSERT <row> INTO TABLE <tab>.
    ENDLOOP.

  ENDMETHOD.

  METHOD json_parse.
    TRY.

        z2ui5_cl_ajson=>parse( val )->to_abap( EXPORTING iv_corresponding = abap_true
                                               IMPORTING ev_container     = data ).

      CATCH cx_root INTO DATA(x).
        ASSERT x IS NOT BOUND.
    ENDTRY.
  ENDMETHOD.

  METHOD json_stringify.
    TRY.

        DATA(li_ajson) = CAST z2ui5_if_ajson( z2ui5_cl_ajson=>create_empty( ) ).
        result = li_ajson->set( iv_path = `/`
                                iv_val  = any )->stringify( ).

      CATCH cx_root INTO DATA(x).
        ASSERT x IS NOT BOUND.
    ENDTRY.
  ENDMETHOD.

  METHOD rtti_check_class_exists.

    TRY.
        cl_abap_classdescr=>describe_by_name( EXPORTING  p_name         = val
                                              EXCEPTIONS type_not_found = 1 ).
        IF sy-subrc = 0.
          result = abap_true.
        ENDIF.

      CATCH cx_root.
        " cx_sy_rtti_syntax_error
    ENDTRY.

  ENDMETHOD.

  METHOD rtti_check_ref_data.

    TRY.
        DATA(lo_typdescr) = cl_abap_typedescr=>describe_by_data( val ).
        DATA(lo_ref) = CAST cl_abap_refdescr( lo_typdescr ) ##NEEDED.
        result = abap_true.
      CATCH cx_root.
    ENDTRY.

  ENDMETHOD.

  METHOD rtti_check_type_kind_dref.

    DATA(lv_type_kind) = cl_abap_datadescr=>get_data_type_kind( val ).
    result = xsdbool( lv_type_kind = cl_abap_typedescr=>typekind_dref ).

  ENDMETHOD.

  METHOD rtti_get_classname_by_ref.

    DATA(lv_classname) = cl_abap_classdescr=>get_class_name( in ).
    result = substring_after( val = lv_classname
                              sub = `\CLASS=` ).

  ENDMETHOD.

  METHOD rtti_get_intfname_by_ref.

    DATA(rtti) = cl_abap_typedescr=>describe_by_data( in  ).
    DATA(ref) = CAST cl_abap_refdescr( rtti ).
    DATA(name) = ref->get_referenced_type( )->absolute_name.
    result = substring_after( val = name
                              sub = `\INTERFACE=` ).

  ENDMETHOD.

  METHOD rtti_get_type_kind.

    result = cl_abap_datadescr=>get_data_type_kind( val ).

  ENDMETHOD.

  METHOD rtti_get_type_name.
    TRY.

        DATA(lo_descr) = cl_abap_elemdescr=>describe_by_data( val ).
        DATA(lo_ele) = CAST cl_abap_elemdescr( lo_descr ).
        result = lo_ele->get_relative_name( ).

      CATCH cx_root.
    ENDTRY.
  ENDMETHOD.

  METHOD rtti_get_t_attri_by_include.

    DATA(sdescr) = CAST cl_abap_structdescr( cl_abap_typedescr=>describe_by_name( type->absolute_name ) ).
    DATA(comps) = sdescr->get_components( ).

    LOOP AT comps REFERENCE INTO DATA(lr_comp).

      IF lr_comp->as_include = abap_true.

        DATA(incl_comps) = rtti_get_t_attri_by_include( lr_comp->type ).

        LOOP AT incl_comps REFERENCE INTO DATA(lr_incl_comp).
          lr_incl_comp->name = lr_incl_comp->name.
          APPEND lr_incl_comp->* TO result.
        ENDLOOP.

      ELSE.

        lr_comp->name = lr_comp->name.
        APPEND lr_comp->* TO result.

      ENDIF.

    ENDLOOP.

  ENDMETHOD.

  METHOD rtti_get_t_attri_by_oref.

    DATA(lo_obj_ref) = cl_abap_objectdescr=>describe_by_object_ref( val ).
    result = CAST cl_abap_classdescr( lo_obj_ref )->attributes.

  ENDMETHOD.

  METHOD rtti_get_t_attri_by_any.

    TRY.
        DATA(lo_type) = cl_abap_typedescr=>describe_by_data( val ).
        DATA(lo_struct) = CAST cl_abap_structdescr( lo_type ).
      CATCH cx_root.
        TRY.
            DATA(lo_tab) = CAST cl_abap_tabledescr( lo_type ).
            lo_struct = CAST cl_abap_structdescr( lo_tab->get_table_line_type( ) ).
          CATCH cx_root.
            TRY.
                DATA(lo_ref) = cl_abap_typedescr=>describe_by_data_ref( val ).
                lo_struct = CAST cl_abap_structdescr( lo_ref ).
              CATCH cx_root.
                lo_tab = CAST cl_abap_tabledescr( lo_ref ).
                lo_struct = CAST cl_abap_structdescr( lo_tab->get_table_line_type( ) ).
            ENDTRY.
        ENDTRY.
    ENDTRY.

    result = lo_struct->get_components( ).

    LOOP AT result REFERENCE INTO DATA(lr_comp)
         WHERE as_include = abap_true.

      DATA(lt_attri) = rtti_get_t_attri_by_include( lr_comp->type ).

      DELETE result.
      INSERT LINES OF lt_attri INTO TABLE result.
    ENDLOOP.

  ENDMETHOD.

  METHOD rtti_get_t_ddic_fixed_values.

    IF rollname IS INITIAL.
      RETURN.
    ENDIF.

    TRY.

        cl_abap_typedescr=>describe_by_name( EXPORTING  p_name         = CONV string( rollname )
                                             RECEIVING  p_descr_ref    = DATA(typedescr)
                                             EXCEPTIONS type_not_found = 1
                                                        OTHERS         = 2 ).
        IF sy-subrc <> 0.
          RETURN.
        ENDIF.

        DATA(elemdescr) = CAST cl_abap_elemdescr( typedescr ).

        result = rtti_get_t_fixvalues( elemdescr = elemdescr
                                       langu     = langu ).

      CATCH cx_root.
    ENDTRY.

  ENDMETHOD.

  METHOD rtti_tab_get_relative_name.

    FIELD-SYMBOLS <table> TYPE any.

    TRY.
        DATA(typedesc) = cl_abap_typedescr=>describe_by_data( table ).

        CASE typedesc->kind.

          WHEN cl_abap_typedescr=>kind_table.
            DATA(tabledesc) = CAST cl_abap_tabledescr( typedesc ).
            DATA(structdesc) = CAST cl_abap_structdescr( tabledesc->get_table_line_type( ) ).
            result = structdesc->get_relative_name( ).
            RETURN.

          WHEN typedesc->kind_ref.

            ASSIGN table->* TO <table>.
            result = rtti_tab_get_relative_name( <table> ).

        ENDCASE.
      CATCH cx_root.
    ENDTRY.

  ENDMETHOD.

  METHOD source_get_file_types.

    DATA(lv_types) = |abap, abc, actionscript, ada, apache_conf, applescript, asciidoc, assembly_x86, autohotkey, batchfile, bro, c9search, c_cpp, cirru, clojure, cobol, coffee, coldfusion, csharp, css, curly, d, dart, diff, django, dockerfile, | &&
|dot, drools, eiffel, yaml, ejs, elixir, elm, erlang, forth, fortran, ftl, gcode, gherkin, gitignore, glsl, gobstones, golang, groovy, haml, handlebars, haskell, haskell_cabal, haxe, hjson, html, html_elixir, html_ruby, ini, io, jack, jade, java, ja| &&
      |vascri| &&
|pt, json, jsoniq, jsp, jsx, julia, kotlin, latex, lean, less, liquid, lisp, live_script, livescript, logiql, lsl, lua, luapage, lucene, makefile, markdown, mask, matlab, mavens_mate_log, maze, mel, mips_assembler, mipsassembler, mushcode, mysql, ni| &&
|x, nsis, objectivec, ocaml, pascal, perl, pgsql, php, plain_text, powershell, praat, prolog, properties, protobuf, python, r, razor, rdoc, rhtml, rst, ruby, rust, sass, scad, scala, scheme, scss, sh, sjs, smarty, snippets, soy_template, space, sql,| &&
      | sqlserver, stylus, svg, swift, swig, tcl, tex, text, textile, toml, tsx, twig, typescript, vala, vbscript, velocity, verilog, vhdl, wollok, xml, xquery, terraform, slim, redshift, red, puppet, php_laravel_blade, mixal, jssm, fsharp, edifact,| &&
      | csp, cssound_score, cssound_orchestra, cssound_document|.
    SPLIT lv_types AT ',' INTO TABLE result.

  ENDMETHOD.

  METHOD source_get_method2.

    DATA(lt_source) = source_get_method( iv_classname  = iv_classname
                                         iv_methodname = iv_methodname ).

    result = source_method_to_file( lt_source ).

  ENDMETHOD.

  METHOD source_method_to_file.

    LOOP AT it_source INTO DATA(lv_source).
      TRY.
          result = result && lv_source+1 && cl_abap_char_utilities=>newline.
        CATCH cx_root.
      ENDTRY.
    ENDLOOP.

  ENDMETHOD.

  METHOD filter_get_sql_by_sql_string.

    DATA(lv_sql) = CONV string( val ).
    REPLACE ALL OCCURRENCES OF ` ` IN lv_sql WITH ``.
    lv_sql = to_upper( lv_sql ).
    SPLIT lv_sql AT 'SELECTFROM' INTO DATA(lv_dummy) DATA(lv_tab).
    SPLIT lv_tab AT `FIELDS` INTO lv_tab lv_dummy.

    result-tabname = lv_tab.

  ENDMETHOD.

  METHOD time_get_date_by_stampl.
    " TODO: variable is assigned but never used (ABAP cleaner)
    CONVERT TIME STAMP val TIME ZONE sy-zonlo INTO DATE result TIME DATA(lv_dummy).
  ENDMETHOD.

  METHOD time_get_timestampl.
    GET TIME STAMP FIELD result.
  ENDMETHOD.

  METHOD time_get_time_by_stampl.
    " TODO: variable is assigned but never used (ABAP cleaner)
    CONVERT TIME STAMP val TIME ZONE sy-zonlo INTO DATE DATA(lv_dummy) TIME result.
  ENDMETHOD.

  METHOD time_substract_seconds.

    result = cl_abap_tstmp=>subtractsecs( tstmp = time
                                          secs  = seconds ).
  ENDMETHOD.

  METHOD unassign_data.

    FIELD-SYMBOLS <unassign> TYPE any.

    ASSIGN val->* TO <unassign>.
    result = <unassign>.

  ENDMETHOD.

  METHOD unassign_object.

    FIELD-SYMBOLS <unassign> TYPE any.

    ASSIGN val->* TO <unassign>.
    result = <unassign>.

  ENDMETHOD.

  METHOD url_param_create_url.

    LOOP AT t_params INTO DATA(ls_param).
      result = |{ result }{ ls_param-n }={ ls_param-v }&|.
    ENDLOOP.
    result = shift_right( val = result
                          sub = `&` ).

  ENDMETHOD.

  METHOD url_param_get.

    DATA(lt_params) = url_param_get_tab( url ).
    DATA(lv_val) = c_trim_lower( val ).
    result = VALUE #( lt_params[ n = lv_val ]-v OPTIONAL ).

  ENDMETHOD.

  METHOD url_param_get_tab.

    DATA(lv_search) = replace( val  = i_val
                               sub  = `%3D`
                               with = '='
                               occ  = 0 ).

    lv_search = replace( val  = lv_search
                         sub  = `%26`
                         with = '&'
                         occ  = 0 ).

    lv_search = shift_left( val = lv_search
                            sub = `?` ).
*    lv_search = c_trim_lower( lv_search ).

    DATA(lv_search2) = substring_after( val = lv_search
                                        sub = `&sap-startup-params=` ).
    lv_search = COND #( WHEN lv_search2 IS NOT INITIAL THEN lv_search2 ELSE lv_search ).

    lv_search2 = substring_after( val = c_trim_lower( lv_search )
                                  sub = `?` ).
    IF lv_search2 IS NOT INITIAL.
      lv_search = lv_search2.
    ENDIF.

    SPLIT lv_search AT `&` INTO TABLE DATA(lt_param).

    LOOP AT lt_param REFERENCE INTO DATA(lr_param).
      SPLIT lr_param->* AT `=` INTO DATA(lv_name) DATA(lv_value).
*      INSERT VALUE #( n = c_trim_lower( lv_name )
*                      v = c_trim_lower( lv_value ) ) INTO TABLE rt_params.
      INSERT VALUE #( n = lv_name
                      v = lv_value ) INTO TABLE rt_params.
    ENDLOOP.

  ENDMETHOD.

  METHOD url_param_set.

    DATA(lt_params) = url_param_get_tab( url ).
    DATA(lv_n) = c_trim_lower( name ).

    LOOP AT lt_params REFERENCE INTO DATA(lr_params)
         WHERE n = lv_n.
      lr_params->v = c_trim_lower( value ).
    ENDLOOP.
    IF sy-subrc <> 0.
      INSERT VALUE #( n = lv_n
                      v = c_trim_lower( value ) ) INTO TABLE lt_params.
    ENDIF.

    result = url_param_create_url( lt_params ).

  ENDMETHOD.

  METHOD context_get_user_tech.
    result = sy-uname.
  ENDMETHOD.

  METHOD xml_parse.

    CALL TRANSFORMATION id
         SOURCE XML xml
         RESULT data = any.

  ENDMETHOD.

  METHOD xml_srtti_parse.

    DATA srtti TYPE REF TO object.
    CALL TRANSFORMATION id SOURCE XML rtti_data RESULT srtti = srtti.

    DATA rtti_type TYPE REF TO cl_abap_typedescr.
    CALL METHOD srtti->('GET_RTTI')
      RECEIVING
        rtti = rtti_type.

    DATA lo_datadescr TYPE REF TO cl_abap_datadescr.
    lo_datadescr ?= rtti_type.

    CREATE DATA result TYPE HANDLE lo_datadescr.
    ASSIGN result->* TO FIELD-SYMBOL(<variable>).
    CALL TRANSFORMATION id SOURCE XML rtti_data RESULT dobj = <variable>.

  ENDMETHOD.

  METHOD xml_srtti_stringify.

    IF rtti_check_class_exists( 'ZCL_SRTTI_TYPEDESCR' ) = abap_true.

      DATA srtti TYPE REF TO object.
      DATA(lv_classname) = `ZCL_SRTTI_TYPEDESCR`.
      CALL METHOD (lv_classname)=>('CREATE_BY_DATA_OBJECT')
        EXPORTING
          data_object = data
        RECEIVING
          srtti       = srtti.

      CALL TRANSFORMATION id SOURCE srtti = srtti dobj = data RESULT XML result.

    ELSE.

      TRY.
          CALL METHOD z2ui5_cl_srt_typedescr=>('CREATE_BY_DATA_OBJECT')
            EXPORTING
              data_object = data
            RECEIVING
              srtti       = srtti.

          CALL TRANSFORMATION id SOURCE srtti = srtti dobj = data RESULT XML result.

        CATCH cx_root.

          DATA(lv_text) = `UNSUPPORTED_FEATURE - Please install the open-source project S-RTTI by sandraros and try again: https://github.com/sandraros/S-RTTI`.
          RAISE EXCEPTION TYPE z2ui5_cx_util_error
            EXPORTING
              val = lv_text.

      ENDTRY.

    ENDIF.

  ENDMETHOD.

  METHOD xml_stringify.

    CALL TRANSFORMATION id
         SOURCE data = any
         RESULT XML result
         OPTIONS data_refs = `heap-or-create`.

  ENDMETHOD.

  METHOD x_check_raise.

    IF when = abap_true.
      RAISE EXCEPTION TYPE z2ui5_cx_util_error
        EXPORTING
          val = v.
    ENDIF.

  ENDMETHOD.

  METHOD x_get_last_t100.

    DATA(x) = val.
    DO.

      IF x->previous IS BOUND.
        x = x->previous.
        CONTINUE.
      ENDIF.

      EXIT.
    ENDDO.

    result = x->get_text( ).

  ENDMETHOD.

  METHOD x_raise.

    RAISE EXCEPTION TYPE z2ui5_cx_util_error
      EXPORTING
        val = v.

  ENDMETHOD.
  METHOD rtti_get_t_attri_by_table_name.

    IF table_name IS INITIAL.
      RAISE EXCEPTION TYPE z2ui5_cx_util_error
        EXPORTING
          val = 'TABLE_NAME_INITIAL_ERROR'.
    ENDIF.

    TRY.
        cl_abap_structdescr=>describe_by_name( EXPORTING  p_name         = table_name
                                               RECEIVING  p_descr_ref    = DATA(lo_obj)
                                               EXCEPTIONS type_not_found = 1
                                                          OTHERS         = 2
            ).

        IF sy-subrc <> 0.
          RAISE EXCEPTION TYPE z2ui5_cx_util_error
            EXPORTING
              val = |TABLE_NOT_FOUD_NAME___{ table_name }|.
        ENDIF.
        DATA(lo_struct) = CAST cl_abap_structdescr( lo_obj ).

      CATCH cx_root.

        TRY.
            cl_abap_structdescr=>describe_by_name( EXPORTING  p_name         = table_name
                                                   RECEIVING  p_descr_ref    = lo_obj
                                                   EXCEPTIONS type_not_found = 1
                                                              OTHERS         = 2
            ).
            IF sy-subrc <> 0.
              RAISE EXCEPTION TYPE z2ui5_cx_util_error
                EXPORTING
                  val = |TABLE_NOT_FOUD_NAME___{ table_name }|.
            ENDIF.

            DATA(lo_tab) = CAST cl_abap_tabledescr( lo_obj ).
            lo_struct = CAST cl_abap_structdescr( lo_tab->get_table_line_type( ) ).
          CATCH cx_root.
            RETURN.
        ENDTRY.

    ENDTRY.

    result = lo_struct->get_components( ).

    LOOP AT result REFERENCE INTO DATA(lr_comp)
         WHERE as_include = abap_true.

      DATA(lt_attri) = rtti_get_t_attri_by_include( lr_comp->type ).

      DELETE result.
      INSERT LINES OF lt_attri INTO TABLE result.
    ENDLOOP.

  ENDMETHOD.

  METHOD itab_corresponding.

    FIELD-SYMBOLS <row_in>  TYPE any.
    FIELD-SYMBOLS <row_out> TYPE any.

    LOOP AT val ASSIGNING <row_in>.

      IF lines( tab ) = 0.
        DATA(lv_lines) = 1.
      ELSE.
        lv_lines = lines( tab ).
      ENDIF.

      INSERT INITIAL LINE INTO tab ASSIGNING <row_out> INDEX lv_lines.
      <row_out> = CORRESPONDING #( <row_in> ).

    ENDLOOP.

  ENDMETHOD.

  METHOD itab_filter_by_t_range.

  ENDMETHOD.

  METHOD filter_get_data_by_multi.

  ENDMETHOD.

  METHOD filter_get_sql_where.

    LOOP AT val INTO DATA(ls_filter).

      " TODO: variable is assigned but never used (ABAP cleaner)
      DATA lo_range TYPE REF TO kHGwlIiCDAqWuzmHSWUVSQazryNNUC.

      lo_range = NEW #( iv_fieldname = ls_filter-name
                        ir_range     = REF #( ls_filter-t_range ) ).

    ENDLOOP.

  ENDMETHOD.

  METHOD msg_get.

    result = kHGwlIiCDAqWuzmHSWUVKThwDidmDe=>msg_get( val ).

  ENDMETHOD.

  METHOD rtti_check_clike.

    DATA(lv_type) = rtti_get_type_kind( val ).
    CASE lv_type.
      WHEN cl_abap_datadescr=>typekind_char OR
          cl_abap_datadescr=>typekind_clike OR
          cl_abap_datadescr=>typekind_csequence OR
          cl_abap_datadescr=>typekind_string.
        result = abap_true.
    ENDCASE.

  ENDMETHOD.

  METHOD ui5_get_msg_type.

    result = SWITCH #( val
                       WHEN 'E' THEN `Error`
                       WHEN 'S' THEN `Success`
                       WHEN `W` THEN `Warning`
                       ELSE `Information` ).

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cx_srt IMPLEMENTATION.
  METHOD constructor ##ADT_SUPPRESS_GENERATION.
    CALL METHOD super->constructor
      EXPORTING
        previous = previous.
    CLEAR me->textid.
    IF textid IS INITIAL.
      if_t100_message~t100key = if_t100_message=>default_textid.
    ELSE.
      if_t100_message~t100key = textid.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_srt_typedescr IMPLEMENTATION.
  METHOD constructor.
    absolute_name = rtti->absolute_name.
    type_kind     = rtti->type_kind.
    length        = rtti->length.
    decimals      = rtti->decimals.
    kind          = rtti->kind.
    is_ddic_type  = rtti->is_ddic_type( ).
    IF rtti->absolute_name CP '\TYPE=%_T*'.
      technical_type = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD create_by_data_object.
    srtti = create_by_rtti( cl_abap_typedescr=>describe_by_data( data_object ) ).
  ENDMETHOD.

  METHOD create_by_rtti.
    DATA elem_rtti   TYPE REF TO cl_abap_elemdescr.
    DATA struct_rtti TYPE REF TO cl_abap_structdescr.
    DATA table_rtti  TYPE REF TO cl_abap_tabledescr.
    DATA ref_rtti    TYPE REF TO cl_abap_refdescr.
    DATA class_rtti  TYPE REF TO cl_abap_classdescr.
    DATA intf_rtti   TYPE REF TO cl_abap_intfdescr.

    CASE rtti->kind.
      WHEN cl_abap_typedescr=>kind_elem.

        elem_rtti ?= rtti.
        CREATE OBJECT srtti TYPE z2ui5_cl_srt_elemdescr
          EXPORTING
            rtti = elem_rtti.

      WHEN cl_abap_typedescr=>kind_struct.

        struct_rtti ?= rtti.
        CREATE OBJECT srtti TYPE z2ui5_cl_srt_structdescr
          EXPORTING
            rtti = struct_rtti.

      WHEN cl_abap_typedescr=>kind_table.

        table_rtti ?= rtti.
        CREATE OBJECT srtti TYPE z2ui5_cl_srt_tabledescr
          EXPORTING
            rtti = table_rtti.

      WHEN cl_abap_typedescr=>kind_ref.

        ref_rtti ?= rtti.
        CREATE OBJECT srtti TYPE z2ui5_cl_srt_refdescr
          EXPORTING
            rtti = ref_rtti.

      WHEN cl_abap_typedescr=>kind_class.

        class_rtti ?= rtti.
        CREATE OBJECT srtti TYPE z2ui5_cl_srt_classdescr
          EXPORTING
            rtti = class_rtti.

      WHEN cl_abap_typedescr=>kind_intf.

        intf_rtti ?= rtti.
        CREATE OBJECT srtti TYPE z2ui5_cl_srt_intfdescr
          EXPORTING
            rtti = intf_rtti.

      WHEN OTHERS.
        " Unsupported (new ABAP features in the future)
        RAISE EXCEPTION TYPE z2ui5_cx_srt.
    ENDCASE.
  ENDMETHOD.

  METHOD get_rtti.
    " default behavior
    IF technical_type = abap_false.
      rtti = cl_abap_typedescr=>describe_by_name( absolute_name ).
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_srt_tabledescr IMPLEMENTATION.
  METHOD constructor.
    super->constructor( rtti ).
    key            = rtti->key.
    initial_size   = rtti->initial_size.
    key_defkind    = rtti->key_defkind.
    has_unique_key = rtti->has_unique_key.
    table_kind     = rtti->table_kind.

    line_type ?= z2ui5_cl_srt_typedescr=>create_by_rtti( rtti->get_table_line_type( ) ).
    IF line_type->not_serializable = abap_true.
      not_serializable = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD get_rtti.
    DATA lt_empty_key TYPE abap_keydescr_tab.
    DATA lo_data_rtti TYPE REF TO cl_abap_datadescr.
    DATA lo_error     TYPE REF TO cx_sy_table_creation.

    FIELD-SYMBOLS <lt_key> TYPE abap_keydescr_tab.

    CLEAR lt_empty_key.
    CASE key_defkind.
      WHEN cl_abap_tabledescr=>keydefkind_user.
        ASSIGN key TO <lt_key>.
      WHEN OTHERS.
        ASSIGN lt_empty_key TO <lt_key>.
    ENDCASE.
    TRY.

        lo_data_rtti ?= line_type->get_rtti( ).
        rtti = cl_abap_tabledescr=>create( p_line_type  = lo_data_rtti
                                           p_table_kind = table_kind
                                           p_unique     = has_unique_key
                                           p_key        = <lt_key>
                                           p_key_kind   = key_defkind ).

      CATCH cx_sy_table_creation INTO lo_error.
        RAISE EXCEPTION TYPE z2ui5_cx_srt
          EXPORTING
            previous = lo_error.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_srt_structdescr IMPLEMENTATION.
  METHOD constructor.
    DATA components_rtti TYPE abap_component_tab.
    DATA scomponent      TYPE sabap_componentdescr.
    DATA scomponent_rtti TYPE REF TO z2ui5_cl_srt_datadescr.

    FIELD-SYMBOLS <component> TYPE abap_componentdescr.

    super->constructor( rtti ).

    struct_kind = rtti->struct_kind.
    has_include = rtti->has_include.

    components_rtti = rtti->get_components( ).

    LOOP AT components_rtti ASSIGNING <component>.

      CLEAR scomponent.
      scomponent-name = <component>-name.

      scomponent_rtti ?= z2ui5_cl_srt_datadescr=>create_by_rtti( <component>-type ).
      scomponent-type       = scomponent_rtti.
      scomponent-as_include = <component>-as_include.
      scomponent-suffix     = <component>-suffix.

      APPEND scomponent TO components.
      IF scomponent-type->not_serializable = abap_true.
        not_serializable = abap_true.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD get_rtti.
    DATA components_rtti TYPE cl_abap_structdescr=>component_table.
    DATA component_rtti  TYPE abap_componentdescr.

    FIELD-SYMBOLS <component> TYPE sabap_componentdescr.

    CLEAR components_rtti.
    LOOP AT components ASSIGNING <component>.

      CLEAR component_rtti.
      component_rtti-name        = <component>-name.
      component_rtti-type       ?= <component>-type->get_rtti( ).
      component_rtti-as_include  = <component>-as_include.
      component_rtti-suffix      = <component>-suffix.

      APPEND component_rtti TO components_rtti.
    ENDLOOP.
    rtti = cl_abap_structdescr=>create( components_rtti ).
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_srt_refdescr IMPLEMENTATION.
  METHOD constructor.
    super->constructor( rtti ).
    CREATE OBJECT referenced_type TYPE z2ui5_cl_srt_typedescr
      EXPORTING
        rtti = rtti->get_referenced_type( ).
    IF referenced_type->not_serializable = abap_true.
      not_serializable = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD get_rtti.
    IF referenced_type->type_kind = cl_abap_typedescr=>typekind_data.
      rtti = cl_abap_refdescr=>get_ref_to_data( ).
    ELSEIF referenced_type->absolute_name = '\CLASS=OBJECT'.
      rtti = cl_abap_refdescr=>get_ref_to_object( ).
    ELSE.
      rtti = referenced_type->get_rtti( ).
    ENDIF.
    rtti = cl_abap_refdescr=>create( rtti ).
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_srt_objectdescr IMPLEMENTATION.
  METHOD constructor.
    super->constructor( rtti ).

    interfaces = rtti->interfaces.
    types      = rtti->types.
    attributes = rtti->attributes.
    methods    = rtti->methods.
    events     = rtti->events.

    READ TABLE interfaces WITH KEY name = 'IF_SERIALIZABLE_OBJECT' TRANSPORTING NO FIELDS.
    IF sy-subrc <> 0.
      not_serializable = abap_true.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_srt_intfdescr IMPLEMENTATION.
  METHOD constructor.
    super->constructor( rtti ).
    intf_kind = rtti->intf_kind.
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_srt_elemdescr IMPLEMENTATION.
  METHOD constructor.
    super->constructor( rtti ).

    edit_mask     = rtti->edit_mask.
    help_id       = rtti->help_id.
    output_length = rtti->output_length.
  ENDMETHOD.
  METHOD get_rtti.
    rtti = super->get_rtti( ).
    IF rtti IS BOUND.
      RETURN.
    ENDIF.

    IF     is_ddic_type   = abap_true
       AND technical_type = abap_false.
      " If XML transformations are used, they may be based on
      " the data element, for instance XSDBOOLEAN will convert "true"
      " into "X" during deserialization.
      rtti = cl_abap_typedescr=>describe_by_name( absolute_name ).
    ELSE.
      rtti = get_rtti_by_type_kind( type_kind ).
    ENDIF.
  ENDMETHOD.
  METHOD get_rtti_by_type_kind.
    DATA l_length TYPE i.

    CASE i_type_kind.
      WHEN cl_abap_typedescr=>typekind_num.
        l_length = length / cl_abap_char_utilities=>charsize.
        rtti = cl_abap_elemdescr=>get_n( l_length ).
      WHEN cl_abap_typedescr=>typekind_char.
        l_length = length / cl_abap_char_utilities=>charsize.
        rtti = cl_abap_elemdescr=>get_c( l_length ).
      WHEN cl_abap_typedescr=>typekind_string.
        rtti = cl_abap_elemdescr=>get_string( ).
      WHEN cl_abap_typedescr=>typekind_xstring.
        rtti = cl_abap_elemdescr=>get_xstring( ).
      WHEN cl_abap_typedescr=>typekind_int.
        rtti = cl_abap_elemdescr=>get_i( ).
      WHEN cl_abap_typedescr=>typekind_float.
        rtti = cl_abap_elemdescr=>get_f( ).
      WHEN cl_abap_typedescr=>typekind_date.
        rtti = cl_abap_elemdescr=>get_d( ).
      WHEN cl_abap_typedescr=>typekind_time.
        rtti = cl_abap_elemdescr=>get_t( ).
      WHEN cl_abap_typedescr=>typekind_hex.
        rtti = cl_abap_elemdescr=>get_x( length ).
      WHEN cl_abap_typedescr=>typekind_packed.
        rtti = cl_abap_elemdescr=>get_p( p_length   = length
                                         p_decimals = decimals ).
      WHEN cl_abap_typedescr=>typekind_decfloat16.
        rtti = cl_abap_elemdescr=>get_decfloat16( ).
      WHEN cl_abap_typedescr=>typekind_decfloat34.
        rtti = cl_abap_elemdescr=>get_decfloat34( ).
      WHEN OTHERS.
        RAISE EXCEPTION TYPE z2ui5_cx_srt.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_srt_datadescr IMPLEMENTATION.
ENDCLASS.

CLASS z2ui5_cl_srt_complexdescr IMPLEMENTATION.
ENDCLASS.

CLASS z2ui5_cl_srt_classdescr IMPLEMENTATION.
  METHOD constructor.
    super->constructor( rtti ).
    class_kind        = rtti->class_kind.
    create_visibility = rtti->create_visibility.
  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cx_ajson_error IMPLEMENTATION.
  METHOD constructor.
    CALL METHOD super->constructor
      EXPORTING
        previous = previous.
    me->rc = rc .
    me->message = message .
    me->location = location .
    me->a1 = a1 .
    me->a2 = a2 .
    me->a3 = a3 .
    me->a4 = a4 .
    CLEAR me->textid.
    IF textid IS INITIAL.
      if_t100_message~t100key = zcx_ajson_error .
    ELSE.
      if_t100_message~t100key = textid.
    ENDIF.
  ENDMETHOD.
  METHOD raise.

    DATA lx TYPE REF TO z2ui5_cx_ajson_error.

    CREATE OBJECT lx EXPORTING message = iv_msg.
    lx->set_location(
      iv_location = iv_location
      is_node     = is_node ).
    RAISE EXCEPTION lx.

  ENDMETHOD.
  METHOD set_location.

    DATA ls_msg TYPE ty_message_parts.
    DATA lv_location TYPE string.
    DATA lv_tmp TYPE string.
    FIELD-SYMBOLS <path> TYPE string.
    FIELD-SYMBOLS <name> TYPE string.

    IF iv_location IS NOT INITIAL.
      lv_location = iv_location.
    ELSEIF is_node IS NOT INITIAL.
      ASSIGN COMPONENT 'PATH' OF STRUCTURE is_node TO <path>.
      ASSIGN COMPONENT 'NAME' OF STRUCTURE is_node TO <name>.
      IF <path> IS ASSIGNED AND <name> IS ASSIGNED.
        lv_location = <path> && <name>.
      ENDIF.
    ENDIF.

    IF lv_location IS NOT INITIAL.
      lv_tmp = message && | @{ lv_location }|.
    ELSE.
      lv_tmp = message.
    ENDIF.

    ls_msg = lv_tmp.

    location = lv_location.
    a1       = ls_msg-a1.
    a2       = ls_msg-a2.
    a3       = ls_msg-a3.
    a4       = ls_msg-a4.

  ENDMETHOD.
ENDCLASS.

CLASS z2ui5_cl_ajson_utilities IMPLEMENTATION.
  METHOD delete_empty_nodes.

    DATA ls_json_tree LIKE LINE OF io_json->mt_json_tree.
    DATA lv_done TYPE abap_bool.

    DO.
      lv_done = abap_true.

      IF iv_keep_empty_arrays = abap_false.
        LOOP AT io_json->mt_json_tree INTO ls_json_tree
          WHERE type = z2ui5_if_ajson_types=>node_type-array AND children = 0.

          io_json->delete( ls_json_tree-path && ls_json_tree-name ).

        ENDLOOP.
        IF sy-subrc = 0.
          lv_done = abap_false.
        ENDIF.
      ENDIF.

      LOOP AT io_json->mt_json_tree INTO ls_json_tree
        WHERE type = z2ui5_if_ajson_types=>node_type-object AND children = 0.

        io_json->delete( ls_json_tree-path && ls_json_tree-name ).

      ENDLOOP.
      IF sy-subrc = 0.
        lv_done = abap_false.
      ENDIF.

      IF lv_done = abap_true.
        EXIT. " nothing else to delete
      ENDIF.
    ENDDO.

  ENDMETHOD.
  METHOD diff.

    mo_json_a = normalize_input(
      iv_json = iv_json_a
      io_json = io_json_a ).

    mo_json_b = normalize_input(
      iv_json = iv_json_b
      io_json = io_json_b ).

    mo_insert = z2ui5_cl_ajson=>create_empty( ).
    mo_delete = z2ui5_cl_ajson=>create_empty( ).
    mo_change = z2ui5_cl_ajson=>create_empty( ).

    diff_a_b( '/' ).
    diff_b_a( '/' ).

    eo_insert ?= mo_insert.
    eo_delete ?= mo_delete.
    eo_change ?= mo_change.

    delete_empty_nodes(
      io_json              = eo_insert
      iv_keep_empty_arrays = iv_keep_empty_arrays ).
    delete_empty_nodes(
      io_json              = eo_delete
      iv_keep_empty_arrays = iv_keep_empty_arrays ).
    delete_empty_nodes(
      io_json              = eo_change
      iv_keep_empty_arrays = iv_keep_empty_arrays ).

  ENDMETHOD.
  METHOD diff_a_b.

    DATA:
      lv_path_a TYPE string,
      lv_path_b TYPE string.

    FIELD-SYMBOLS:
      <node_a> LIKE LINE OF mo_json_a->mt_json_tree,
      <node_b> LIKE LINE OF mo_json_a->mt_json_tree.

    LOOP AT mo_json_a->mt_json_tree ASSIGNING <node_a> WHERE path = iv_path.
      lv_path_a = <node_a>-path && <node_a>-name && '/'.

      READ TABLE mo_json_b->mt_json_tree ASSIGNING <node_b>
        WITH TABLE KEY path = <node_a>-path name = <node_a>-name.
      IF sy-subrc = 0.
        lv_path_b = <node_b>-path && <node_b>-name && '/'.

        IF <node_a>-type = <node_b>-type.
          CASE <node_a>-type.
            WHEN z2ui5_if_ajson_types=>node_type-array.
              mo_insert->touch_array( lv_path_a ).
              mo_change->touch_array( lv_path_a ).
              mo_delete->touch_array( lv_path_a ).
              diff_a_b( lv_path_a ).
            WHEN z2ui5_if_ajson_types=>node_type-object.
              diff_a_b( lv_path_a ).
            WHEN OTHERS.
              IF <node_a>-value <> <node_b>-value.
                " save as changed value
                mo_change->set(
                  iv_path      = lv_path_b
                  iv_val       = <node_b>-value
                  iv_node_type = <node_b>-type ).
              ENDIF.
          ENDCASE.
        ELSE.
          " save changed type as delete + insert
          CASE <node_a>-type.
            WHEN z2ui5_if_ajson_types=>node_type-array.
              mo_delete->touch_array( lv_path_a ).
              diff_a_b( lv_path_a ).
            WHEN z2ui5_if_ajson_types=>node_type-object.
              diff_a_b( lv_path_a ).
            WHEN OTHERS.
              mo_delete->set(
                iv_path      = lv_path_a
                iv_val       = <node_a>-value
                iv_node_type = <node_a>-type ).
          ENDCASE.
          CASE <node_b>-type.
            WHEN z2ui5_if_ajson_types=>node_type-array.
              mo_insert->touch_array( lv_path_b ).
              diff_b_a( lv_path_b ).
            WHEN z2ui5_if_ajson_types=>node_type-object.
              diff_b_a( lv_path_b ).
            WHEN OTHERS.
              mo_insert->set(
                iv_path      = lv_path_b
                iv_val       = <node_b>-value
                iv_node_type = <node_b>-type ).
          ENDCASE.
        ENDIF.
      ELSE.
        " save as delete
        CASE <node_a>-type.
          WHEN z2ui5_if_ajson_types=>node_type-array.
            mo_delete->touch_array( lv_path_a ).
            diff_a_b( lv_path_a ).
          WHEN z2ui5_if_ajson_types=>node_type-object.
            diff_a_b( lv_path_a ).
          WHEN OTHERS.
            mo_delete->set(
              iv_path      = lv_path_a
              iv_val       = <node_a>-value
              iv_node_type = <node_a>-type ).
        ENDCASE.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.
  METHOD diff_b_a.

    DATA lv_path TYPE string.

    FIELD-SYMBOLS <node_b> LIKE LINE OF mo_json_b->mt_json_tree.

    LOOP AT mo_json_b->mt_json_tree ASSIGNING <node_b> WHERE path = iv_path.
      lv_path = <node_b>-path && <node_b>-name && '/'.

      CASE <node_b>-type.
        WHEN z2ui5_if_ajson_types=>node_type-array.
          mo_insert->touch_array( lv_path ).
          diff_b_a(
            iv_path  = lv_path
            iv_array = abap_true ).
        WHEN z2ui5_if_ajson_types=>node_type-object.
          diff_b_a( lv_path ).
        WHEN OTHERS.
          IF iv_array = abap_false.
            READ TABLE mo_json_a->mt_json_tree TRANSPORTING NO FIELDS
              WITH TABLE KEY path = <node_b>-path name = <node_b>-name.
            IF sy-subrc <> 0.
              " save as insert
              mo_insert->set(
                iv_path      = lv_path
                iv_val       = <node_b>-value
                iv_node_type = <node_b>-type ).
            ENDIF.
          ELSE.
            READ TABLE mo_insert->mt_json_tree TRANSPORTING NO FIELDS
              WITH KEY path = <node_b>-path value = <node_b>-value.
            IF sy-subrc <> 0.
              " save as new array value
              mo_insert->push(
                iv_path = iv_path
                iv_val  = <node_b>-value ).
            ENDIF.
          ENDIF.
      ENDCASE.
    ENDLOOP.

  ENDMETHOD.
  METHOD is_equal.

    DATA li_ins TYPE REF TO z2ui5_if_ajson.
    DATA li_del TYPE REF TO z2ui5_if_ajson.
    DATA li_mod TYPE REF TO z2ui5_if_ajson.

    diff(
      EXPORTING
        iv_json_a = iv_json_a
        iv_json_b = iv_json_b
        io_json_a = ii_json_a
        io_json_b = ii_json_b
      IMPORTING
        eo_insert = li_ins
        eo_delete = li_del
        eo_change = li_mod ).

    rv_yes = boolc(
      li_ins->is_empty( ) = abap_true AND
      li_del->is_empty( ) = abap_true AND
      li_mod->is_empty( ) = abap_true ).

  ENDMETHOD.
  METHOD merge.

    mo_json_a = normalize_input(
      iv_json = iv_json_a
      io_json = io_json_a ).

    mo_json_b = normalize_input(
      iv_json = iv_json_b
      io_json = io_json_b ).

    " Start with first JSON...
    mo_insert = mo_json_a.

    " ...and add all nodes from second JSON
    diff_b_a( '/' ).

    ro_json ?= mo_insert.

    delete_empty_nodes(
      io_json              = ro_json
      iv_keep_empty_arrays = iv_keep_empty_arrays ).

  ENDMETHOD.
  METHOD new.
    CREATE OBJECT ro_instance.
  ENDMETHOD.
  METHOD normalize_input.

    IF boolc( iv_json IS INITIAL ) = boolc( io_json IS INITIAL ).
      z2ui5_cx_ajson_error=>raise( 'Either supply JSON string or instance, but not both' ).
    ENDIF.

    IF iv_json IS NOT INITIAL.
      ro_json = z2ui5_cl_ajson=>parse( iv_json ).
    ELSEIF io_json IS NOT INITIAL.
      ro_json = io_json.
    ELSE.
      z2ui5_cx_ajson_error=>raise( 'Supply either JSON string or instance' ).
    ENDIF.

  ENDMETHOD.
  METHOD sort.

    DATA lo_json TYPE REF TO z2ui5_if_ajson.

    lo_json = normalize_input(
      iv_json = iv_json
      io_json = io_json ).

    " Nodes are parsed into a sorted table, so no explicit sorting required
    rv_sorted = lo_json->stringify( 2 ).

  ENDMETHOD.
ENDCLASS.

CLASS kHGwlQWxBzogSXFKnfTxTFhfUGDgXz IMPLEMENTATION. "DEPRECATED
  METHOD constructor.

    DATA ls_mapping_field LIKE LINE OF mt_mapping_fields.

    LOOP AT it_mapping_fields INTO ls_mapping_field.
      ls_mapping_field-abap = to_upper( ls_mapping_field-abap ).
      INSERT ls_mapping_field INTO TABLE mt_mapping_fields.
    ENDLOOP.

  ENDMETHOD.
  METHOD z2ui5_if_ajson_mapping~to_abap.

    DATA ls_mapping_field LIKE LINE OF mt_mapping_fields.

    READ TABLE mt_mapping_fields INTO ls_mapping_field
      WITH KEY json COMPONENTS json = iv_name.
    IF sy-subrc = 0.
      rv_result = ls_mapping_field-abap.
    ENDIF.

  ENDMETHOD.
  METHOD z2ui5_if_ajson_mapping~to_json.

    DATA lv_field TYPE string.
    DATA ls_mapping_field LIKE LINE OF mt_mapping_fields.

    lv_field = to_upper( iv_name ).

    READ TABLE mt_mapping_fields INTO ls_mapping_field
      WITH KEY abap COMPONENTS abap = lv_field.
    IF sy-subrc = 0.
      rv_result = ls_mapping_field-json.
    ENDIF.

  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~rename_node.

  ENDMETHOD.

ENDCLASS.

CLASS kHGwlQWxBzogSXFKnfTxcwrelrEIET IMPLEMENTATION.

  METHOD constructor.
    mt_rename_map = it_rename_map.
    mv_rename_by = iv_rename_by.
  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~to_abap.
  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~to_json.
  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~rename_node.

    DATA lv_full_path TYPE string.
    DATA lv_pair_found TYPE abap_bool.
    FIELD-SYMBOLS <r> LIKE LINE OF mt_rename_map.

    CASE mv_rename_by.
      WHEN z2ui5_cl_ajson_mapping=>rename_by-attr_name.
        READ TABLE mt_rename_map ASSIGNING <r> WITH TABLE KEY by_name COMPONENTS from = cv_name.
        lv_pair_found = boolc( sy-subrc = 0 ).
      WHEN z2ui5_cl_ajson_mapping=>rename_by-full_path.
        lv_full_path = is_node-path && cv_name.
        READ TABLE mt_rename_map ASSIGNING <r> WITH TABLE KEY by_name COMPONENTS from = lv_full_path.
        lv_pair_found = boolc( sy-subrc = 0 ).
      WHEN z2ui5_cl_ajson_mapping=>rename_by-pattern.
        lv_full_path = is_node-path && cv_name.
        LOOP AT mt_rename_map ASSIGNING <r>.
          IF lv_full_path CP <r>-from.
            lv_pair_found = abap_true.
            EXIT.
          ENDIF.
        ENDLOOP.
      WHEN OTHERS.
        lv_pair_found = abap_false. " No rename
    ENDCASE.

    IF lv_pair_found = abap_true.
      cv_name = <r>-to.
    ENDIF.

  ENDMETHOD.

ENDCLASS.

CLASS kHGwlQWxBzogSXFKnfTxayhtkOTSGN IMPLEMENTATION.
  METHOD constructor.

    mi_mapping_fields = z2ui5_cl_ajson_mapping=>create_field_mapping( it_mapping_fields ).

  ENDMETHOD.
  METHOD z2ui5_if_ajson_mapping~to_abap.

    rv_result = mi_mapping_fields->to_abap( iv_path = iv_path
                                            iv_name = iv_name ).

  ENDMETHOD.
  METHOD z2ui5_if_ajson_mapping~to_json.

    rv_result = mi_mapping_fields->to_json( iv_path = iv_path
                                            iv_name = iv_name ).

    IF rv_result IS NOT INITIAL. " Mapping found
      RETURN.
    ENDIF.

    rv_result = to_upper( iv_name ).

  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~rename_node.

    cv_name = to_upper( cv_name ).

  ENDMETHOD.

ENDCLASS.
CLASS kHGwlQWxBzogSXFKnfTxIaLFAtEmIg IMPLEMENTATION.
  METHOD constructor.

    mi_mapping_fields = z2ui5_cl_ajson_mapping=>create_field_mapping( it_mapping_fields ).

  ENDMETHOD.
  METHOD z2ui5_if_ajson_mapping~to_abap.

    rv_result = mi_mapping_fields->to_abap( iv_path = iv_path
                                            iv_name = iv_name ).

  ENDMETHOD.
  METHOD z2ui5_if_ajson_mapping~to_json.

    rv_result = mi_mapping_fields->to_json( iv_path = iv_path
                                            iv_name = iv_name ).

    IF rv_result IS NOT INITIAL. " Mapping found
      RETURN.
    ENDIF.

    rv_result = to_lower( iv_name ).

  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~rename_node.

    cv_name = to_lower( cv_name ).

  ENDMETHOD.

ENDCLASS.
CLASS kHGwlQWxBzogSXFKnfTxYWDnXPYsQA IMPLEMENTATION. "DEPRECATED
  METHOD constructor.

    mi_mapping_fields   = z2ui5_cl_ajson_mapping=>create_field_mapping( it_mapping_fields ).
    mv_first_json_upper = iv_first_json_upper.

  ENDMETHOD.
  METHOD z2ui5_if_ajson_mapping~to_abap.

    rv_result = mi_mapping_fields->to_abap( iv_path = iv_path
                                            iv_name = iv_name ).

    IF rv_result IS NOT INITIAL. " Mapping found
      RETURN.
    ENDIF.

    rv_result = iv_name.

    REPLACE ALL OCCURRENCES OF REGEX `([a-z])([A-Z])` IN rv_result WITH `$1_$2`.

  ENDMETHOD.
  METHOD z2ui5_if_ajson_mapping~to_json.

    TYPES ty_token TYPE c LENGTH 255.
    DATA lt_tokens TYPE STANDARD TABLE OF ty_token.
    DATA lv_from TYPE i.
    FIELD-SYMBOLS <token> LIKE LINE OF lt_tokens.

    rv_result = mi_mapping_fields->to_json( iv_path = iv_path
                                            iv_name = iv_name ).

    IF rv_result IS NOT INITIAL. " Mapping found
      RETURN.
    ENDIF.

    rv_result = iv_name.

    REPLACE ALL OCCURRENCES OF `__` IN rv_result WITH `*`.

    TRANSLATE rv_result TO LOWER CASE.
    TRANSLATE rv_result USING `/_:_~_`.

    IF mv_first_json_upper = abap_true.
      lv_from = 1.
    ELSE.
      lv_from = 2.
    ENDIF.

    SPLIT rv_result AT `_` INTO TABLE lt_tokens.
    LOOP AT lt_tokens ASSIGNING <token> FROM lv_from.
      TRANSLATE <token>(1) TO UPPER CASE.
    ENDLOOP.

    CONCATENATE LINES OF lt_tokens INTO rv_result.
    REPLACE ALL OCCURRENCES OF `*` IN rv_result WITH `_`.

  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~rename_node.

  ENDMETHOD.

ENDCLASS.

CLASS kHGwlQWxBzogSXFKnfTxoAlevhaDMg IMPLEMENTATION.

  METHOD constructor.
    mt_queue = it_queue.
  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~rename_node.

    DATA ls_node LIKE is_node.
    DATA li_mapper LIKE LINE OF mt_queue.

    ls_node = is_node.

    LOOP AT mt_queue INTO li_mapper.
      li_mapper->rename_node(
        EXPORTING
          is_node = ls_node
        CHANGING
          cv_name = cv_name ).
      ls_node-name = cv_name.
    ENDLOOP.

  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~to_abap.

  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~to_json.

  ENDMETHOD.

ENDCLASS.

CLASS kHGwlQWxBzogSXFKnfTxrCLylKulMM IMPLEMENTATION.

  METHOD z2ui5_if_ajson_mapping~rename_node.

    REPLACE ALL OCCURRENCES OF REGEX `([a-z])([A-Z])` IN cv_name WITH `$1_$2`.
    cv_name = to_lower( cv_name ).

  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~to_abap.

  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~to_json.

  ENDMETHOD.

ENDCLASS.

CLASS kHGwlQWxBzogSXFKnfTxWRsLzEdjUi IMPLEMENTATION.

  METHOD constructor.
    mv_first_json_upper = iv_first_json_upper.
  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~rename_node.

    TYPES lty_token TYPE c LENGTH 255.
    CONSTANTS lc_forced_underscore_marker TYPE c LENGTH 1 VALUE cl_abap_char_utilities=>horizontal_tab.

    DATA lt_tokens TYPE STANDARD TABLE OF lty_token.
    DATA lv_from TYPE i.
    FIELD-SYMBOLS <token> LIKE LINE OF lt_tokens.

    IF mv_first_json_upper = abap_true.
      lv_from = 1.
    ELSE.
      lv_from = 2.
    ENDIF.
    REPLACE ALL OCCURRENCES OF `__` IN cv_name WITH lc_forced_underscore_marker. " Force underscore

    SPLIT cv_name AT `_` INTO TABLE lt_tokens.
    DELETE lt_tokens WHERE table_line IS INITIAL.
    LOOP AT lt_tokens ASSIGNING <token> FROM lv_from.
      TRANSLATE <token>+0(1) TO UPPER CASE.
    ENDLOOP.

    CONCATENATE LINES OF lt_tokens INTO cv_name.
    REPLACE ALL OCCURRENCES OF lc_forced_underscore_marker IN cv_name WITH `_`.

  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~to_abap.

  ENDMETHOD.

  METHOD z2ui5_if_ajson_mapping~to_json.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_ajson_mapping IMPLEMENTATION.
  METHOD create_camel_case.

    CREATE OBJECT ri_mapping TYPE kHGwlQWxBzogSXFKnfTxYWDnXPYsQA
      EXPORTING
        it_mapping_fields   = it_mapping_fields
        iv_first_json_upper = iv_first_json_upper.

  ENDMETHOD.
  METHOD create_compound_mapper.

    DATA lt_queue TYPE z2ui5_if_ajson_mapping=>ty_table_of.

    APPEND ii_mapper1 TO lt_queue.
    APPEND ii_mapper2 TO lt_queue.
    APPEND ii_mapper3 TO lt_queue.
    APPEND LINES OF it_more TO lt_queue.
    DELETE lt_queue WHERE table_line IS INITIAL.

    CREATE OBJECT ri_mapping TYPE kHGwlQWxBzogSXFKnfTxoAlevhaDMg
      EXPORTING
        it_queue = lt_queue.

  ENDMETHOD.
  METHOD create_field_mapping.

    CREATE OBJECT ri_mapping TYPE kHGwlQWxBzogSXFKnfTxTFhfUGDgXz
      EXPORTING
        it_mapping_fields = it_mapping_fields.

  ENDMETHOD.
  METHOD create_lower_case.

    CREATE OBJECT ri_mapping TYPE kHGwlQWxBzogSXFKnfTxIaLFAtEmIg
      EXPORTING
        it_mapping_fields = it_mapping_fields.

  ENDMETHOD.
  METHOD create_rename.

    CREATE OBJECT ri_mapping TYPE kHGwlQWxBzogSXFKnfTxcwrelrEIET
      EXPORTING
        it_rename_map = it_rename_map
        iv_rename_by  = iv_rename_by.

  ENDMETHOD.
  METHOD create_to_camel_case.

    CREATE OBJECT ri_mapping TYPE kHGwlQWxBzogSXFKnfTxWRsLzEdjUi
      EXPORTING
        iv_first_json_upper = iv_first_json_upper.

  ENDMETHOD.
  METHOD create_to_snake_case.

    CREATE OBJECT ri_mapping TYPE kHGwlQWxBzogSXFKnfTxrCLylKulMM.

  ENDMETHOD.
  METHOD create_upper_case.

    CREATE OBJECT ri_mapping TYPE kHGwlQWxBzogSXFKnfTxayhtkOTSGN
      EXPORTING
        it_mapping_fields = it_mapping_fields.

  ENDMETHOD.
ENDCLASS.

CLASS kHGwlWxTjQFgGKrGWSYparIhEaaLQd DEFINITION DEFERRED.
CLASS kHGwlWxTjQFgGKrGWSYpKlBZxFUUhA DEFINITION DEFERRED.
CLASS kHGwlWxTjQFgGKrGWSYpHkqTfrNjtW DEFINITION DEFERRED.
**********************************************************************
*  FILTER EMPTY VALUES
**********************************************************************

* renamed: z2ui5_cl_ajson_filter_lib :: lcl_empty_filter
CLASS kHGwlWxTjQFgGKrGWSYpHkqTfrNjtW DEFINITION FINAL.
  PUBLIC SECTION.
    INTERFACES z2ui5_if_ajson_filter.
ENDCLASS.

CLASS kHGwlWxTjQFgGKrGWSYpHkqTfrNjtW IMPLEMENTATION.
  METHOD z2ui5_if_ajson_filter~keep_node.

    rv_keep = boolc(
      ( iv_visit = z2ui5_if_ajson_filter=>visit_type-value AND is_node-value IS NOT INITIAL ) OR
      ( iv_visit <> z2ui5_if_ajson_filter=>visit_type-value AND is_node-children > 0 ) ).
    " children = 0 on open for initially empty nodes and on close for filtered ones

  ENDMETHOD.
ENDCLASS.

**********************************************************************
*  FILTER PREDEFINED PATHS
**********************************************************************

* renamed: z2ui5_cl_ajson_filter_lib :: lcl_paths_filter
CLASS kHGwlWxTjQFgGKrGWSYpKlBZxFUUhA DEFINITION FINAL.
  PUBLIC SECTION.
    INTERFACES z2ui5_if_ajson_filter.
    METHODS constructor
      IMPORTING
        it_skip_paths     TYPE string_table OPTIONAL
        iv_skip_paths     TYPE string OPTIONAL
        iv_pattern_search TYPE abap_bool
      RAISING
        z2ui5_cx_ajson_error.
  PRIVATE SECTION.
    DATA mt_skip_paths TYPE HASHED TABLE OF string WITH UNIQUE KEY table_line.
    DATA mv_pattern_search TYPE abap_bool.
ENDCLASS.

CLASS kHGwlWxTjQFgGKrGWSYpKlBZxFUUhA IMPLEMENTATION.

  METHOD z2ui5_if_ajson_filter~keep_node.

    DATA lv_full_path TYPE string.
    FIELD-SYMBOLS <p> LIKE LINE OF mt_skip_paths.

    lv_full_path = is_node-path && is_node-name.

    IF mv_pattern_search = abap_true.
      rv_keep = abap_true.
      LOOP AT mt_skip_paths ASSIGNING <p>.
        IF lv_full_path CP <p>.
          rv_keep = abap_false.
          EXIT.
        ENDIF.
      ENDLOOP.
    ELSE.
      READ TABLE mt_skip_paths WITH KEY table_line = lv_full_path TRANSPORTING NO FIELDS.
      rv_keep = boolc( sy-subrc <> 0 ).
    ENDIF.

  ENDMETHOD.

  METHOD constructor.

    DATA lv_s TYPE string.
    DATA lt_tab TYPE string_table.
    FIELD-SYMBOLS <s> TYPE string.

    IF boolc( iv_skip_paths IS INITIAL ) = boolc( it_skip_paths IS INITIAL ). " XOR
      z2ui5_cx_ajson_error=>raise( 'no filter path specified' ).
    ENDIF.

    LOOP AT it_skip_paths INTO lv_s.
      lv_s = condense( lv_s ).
      APPEND lv_s TO lt_tab.
    ENDLOOP.

    IF iv_skip_paths IS NOT INITIAL.
      SPLIT iv_skip_paths AT ',' INTO TABLE lt_tab.
      LOOP AT lt_tab ASSIGNING <s>.
        IF <s> IS INITIAL.
          DELETE lt_tab INDEX sy-tabix.
          CONTINUE.
        ENDIF.
        <s> = condense( <s> ).
      ENDLOOP.
    ENDIF.

    SORT lt_tab BY table_line.
    DELETE ADJACENT DUPLICATES FROM lt_tab.

    mt_skip_paths = lt_tab.
    mv_pattern_search = iv_pattern_search.

  ENDMETHOD.

ENDCLASS.

**********************************************************************
* MULTI FILTER
**********************************************************************

* renamed: z2ui5_cl_ajson_filter_lib :: lcl_and_filter
CLASS kHGwlWxTjQFgGKrGWSYparIhEaaLQd DEFINITION FINAL.
  PUBLIC SECTION.
    INTERFACES z2ui5_if_ajson_filter.
    METHODS constructor
      IMPORTING
        it_filters TYPE z2ui5_if_ajson_filter=>ty_filter_tab
      RAISING
        z2ui5_cx_ajson_error.
  PRIVATE SECTION.
    DATA mt_filters TYPE z2ui5_if_ajson_filter=>ty_filter_tab.
ENDCLASS.

CLASS kHGwlWxTjQFgGKrGWSYparIhEaaLQd IMPLEMENTATION.

  METHOD z2ui5_if_ajson_filter~keep_node.

    DATA li_filter LIKE LINE OF mt_filters.

    rv_keep = abap_true.
    LOOP AT mt_filters INTO li_filter.
      rv_keep = li_filter->keep_node(
        is_node  = is_node
        iv_visit = iv_visit ).
      IF rv_keep = abap_false.
        RETURN.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD constructor.

    DATA li_filter LIKE LINE OF it_filters.

    LOOP AT it_filters INTO li_filter WHERE table_line IS BOUND.
      APPEND li_filter TO mt_filters.
    ENDLOOP.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_ajson_filter_lib IMPLEMENTATION.
  METHOD create_and_filter.
    CREATE OBJECT ri_filter TYPE kHGwlWxTjQFgGKrGWSYparIhEaaLQd
      EXPORTING
        it_filters = it_filters.
  ENDMETHOD.
  METHOD create_empty_filter.
    CREATE OBJECT ri_filter TYPE kHGwlWxTjQFgGKrGWSYpHkqTfrNjtW.
  ENDMETHOD.
  METHOD create_path_filter.
    CREATE OBJECT ri_filter TYPE kHGwlWxTjQFgGKrGWSYpKlBZxFUUhA
      EXPORTING
        iv_pattern_search = iv_pattern_search
        it_skip_paths     = it_skip_paths
        iv_skip_paths     = iv_skip_paths.
  ENDMETHOD.
ENDCLASS.

CLASS kHGwlzUrcuWxYGvxpUmmucOpllUiAS DEFINITION DEFERRED.
CLASS kHGwlzUrcuWxYGvxpUmmhFTcRDbOtm DEFINITION DEFERRED.
CLASS kHGwlzUrcuWxYGvxpUmmlwblMIpVBS DEFINITION DEFERRED.
INTERFACE iUFTszUrcuWxYGvxpUmmtzVIYRIbuu DEFERRED.
CLASS kHGwlzUrcuWxYGvxpUmmeJqampzabz DEFINITION DEFERRED.
CLASS kHGwlzUrcuWxYGvxpUmmXxNdxsjJjI DEFINITION DEFERRED.
CLASS kHGwlzUrcuWxYGvxpUmmFgyFungUrS DEFINITION DEFERRED.
CLASS kHGwlzUrcuWxYGvxpUmmfipvepHQnc DEFINITION DEFERRED.
CLASS kHGwlzUrcuWxYGvxpUmmzByNvbZmNu DEFINITION DEFERRED.
INTERFACE iUFTszUrcuWxYGvxpUmmdAMURRqLkF DEFERRED.
**********************************************************************
* UTILS
**********************************************************************

* renamed: z2ui5_cl_ajson :: lif_kind
INTERFACE iUFTszUrcuWxYGvxpUmmdAMURRqLkF.

  TYPES ty_kind TYPE c LENGTH 1.

  CONSTANTS:
    any         TYPE ty_kind VALUE cl_abap_typedescr=>typekind_any,
    date        TYPE ty_kind VALUE cl_abap_typedescr=>typekind_date,
    time        TYPE ty_kind VALUE cl_abap_typedescr=>typekind_time,
    packed      TYPE ty_kind VALUE cl_abap_typedescr=>typekind_packed,
    table       TYPE ty_kind VALUE cl_abap_typedescr=>typekind_table,
    struct_flat TYPE ty_kind VALUE cl_abap_typedescr=>typekind_struct1,
    struct_deep TYPE ty_kind VALUE cl_abap_typedescr=>typekind_struct2,
    data_ref    TYPE ty_kind VALUE cl_abap_typedescr=>typekind_dref,
    object_ref  TYPE ty_kind VALUE cl_abap_typedescr=>typekind_oref,
    enum        TYPE ty_kind VALUE 'k'. " cl_abap_typedescr=>typekind_enum not in lower releases

  CONSTANTS:
    BEGIN OF numeric,
      int1       TYPE ty_kind VALUE cl_abap_typedescr=>typekind_int1,
      int2       TYPE ty_kind VALUE cl_abap_typedescr=>typekind_int2,
      int4       TYPE ty_kind VALUE cl_abap_typedescr=>typekind_int,
      int8       TYPE ty_kind VALUE '8', " cl_abap_typedescr=>typekind_int8 not in lower releases
      float      TYPE ty_kind VALUE cl_abap_typedescr=>typekind_float,
      packed     TYPE ty_kind VALUE cl_abap_typedescr=>typekind_packed,
      decfloat16 TYPE ty_kind VALUE cl_abap_typedescr=>typekind_decfloat16,
      decfloat34 TYPE ty_kind VALUE cl_abap_typedescr=>typekind_decfloat34,
    END OF numeric.

  CONSTANTS:
    BEGIN OF texts,
      char   TYPE ty_kind VALUE cl_abap_typedescr=>typekind_char,
      numc   TYPE ty_kind VALUE cl_abap_typedescr=>typekind_num,
      string TYPE ty_kind VALUE cl_abap_typedescr=>typekind_string,
    END OF texts.

  CONSTANTS:
    BEGIN OF binary,
      hex     TYPE ty_kind VALUE cl_abap_typedescr=>typekind_hex,
      xstring TYPE ty_kind VALUE cl_abap_typedescr=>typekind_xstring,
    END OF binary.

  CONSTANTS:
    BEGIN OF deep_targets,
      table       TYPE ty_kind VALUE cl_abap_typedescr=>typekind_table,
      struct_flat TYPE ty_kind VALUE cl_abap_typedescr=>typekind_struct1,
      struct_deep TYPE ty_kind VALUE cl_abap_typedescr=>typekind_struct2,
      data_ref    TYPE ty_kind VALUE cl_abap_typedescr=>typekind_dref,
      object_ref  TYPE ty_kind VALUE cl_abap_typedescr=>typekind_oref,
    END OF deep_targets.

ENDINTERFACE.

* renamed: z2ui5_cl_ajson :: lcl_utils
CLASS kHGwlzUrcuWxYGvxpUmmzByNvbZmNu DEFINITION FINAL.
  PUBLIC SECTION.

    CLASS-METHODS normalize_path
      IMPORTING
        iv_path        TYPE string
      RETURNING
        VALUE(rv_path) TYPE string.
    CLASS-METHODS split_path
      IMPORTING
        iv_path             TYPE string
      RETURNING
        VALUE(rv_path_name) TYPE z2ui5_if_ajson_types=>ty_path_name.
    CLASS-METHODS validate_array_index
      IMPORTING
        iv_path         TYPE string
        iv_index        TYPE string
      RETURNING
        VALUE(rv_index) TYPE i
      RAISING
        z2ui5_cx_ajson_error.
    CLASS-METHODS string_to_xstring_utf8
      IMPORTING
        iv_str         TYPE string
      RETURNING
        VALUE(rv_xstr) TYPE xstring.
    CLASS-METHODS xstring_to_string_utf8
      IMPORTING
        iv_xstr       TYPE xstring
      RETURNING
        VALUE(rv_str) TYPE string.
    CLASS-METHODS any_to_xstring
      IMPORTING
        iv_data        TYPE any
      RETURNING
        VALUE(rv_xstr) TYPE xstring
      RAISING
        z2ui5_cx_ajson_error.
    CLASS-METHODS any_to_string
      IMPORTING
        iv_data       TYPE any
      RETURNING
        VALUE(rv_str) TYPE string
      RAISING
        z2ui5_cx_ajson_error.

ENDCLASS.

CLASS kHGwlzUrcuWxYGvxpUmmzByNvbZmNu IMPLEMENTATION.

  METHOD string_to_xstring_utf8.

    DATA lo_conv TYPE REF TO object.
    DATA lv_out_ce TYPE string.

    lv_out_ce = 'CL_ABAP_CONV_OUT_CE'.

    TRY.
        CALL METHOD ('CL_ABAP_CONV_CODEPAGE')=>create_out
          RECEIVING
            instance = lo_conv.
        CALL METHOD lo_conv->('IF_ABAP_CONV_OUT~CONVERT')
          EXPORTING
            source = iv_str
          RECEIVING
            result = rv_xstr.
      CATCH cx_sy_dyn_call_illegal_class.
        CALL METHOD (lv_out_ce)=>create
          EXPORTING
            encoding = 'UTF-8'
          RECEIVING
            conv     = lo_conv.
        CALL METHOD lo_conv->('CONVERT')
          EXPORTING
            data   = iv_str
          IMPORTING
            buffer = rv_xstr.
    ENDTRY.

  ENDMETHOD.

  METHOD xstring_to_string_utf8.

    DATA lo_conv TYPE REF TO object.
    DATA lv_in_ce TYPE string.

    lv_in_ce = 'CL_ABAP_CONV_IN_CE'.

    TRY.
        CALL METHOD ('CL_ABAP_CONV_CODEPAGE')=>create_in
          RECEIVING
            instance = lo_conv.
        CALL METHOD lo_conv->('IF_ABAP_CONV_IN~CONVERT')
          EXPORTING
            source = iv_xstr
          RECEIVING
            result = rv_str.
      CATCH cx_sy_dyn_call_illegal_class.
        CALL METHOD (lv_in_ce)=>create
          EXPORTING
            encoding = 'UTF-8'
          RECEIVING
            conv     = lo_conv.
        CALL METHOD lo_conv->('CONVERT')
          EXPORTING
            data   = iv_xstr
          IMPORTING
            buffer = rv_str.
    ENDTRY.

  ENDMETHOD.

  METHOD validate_array_index.

    IF NOT iv_index CO '0123456789'.
      z2ui5_cx_ajson_error=>raise( |Cannot add non-numeric key [{ iv_index }] to array [{ iv_path }]| ).
    ENDIF.
    rv_index = iv_index.
    IF rv_index = 0.
      z2ui5_cx_ajson_error=>raise( |Cannot add zero key to array [{ iv_path }]| ).
    ENDIF.

  ENDMETHOD.

  METHOD normalize_path.

    rv_path = iv_path.
    IF strlen( rv_path ) = 0.
      rv_path = '/'.
    ENDIF.
    IF rv_path+0(1) <> '/'.
      rv_path = '/' && rv_path.
    ENDIF.
    IF substring( val = rv_path
                  off = strlen( rv_path ) - 1 ) <> '/'.
      rv_path = rv_path && '/'.
    ENDIF.

  ENDMETHOD.

  METHOD split_path.

    DATA lv_offs TYPE i.
    DATA lv_len TYPE i.
    DATA lv_trim_slash TYPE i.

    lv_len = strlen( iv_path ).
    IF lv_len = 0 OR iv_path = '/'.
      RETURN. " empty path is the alias for root item = '' + ''
    ENDIF.

    IF substring( val = iv_path
                  off = lv_len - 1 ) = '/'.
      lv_trim_slash = 1. " ignore last '/'
    ENDIF.

    lv_offs = find( val = reverse( iv_path )
                    sub = '/'
                    off = lv_trim_slash ).
    IF lv_offs = -1.
      lv_offs  = lv_len. " treat whole string as the 'name' part
    ENDIF.
    lv_offs = lv_len - lv_offs.

    rv_path_name-path = normalize_path( substring( val = iv_path
                                                   len = lv_offs ) ).
    rv_path_name-name = substring( val = iv_path
                                   off = lv_offs
                                   len = lv_len - lv_offs - lv_trim_slash ).

  ENDMETHOD.

  METHOD any_to_xstring.
    " supports xstring, char, string, or string_table as input

    DATA lo_type TYPE REF TO cl_abap_typedescr.
    DATA lo_table_type TYPE REF TO cl_abap_tabledescr.
    DATA lv_str TYPE string.

    FIELD-SYMBOLS: <data> TYPE STANDARD TABLE.

    lo_type = cl_abap_typedescr=>describe_by_data( iv_data ).

    CASE lo_type->type_kind.
      WHEN iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>binary-xstring.
        rv_xstr = iv_data.
      WHEN iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>texts-string OR iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>texts-char.
        rv_xstr = string_to_xstring_utf8( iv_data ).
      WHEN iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>table.
        lo_table_type ?= lo_type.
        IF lo_table_type->table_kind <> cl_abap_tabledescr=>tablekind_std.
          z2ui5_cx_ajson_error=>raise( 'Unsupported type of input table (must be standard table)' ).
        ENDIF.
        TRY.
            ASSIGN iv_data TO <data>.
            lv_str = concat_lines_of( table = <data>
                                      sep = cl_abap_char_utilities=>newline ).
            rv_xstr = string_to_xstring_utf8( lv_str ).
          CATCH cx_root.
            z2ui5_cx_ajson_error=>raise( 'Error converting input table (should be string_table)' ).
        ENDTRY.
      WHEN OTHERS.
        z2ui5_cx_ajson_error=>raise( 'Unsupported type of input (must be char, string, string_table, or xstring)' ).
    ENDCASE.

  ENDMETHOD.

  METHOD any_to_string.
    " supports xstring, char, string, or string_table as input

    DATA lo_type TYPE REF TO cl_abap_typedescr.
    DATA lo_table_type TYPE REF TO cl_abap_tabledescr.

    FIELD-SYMBOLS: <data> TYPE STANDARD TABLE.

    lo_type = cl_abap_typedescr=>describe_by_data( iv_data ).

    CASE lo_type->type_kind.
      WHEN iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>binary-xstring.
        rv_str = xstring_to_string_utf8( iv_data ).
      WHEN iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>texts-string OR iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>texts-char.
        rv_str = iv_data.
      WHEN iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>table.
        lo_table_type ?= lo_type.
        IF lo_table_type->table_kind <> cl_abap_tabledescr=>tablekind_std.
          z2ui5_cx_ajson_error=>raise( 'Unsupported type of input table (must be standard table)' ).
        ENDIF.
        TRY.
            ASSIGN iv_data TO <data>.
            rv_str = concat_lines_of( table = <data>
                                      sep = cl_abap_char_utilities=>newline ).
          CATCH cx_root.
            z2ui5_cx_ajson_error=>raise( 'Error converting input table (should be string_table)' ).
        ENDTRY.
      WHEN OTHERS.
        z2ui5_cx_ajson_error=>raise( 'Unsupported type of input (must be char, string, string_table, or xstring)' ).
    ENDCASE.

  ENDMETHOD.

ENDCLASS.
**********************************************************************
* PARSER
**********************************************************************

* renamed: z2ui5_cl_ajson :: lcl_json_parser
CLASS kHGwlzUrcuWxYGvxpUmmfipvepHQnc DEFINITION FINAL.
  PUBLIC SECTION.

    METHODS parse
      IMPORTING
        iv_json             TYPE any
        iv_keep_item_order  TYPE abap_bool DEFAULT abap_false
      RETURNING
        VALUE(rt_json_tree) TYPE z2ui5_if_ajson_types=>ty_nodes_tt
      RAISING
        z2ui5_cx_ajson_error.

  PRIVATE SECTION.

    TYPES:
      ty_stack_tt TYPE STANDARD TABLE OF REF TO z2ui5_if_ajson_types=>ty_node.

    DATA mt_stack TYPE ty_stack_tt.
    DATA mv_stack_path TYPE string.
    DATA mv_keep_item_order TYPE abap_bool.

    METHODS raise
      IMPORTING
        iv_error TYPE string
      RAISING
        z2ui5_cx_ajson_error.

    METHODS _parse
      IMPORTING
        iv_json             TYPE xstring
      RETURNING
        VALUE(rt_json_tree) TYPE z2ui5_if_ajson_types=>ty_nodes_tt
      RAISING
        z2ui5_cx_ajson_error cx_dynamic_check. " cx_sxml_error is not released on Steampunk #153

    METHODS _get_location
      IMPORTING
        iv_json            TYPE string
        iv_offset          TYPE i
      RETURNING
        VALUE(rv_location) TYPE string.

ENDCLASS.

CLASS kHGwlzUrcuWxYGvxpUmmfipvepHQnc IMPLEMENTATION.

  METHOD parse.
    DATA lx_sxml_parse TYPE REF TO cx_sxml_parse_error.
    DATA lx_sxml TYPE REF TO cx_dynamic_check.
    DATA lv_location TYPE string.
    DATA lv_json TYPE xstring.

    mv_keep_item_order = iv_keep_item_order.

    lv_json = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>any_to_xstring( iv_json ).

    TRY.
        " TODO sane JSON check:
        " JSON can be true,false,null,(-)digits
        " or start from " or from {
        rt_json_tree = _parse( lv_json ).
      CATCH cx_sxml_parse_error INTO lx_sxml_parse.
        lv_location = _get_location(
        iv_json   = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>any_to_string( iv_json )
        iv_offset = lx_sxml_parse->xml_offset ).
        z2ui5_cx_ajson_error=>raise(
        iv_msg      = |Json parsing error (SXML): { lx_sxml_parse->get_text( ) }|
        iv_location = lv_location ).
      CATCH cx_dynamic_check INTO lx_sxml. " cx_sxml_error
        z2ui5_cx_ajson_error=>raise(
        iv_msg      = |Json parsing error (SXML): { lx_sxml->get_text( ) }|
        iv_location = '@PARSER' ).
    ENDTRY.

  ENDMETHOD.

  METHOD _get_location.

    DATA lv_json TYPE string.
    DATA lv_offset TYPE i.
    DATA lt_text TYPE TABLE OF string.
    DATA lv_text TYPE string.
    DATA lv_line TYPE i.
    DATA lv_pos TYPE i.

    lv_offset = iv_offset.
    IF lv_offset < 0.
      lv_offset = 0.
    ENDIF.
    IF lv_offset > strlen( iv_json ).
      lv_offset = strlen( iv_json ).
    ENDIF.

    lv_json = iv_json(lv_offset).

    REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>cr_lf
      IN lv_json WITH cl_abap_char_utilities=>newline.

    SPLIT lv_json AT cl_abap_char_utilities=>newline INTO TABLE lt_text.

    lv_line = lines( lt_text ).
    IF lv_line = 0.
      lv_line = 1.
      lv_pos = 1.
    ELSE.
      READ TABLE lt_text INDEX lv_line INTO lv_text.
      lv_pos = strlen( lv_text ) + 1.
    ENDIF.

    rv_location = |Line { lv_line }, Offset { lv_pos }|.

  ENDMETHOD.

  METHOD _parse.

    DATA lo_reader TYPE REF TO if_sxml_reader.
    DATA lr_stack_top LIKE LINE OF mt_stack.
    DATA lo_node TYPE REF TO if_sxml_node.
    FIELD-SYMBOLS <item> LIKE LINE OF rt_json_tree.

    CLEAR mt_stack.
    CLEAR mv_stack_path.
    IF iv_json IS INITIAL.
      RETURN.
    ENDIF.
    lo_reader = cl_sxml_string_reader=>create( iv_json ).

    " TODO: self protection, check non-empty, check starting from object ...

    DO.
      lo_node = lo_reader->read_next_node( ).
      IF lo_node IS NOT BOUND.
        EXIT.
      ENDIF.
      CASE lo_node->type.
        WHEN if_sxml_node=>co_nt_element_open.
          DATA lt_attributes TYPE if_sxml_attribute=>attributes.
          DATA lo_attr LIKE LINE OF lt_attributes.
          DATA lo_open TYPE REF TO if_sxml_open_element.
          lo_open ?= lo_node.

          APPEND INITIAL LINE TO rt_json_tree ASSIGNING <item>.

          <item>-type = lo_open->qname-name.

          READ TABLE mt_stack INDEX 1 INTO lr_stack_top.
          IF sy-subrc = 0.
            " Using string is faster than rebuilding path from stack
            <item>-path = mv_stack_path.
            lr_stack_top->children = lr_stack_top->children + 1.

            IF lr_stack_top->type = `array`. " This is parser type not ajson type
              <item>-name = |{ lr_stack_top->children }|.
              <item>-index = lr_stack_top->children.
            ELSE.
              lt_attributes = lo_open->get_attributes( ).
              LOOP AT lt_attributes INTO lo_attr.
                IF lo_attr->qname-name = 'name' AND lo_attr->value_type = if_sxml_value=>co_vt_text.
                  <item>-name = lo_attr->get_value( ).
                ENDIF.
              ENDLOOP.
              IF mv_keep_item_order = abap_true.
                <item>-order = lr_stack_top->children.
              ENDIF.
            ENDIF.
            IF <item>-name IS INITIAL.
              raise( 'Node without name (maybe not JSON)' ).
            ENDIF.
          ENDIF.

          GET REFERENCE OF <item> INTO lr_stack_top.
          INSERT lr_stack_top INTO mt_stack INDEX 1.
          " add path component
          mv_stack_path = mv_stack_path && <item>-name && '/'.

        WHEN if_sxml_node=>co_nt_element_close.
          DATA lo_close TYPE REF TO if_sxml_close_element.
          lo_close ?= lo_node.

          READ TABLE mt_stack INDEX 1 INTO lr_stack_top.
          DELETE mt_stack INDEX 1.
          IF lo_close->qname-name <> lr_stack_top->type.
            raise( 'Unexpected closing node type' ).
          ENDIF.

          " remove last path component
          mv_stack_path = substring( val = mv_stack_path
                                     len = find( val = mv_stack_path sub = '/' occ = -2 ) + 1 ).
        WHEN if_sxml_node=>co_nt_value.
          DATA lo_value TYPE REF TO if_sxml_value_node.
          lo_value ?= lo_node.

          <item>-value = lo_value->get_value( ).

        WHEN OTHERS.
          raise( 'Unexpected node type' ).
      ENDCASE.
    ENDDO.

    IF lines( mt_stack ) > 0.
      raise( 'Unexpected end of data' ).
    ENDIF.

  ENDMETHOD.

  METHOD raise.

    z2ui5_cx_ajson_error=>raise(
      iv_location = mv_stack_path
      iv_msg      = |JSON PARSER: { iv_error } @ { mv_stack_path }| ).

  ENDMETHOD.

ENDCLASS.

**********************************************************************
* SERIALIZER
**********************************************************************

* renamed: z2ui5_cl_ajson :: lcl_json_serializer
CLASS kHGwlzUrcuWxYGvxpUmmFgyFungUrS DEFINITION FINAL CREATE PRIVATE.
  PUBLIC SECTION.

    CLASS-METHODS stringify
      IMPORTING
        it_json_tree          TYPE z2ui5_if_ajson_types=>ty_nodes_ts
        iv_indent             TYPE i DEFAULT 0
        iv_keep_item_order    TYPE abap_bool DEFAULT abap_false
      RETURNING
        VALUE(rv_json_string) TYPE string
      RAISING
        z2ui5_cx_ajson_error.

    CLASS-METHODS class_constructor.

  PRIVATE SECTION.

    CLASS-DATA gv_comma_with_lf TYPE string.

    DATA mt_json_tree TYPE z2ui5_if_ajson_types=>ty_nodes_ts.
    DATA mv_keep_item_order TYPE abap_bool.
    DATA mt_buffer TYPE string_table.
    DATA mv_indent_step TYPE i.
    DATA mv_level TYPE i.

    CLASS-METHODS escape_string
      IMPORTING
        iv_unescaped      TYPE string
      RETURNING
        VALUE(rv_escaped) TYPE string.

    METHODS _stringify
      RETURNING
        VALUE(rv_json_string) TYPE string
      RAISING
        z2ui5_cx_ajson_error.

    METHODS stringify_node
      IMPORTING
        is_node TYPE z2ui5_if_ajson_types=>ty_node
      RAISING
        z2ui5_cx_ajson_error.

    METHODS stringify_set
      IMPORTING
        iv_parent_path TYPE string
        iv_array       TYPE abap_bool
      RAISING
        z2ui5_cx_ajson_error.

ENDCLASS.

CLASS kHGwlzUrcuWxYGvxpUmmFgyFungUrS IMPLEMENTATION.

  METHOD class_constructor.
    gv_comma_with_lf = ',' && cl_abap_char_utilities=>newline.
  ENDMETHOD.

  METHOD stringify.

    DATA lo TYPE REF TO kHGwlzUrcuWxYGvxpUmmFgyFungUrS.
    CREATE OBJECT lo.
    lo->mt_json_tree = it_json_tree.
    lo->mv_indent_step = iv_indent.
    lo->mv_keep_item_order = iv_keep_item_order.
    rv_json_string = lo->_stringify( ).

  ENDMETHOD.

  METHOD _stringify.

    FIELD-SYMBOLS <n> LIKE LINE OF mt_json_tree.
    READ TABLE mt_json_tree ASSIGNING <n>
      WITH KEY
        path = ''
        name = ''. " Root
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    stringify_node( <n> ).

    rv_json_string = concat_lines_of( table = mt_buffer ).

  ENDMETHOD.

  METHOD stringify_node.

    DATA lv_item TYPE string.
    DATA lv_indent_prefix TYPE string.

    IF mv_indent_step > 0.
      lv_indent_prefix = repeat( val = ` `
                                 occ = mv_indent_step * mv_level ).
      lv_item = lv_indent_prefix.
    ENDIF.

    IF is_node-name IS NOT INITIAL AND is_node-index IS INITIAL. " Not root, not array item
      IF mv_indent_step > 0.
        lv_item = lv_item && |"{ is_node-name }": |.
      ELSE.
        lv_item = |"{ is_node-name }":|.
      ENDIF.
    ENDIF.

    CASE is_node-type.
      WHEN z2ui5_if_ajson_types=>node_type-array.
        lv_item = lv_item && '['.
      WHEN z2ui5_if_ajson_types=>node_type-object.
        lv_item = lv_item && '{'.
      WHEN z2ui5_if_ajson_types=>node_type-string.
        lv_item = lv_item && |"{ escape_string( is_node-value ) }"|.
      WHEN z2ui5_if_ajson_types=>node_type-boolean OR z2ui5_if_ajson_types=>node_type-number.
        lv_item = lv_item && is_node-value.
      WHEN z2ui5_if_ajson_types=>node_type-null.
        lv_item = lv_item && 'null'.
      WHEN OTHERS.
        z2ui5_cx_ajson_error=>raise(
          iv_msg = |Unexpected type [{ is_node-type }]|
          iv_location = is_node-path && is_node-name ).
    ENDCASE.

    IF mv_indent_step > 0
      AND ( is_node-type = z2ui5_if_ajson_types=>node_type-array OR is_node-type = z2ui5_if_ajson_types=>node_type-object )
      AND is_node-children > 0.
      mv_level = mv_level + 1.
      lv_item = lv_item && cl_abap_char_utilities=>newline.
    ENDIF.

    APPEND lv_item TO mt_buffer.

    " finish complex item

    IF is_node-type = z2ui5_if_ajson_types=>node_type-array OR is_node-type = z2ui5_if_ajson_types=>node_type-object.
      DATA lv_children_path TYPE string.
      DATA lv_tail TYPE string.

      lv_children_path = is_node-path && is_node-name && '/'. " for root: path = '' and name = '', so result is '/'

      CASE is_node-type.
        WHEN z2ui5_if_ajson_types=>node_type-array.
          IF is_node-children > 0.
            stringify_set(
              iv_parent_path = lv_children_path
              iv_array       = abap_true ).
          ENDIF.
          lv_tail = ']'.
        WHEN z2ui5_if_ajson_types=>node_type-object.
          IF is_node-children > 0.
            stringify_set(
              iv_parent_path = lv_children_path
              iv_array       = abap_false ).
          ENDIF.
          lv_tail = '}'.
      ENDCASE.

      IF mv_indent_step > 0 AND is_node-children > 0.
        lv_tail = lv_indent_prefix && lv_tail.
        mv_level = mv_level - 1.
      ENDIF.
      APPEND lv_tail TO mt_buffer.
    ENDIF.

  ENDMETHOD.

  METHOD stringify_set.

    DATA lv_tab_key TYPE string.
    DATA lv_first_done TYPE abap_bool.
    FIELD-SYMBOLS <n> LIKE LINE OF mt_json_tree.

    IF iv_array = abap_true.
      lv_tab_key = 'array_index'. " path + index
    ELSEIF mv_keep_item_order = abap_true.
      lv_tab_key = 'item_order'. " path + order
    ELSE.
      lv_tab_key = 'primary_key'. " path + name
    ENDIF.

    LOOP AT mt_json_tree ASSIGNING <n> USING KEY (lv_tab_key) WHERE path = iv_parent_path.
      IF lv_first_done = abap_false.
        lv_first_done = abap_true.
      ELSEIF mv_indent_step > 0.
        APPEND gv_comma_with_lf TO mt_buffer.
      ELSE.
        APPEND ',' TO mt_buffer.
      ENDIF.
      stringify_node( <n> ).
    ENDLOOP.

    IF mv_indent_step > 0 AND lv_first_done = abap_true. " only of items were in the list
      APPEND cl_abap_char_utilities=>newline TO mt_buffer.
    ENDIF.

  ENDMETHOD.

  METHOD escape_string.

    rv_escaped = iv_unescaped.
    IF rv_escaped CA |"\\\t\n\r|.
      " TODO consider performance ...
      " see also https://www.json.org/json-en.html
      rv_escaped = replace(
        val = rv_escaped
        sub = '\'
        with = '\\'
        occ = 0 ).
      rv_escaped = replace(
        val = rv_escaped
        sub = |\n|
        with = '\n'
        occ = 0 ).
      rv_escaped = replace(
        val = rv_escaped
        sub = |\r|
        with = '\r'
        occ = 0 ).
      rv_escaped = replace(
        val = rv_escaped
        sub = |\t|
        with = '\t'
        occ = 0 ).
      rv_escaped = replace(
        val = rv_escaped
        sub = '"'
        with = '\"'
        occ = 0 ).

    ENDIF.

  ENDMETHOD.

ENDCLASS.
**********************************************************************
* JSON_TO_ABAP
**********************************************************************

* renamed: z2ui5_cl_ajson :: lcl_json_to_abap
CLASS kHGwlzUrcuWxYGvxpUmmXxNdxsjJjI DEFINITION FINAL.
  PUBLIC SECTION.

    METHODS constructor
      IMPORTING
        !iv_corresponding  TYPE abap_bool DEFAULT abap_false
        !ii_custom_mapping TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL.

    METHODS to_abap
      IMPORTING
        it_nodes    TYPE z2ui5_if_ajson_types=>ty_nodes_ts
      CHANGING
        c_container TYPE any
      RAISING
        z2ui5_cx_ajson_error.

    METHODS to_timestamp
      IMPORTING
        iv_value         TYPE z2ui5_if_ajson_types=>ty_node-value
      RETURNING
        VALUE(rv_result) TYPE timestamp
      RAISING
        z2ui5_cx_ajson_error.

    METHODS to_date
      IMPORTING
        iv_value         TYPE z2ui5_if_ajson_types=>ty_node-value
      RETURNING
        VALUE(rv_result) TYPE d
      RAISING
        z2ui5_cx_ajson_error.

    METHODS to_time
      IMPORTING
        iv_value         TYPE z2ui5_if_ajson_types=>ty_node-value
      RETURNING
        VALUE(rv_result) TYPE t
      RAISING
        z2ui5_cx_ajson_error.

  PRIVATE SECTION.

    TYPES:
      BEGIN OF ty_type_cache,
        type_path         TYPE string,
        target_field_name TYPE string,
        dd                TYPE REF TO cl_abap_datadescr,
        type_kind         LIKE iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>any,
        tab_item_buf      TYPE REF TO data,
      END OF ty_type_cache.
    DATA mt_node_type_cache TYPE HASHED TABLE OF ty_type_cache WITH UNIQUE KEY type_path.

    DATA mr_nodes TYPE REF TO z2ui5_if_ajson_types=>ty_nodes_ts.
    DATA mi_custom_mapping TYPE REF TO z2ui5_if_ajson_mapping.
    DATA mv_corresponding TYPE abap_bool.

    METHODS any_to_abap
      IMPORTING
        iv_path         TYPE string
        is_parent_type  TYPE ty_type_cache OPTIONAL
        i_container_ref TYPE REF TO data
      RAISING
        z2ui5_cx_ajson_error.

    METHODS value_to_abap
      IMPORTING
        is_node         TYPE z2ui5_if_ajson_types=>ty_node
        is_node_type    TYPE ty_type_cache
        i_container_ref TYPE REF TO data
      RAISING
        z2ui5_cx_ajson_error
        cx_sy_conversion_no_number.

    METHODS get_node_type
      IMPORTING
        is_node             TYPE z2ui5_if_ajson_types=>ty_node OPTIONAL " Empty for root
        is_parent_type      TYPE ty_type_cache OPTIONAL
        i_container_ref     TYPE REF TO data OPTIONAL
      RETURNING
        VALUE(rs_node_type) TYPE ty_type_cache
      RAISING
        z2ui5_cx_ajson_error.

ENDCLASS.

CLASS kHGwlzUrcuWxYGvxpUmmXxNdxsjJjI IMPLEMENTATION.

  METHOD constructor.
    mi_custom_mapping = ii_custom_mapping.
    mv_corresponding  = iv_corresponding.
  ENDMETHOD.

  METHOD to_abap.

    DATA lr_ref TYPE REF TO data.

    CLEAR c_container. " what about data/obj refs ?
    CLEAR mt_node_type_cache.

    GET REFERENCE OF c_container INTO lr_ref.
    GET REFERENCE OF it_nodes INTO mr_nodes.

    get_node_type( i_container_ref = lr_ref ). " Pre-cache root node type

    any_to_abap(
      iv_path         = ''
      i_container_ref = lr_ref ).

  ENDMETHOD.

  METHOD get_node_type.

    DATA lv_node_type_path TYPE string.
    DATA lo_sdescr TYPE REF TO cl_abap_structdescr.
    DATA lo_tdescr TYPE REF TO cl_abap_tabledescr.
    DATA lo_ddescr TYPE REF TO cl_abap_datadescr.

    " Calculate type path
    IF is_parent_type-type_kind = iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>table.
      lv_node_type_path = is_parent_type-type_path && '/-'. " table item type
    ELSEIF is_parent_type-type_kind IS NOT INITIAL.
      lv_node_type_path = is_parent_type-type_path && '/' && is_node-name.
    ENDIF. " For root node lv_node_type_path remains ''

    " Get or create cached
    READ TABLE mt_node_type_cache INTO rs_node_type WITH KEY type_path = lv_node_type_path.
    IF sy-subrc <> 0.

      rs_node_type-type_path         = lv_node_type_path.

      IF mi_custom_mapping IS BOUND.
        rs_node_type-target_field_name = to_upper( mi_custom_mapping->to_abap(
          iv_path = is_node-path
          iv_name = is_node-name ) ).
        IF rs_node_type-target_field_name IS INITIAL.
          rs_node_type-target_field_name = to_upper( is_node-name ).
        ENDIF.
      ELSE.
        rs_node_type-target_field_name = to_upper( is_node-name ).
      ENDIF.

      CASE is_parent_type-type_kind.
        WHEN iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>table.
          lo_tdescr ?= is_parent_type-dd.
          rs_node_type-dd = lo_tdescr->get_table_line_type( ).

        WHEN iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>struct_flat OR iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>struct_deep.
          lo_sdescr ?= is_parent_type-dd.
          lo_sdescr->get_component_type(
            EXPORTING
              p_name      = rs_node_type-target_field_name
            RECEIVING
              p_descr_ref = rs_node_type-dd
            EXCEPTIONS
              component_not_found = 4 ).
          IF sy-subrc <> 0.
            IF mv_corresponding = abap_false.
              z2ui5_cx_ajson_error=>raise( |Path not found| ).
            ELSE.
              CLEAR rs_node_type.
              RETURN.
            ENDIF.
          ENDIF.

        WHEN ''. " Root node
          rs_node_type-dd ?= cl_abap_typedescr=>describe_by_data_ref( i_container_ref ).

        WHEN OTHERS.
          z2ui5_cx_ajson_error=>raise( |Unexpected parent type| ).
      ENDCASE.

      rs_node_type-type_kind         = rs_node_type-dd->type_kind. " for caching and cleaner uninitialized access
      IF rs_node_type-type_kind = iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>table.
        lo_tdescr ?= rs_node_type-dd.
        IF lo_tdescr->table_kind <> cl_abap_tabledescr=>tablekind_std.
          lo_ddescr = lo_tdescr->get_table_line_type( ).
          CREATE DATA rs_node_type-tab_item_buf TYPE HANDLE lo_ddescr.
        ENDIF.
      ENDIF.

      INSERT rs_node_type INTO TABLE mt_node_type_cache.
    ENDIF.

  ENDMETHOD.

  METHOD any_to_abap.

    DATA ls_node_type LIKE LINE OF mt_node_type_cache.
    DATA lx_ajson TYPE REF TO z2ui5_cx_ajson_error.
    DATA lx_root TYPE REF TO cx_root.
    DATA lr_target_field TYPE REF TO data.

    FIELD-SYMBOLS <n> TYPE z2ui5_if_ajson_types=>ty_node.
    FIELD-SYMBOLS <parent_stdtab> TYPE STANDARD TABLE.
    FIELD-SYMBOLS <parent_anytab> TYPE ANY TABLE.
    FIELD-SYMBOLS <parent_struc> TYPE any.
    FIELD-SYMBOLS <tab_item> TYPE any.

    " Assign container
    CASE is_parent_type-type_kind.
      WHEN iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>table.
        IF is_parent_type-tab_item_buf IS BOUND. " Indirect hint that table was sorted/hashed, see get_node_type.
          ASSIGN i_container_ref->* TO <parent_anytab>.
          ASSERT sy-subrc = 0.

          lr_target_field = is_parent_type-tab_item_buf. " For hashed/sorted table - same buffer for all children
          ASSIGN is_parent_type-tab_item_buf->* TO <tab_item>.
          ASSERT sy-subrc = 0.

        ELSE.
          ASSIGN i_container_ref->* TO <parent_stdtab>.
          ASSERT sy-subrc = 0.
        ENDIF.

      WHEN iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>struct_flat OR iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>struct_deep.
        ASSIGN i_container_ref->* TO <parent_struc>.
        ASSERT sy-subrc = 0.
    ENDCASE.

    TRY.

        " array_index because stringified index goes in wrong order [1, 10, 2 ...]
        LOOP AT mr_nodes->* ASSIGNING <n> USING KEY array_index WHERE path = iv_path.

          " Get or create type cache record
          IF is_parent_type-type_kind <> iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>table OR ls_node_type-type_kind IS INITIAL.
            " table records are the same, no need to refetch twice

            ls_node_type = get_node_type(
            is_node        = <n>
            is_parent_type = is_parent_type ).

            IF mv_corresponding = abap_true AND ls_node_type IS INITIAL.
              CONTINUE.
            ENDIF.

          ENDIF.

          " Validate node type
          IF ls_node_type-type_kind = iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>data_ref OR
           ls_node_type-type_kind = iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>object_ref.
            " TODO maybe in future
            z2ui5_cx_ajson_error=>raise( 'Cannot assign to ref' ).
          ENDIF.

          " Find target field reference
          CASE is_parent_type-type_kind.
            WHEN iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>table.
              IF NOT ls_node_type-target_field_name CO '0123456789'.
                " Does not affect anything actually but for integrity
                z2ui5_cx_ajson_error=>raise( 'Need index to access tables' ).
              ENDIF.

              IF is_parent_type-tab_item_buf IS NOT BOUND. " Indirect hint that table was srt/hsh, see get_node_type
                APPEND INITIAL LINE TO <parent_stdtab> REFERENCE INTO lr_target_field.
                ASSERT sy-subrc = 0.
              ELSE.
                CLEAR <tab_item>.
              ENDIF.

            WHEN iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>struct_flat OR iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>struct_deep.
              FIELD-SYMBOLS <field> TYPE any.
              ASSIGN COMPONENT ls_node_type-target_field_name OF STRUCTURE <parent_struc> TO <field>.
              ASSERT sy-subrc = 0.
              GET REFERENCE OF <field> INTO lr_target_field.

            WHEN ''. " Root node
              lr_target_field = i_container_ref.

            WHEN OTHERS.
              z2ui5_cx_ajson_error=>raise( 'Unexpected parent type' ).
          ENDCASE.

          " Process value assignment
          CASE <n>-type.
            WHEN z2ui5_if_ajson_types=>node_type-object.
              IF ls_node_type-type_kind <> iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>struct_flat AND
               ls_node_type-type_kind <> iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>struct_deep.
                z2ui5_cx_ajson_error=>raise( 'Expected structure' ).
              ENDIF.
              any_to_abap(
              iv_path         = <n>-path && <n>-name && '/'
              is_parent_type  = ls_node_type
              i_container_ref = lr_target_field ).

            WHEN z2ui5_if_ajson_types=>node_type-array.
              IF NOT ls_node_type-type_kind = iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>table.
                z2ui5_cx_ajson_error=>raise( 'Expected table' ).
              ENDIF.
              any_to_abap(
              iv_path         = <n>-path && <n>-name && '/'
              is_parent_type  = ls_node_type
              i_container_ref = lr_target_field ).

            WHEN OTHERS.
              value_to_abap(
              is_node         = <n>
              is_node_type    = ls_node_type
              i_container_ref = lr_target_field ).
          ENDCASE.

          IF is_parent_type-tab_item_buf IS BOUND. " Indirect hint that table was sorted/hashed, see get_node_type.
            TRY.
                INSERT <tab_item> INTO TABLE <parent_anytab>.
                IF sy-subrc <> 0.
                  z2ui5_cx_ajson_error=>raise( 'Duplicate insertion' ).
                ENDIF.
              CATCH cx_sy_itab_duplicate_key.
                z2ui5_cx_ajson_error=>raise( 'Duplicate insertion' ).
            ENDTRY.
          ENDIF.

        ENDLOOP.

      CATCH z2ui5_cx_ajson_error INTO lx_ajson.
        IF lx_ajson->location IS INITIAL.
          lx_ajson->set_location( <n>-path && <n>-name ).
        ENDIF.
        RAISE EXCEPTION lx_ajson.
      CATCH cx_sy_conversion_no_number.
        z2ui5_cx_ajson_error=>raise(
        iv_msg = 'Source is not a number'
        iv_location = <n>-path && <n>-name ).
      CATCH cx_root INTO lx_root.
        z2ui5_cx_ajson_error=>raise(
        iv_msg = lx_root->get_text( )
        iv_location = <n>-path && <n>-name ).
    ENDTRY.

  ENDMETHOD.

  METHOD value_to_abap.

    FIELD-SYMBOLS <container> TYPE any.

    IF is_node_type-type_kind CA iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>deep_targets.
      z2ui5_cx_ajson_error=>raise( |Unsupported target for value [{ is_node_type-type_kind }]| ).
    ENDIF.

    ASSIGN i_container_ref->* TO <container>.
    ASSERT sy-subrc = 0.

    CASE is_node-type.
      WHEN z2ui5_if_ajson_types=>node_type-null.
        " Do nothing
      WHEN z2ui5_if_ajson_types=>node_type-boolean.
        " TODO: check type ?
        <container> = boolc( is_node-value = 'true' ).
      WHEN z2ui5_if_ajson_types=>node_type-number.
        " TODO: check type ?
        <container> = is_node-value.

      WHEN z2ui5_if_ajson_types=>node_type-string.
        " TODO: check type ?
        IF is_node-value IS NOT INITIAL.
          IF is_node_type-type_kind = iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>date.
            <container> = to_date( is_node-value ).
          ELSEIF is_node_type-type_kind = iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>time.
            <container> = to_time( is_node-value ).
          ELSEIF is_node_type-dd->absolute_name = '\TYPE=TIMESTAMP'
            OR is_node_type-dd->absolute_name = '\TYPE=TIMESTAMPL'.
            <container> = to_timestamp( is_node-value ).
          ELSEIF is_node_type-type_kind = iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>packed. " Number as a string, but not a timestamp
            <container> = is_node-value.
          ELSE.
            <container> = is_node-value.
          ENDIF.
        ELSE.
          <container> = is_node-value.
        ENDIF.
      WHEN OTHERS.
        z2ui5_cx_ajson_error=>raise( |Unexpected JSON type [{ is_node-type }]| ).
    ENDCASE.

  ENDMETHOD.

  METHOD to_date.

    DATA lv_y TYPE c LENGTH 4.
    DATA lv_m TYPE c LENGTH 2.
    DATA lv_d TYPE c LENGTH 2.

    FIND FIRST OCCURRENCE OF REGEX '^(\d{4})-(\d{2})-(\d{2})(T|$)'
      IN iv_value
      SUBMATCHES lv_y lv_m lv_d.
    IF sy-subrc <> 0.
      z2ui5_cx_ajson_error=>raise( 'Unexpected date format' ).
    ENDIF.
    CONCATENATE lv_y lv_m lv_d INTO rv_result.

  ENDMETHOD.

  METHOD to_timestamp.

    CONSTANTS lc_utc TYPE c LENGTH 6 VALUE 'UTC'.
    CONSTANTS lc_regex_ts_with_hour TYPE string
      VALUE `^(\d{4})-(\d{2})-(\d{2})(T)(\d{2}):(\d{2}):(\d{2})(\+)(\d{2}):(\d{2})`.
    CONSTANTS lc_regex_ts_utc TYPE string
      VALUE `^(\d{4})-(\d{2})-(\d{2})(T)(\d{2}):(\d{2}):(\d{2})(Z|$)`.

    DATA:
      BEGIN OF ls_timestamp,
        year         TYPE c LENGTH 4,
        month        TYPE c LENGTH 2,
        day          TYPE c LENGTH 2,
        t            TYPE c LENGTH 1,
        hour         TYPE c LENGTH 2,
        minute       TYPE c LENGTH 2,
        second       TYPE c LENGTH 2,
        local_sign   TYPE c LENGTH 1,
        local_hour   TYPE c LENGTH 2,
        local_minute TYPE c LENGTH 2,
      END OF ls_timestamp.

    DATA lv_date TYPE d.
    DATA lv_time TYPE t.
    DATA lv_seconds_conv TYPE i.
    DATA lv_timestamp TYPE timestampl.

    FIND FIRST OCCURRENCE OF REGEX lc_regex_ts_with_hour
      IN iv_value SUBMATCHES
        ls_timestamp-year ls_timestamp-month ls_timestamp-day ls_timestamp-t
        ls_timestamp-hour ls_timestamp-minute ls_timestamp-second
        ls_timestamp-local_sign ls_timestamp-local_hour ls_timestamp-local_minute.

    IF sy-subrc = 0.

      lv_seconds_conv = ( ls_timestamp-local_hour * 3600 ) + ( ls_timestamp-local_minute * 60 ).

    ELSE.

      FIND FIRST OCCURRENCE OF REGEX lc_regex_ts_utc
        IN iv_value SUBMATCHES
          ls_timestamp-year ls_timestamp-month ls_timestamp-day ls_timestamp-t
          ls_timestamp-hour ls_timestamp-minute ls_timestamp-second.

      IF sy-subrc <> 0.
        z2ui5_cx_ajson_error=>raise( 'Unexpected timestamp format' ).
      ENDIF.

    ENDIF.

    CONCATENATE ls_timestamp-year ls_timestamp-month ls_timestamp-day INTO lv_date.
    CONCATENATE ls_timestamp-hour ls_timestamp-minute ls_timestamp-second INTO lv_time.

    CONVERT DATE lv_date TIME lv_time INTO TIME STAMP lv_timestamp TIME ZONE lc_utc.

    TRY.

        CASE ls_timestamp-local_sign.
          WHEN '-'.
            lv_timestamp = cl_abap_tstmp=>add(
            tstmp = lv_timestamp
            secs  = lv_seconds_conv ).
          WHEN '+'.
            lv_timestamp = cl_abap_tstmp=>subtractsecs(
            tstmp = lv_timestamp
            secs  = lv_seconds_conv ).
        ENDCASE.

      CATCH cx_parameter_invalid_range cx_parameter_invalid_type.
        z2ui5_cx_ajson_error=>raise( 'Unexpected error calculating timestamp' ).
    ENDTRY.

    IF lv_timestamp IS NOT INITIAL.
      cl_abap_tstmp=>move(
        EXPORTING
          tstmp_src = lv_timestamp
        IMPORTING
          tstmp_tgt = rv_result ).
    ENDIF.

  ENDMETHOD.

  METHOD to_time.

    DATA lv_h TYPE c LENGTH 2.
    DATA lv_m TYPE c LENGTH 2.
    DATA lv_s TYPE c LENGTH 2.

    FIND FIRST OCCURRENCE OF REGEX '^(\d{2}):(\d{2}):(\d{2})(T|$)'
      IN iv_value
      SUBMATCHES lv_h lv_m lv_s.
    IF sy-subrc <> 0.
      z2ui5_cx_ajson_error=>raise( 'Unexpected time format' ).
    ENDIF.
    CONCATENATE lv_h lv_m lv_s INTO rv_result.

  ENDMETHOD.

ENDCLASS.

**********************************************************************
* ABAP_TO_JSON
**********************************************************************

* renamed: z2ui5_cl_ajson :: lcl_abap_to_json
CLASS kHGwlzUrcuWxYGvxpUmmeJqampzabz DEFINITION FINAL.
  PUBLIC SECTION.

    CLASS-METHODS convert
      IMPORTING
        iv_data           TYPE any
        is_prefix         TYPE z2ui5_if_ajson_types=>ty_path_name OPTIONAL
        iv_array_index    TYPE i DEFAULT 0
        ii_custom_mapping TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL
        is_opts           TYPE z2ui5_if_ajson=>ty_opts OPTIONAL
        iv_item_order     TYPE i DEFAULT 0
      RETURNING
        VALUE(rt_nodes)   TYPE z2ui5_if_ajson_types=>ty_nodes_tt
      RAISING
        z2ui5_cx_ajson_error.

    CLASS-METHODS insert_with_type
      IMPORTING
        iv_data           TYPE any
        iv_type           TYPE z2ui5_if_ajson_types=>ty_node_type
        is_prefix         TYPE z2ui5_if_ajson_types=>ty_path_name OPTIONAL
        iv_array_index    TYPE i DEFAULT 0
        ii_custom_mapping TYPE REF TO z2ui5_if_ajson_mapping OPTIONAL
        is_opts           TYPE z2ui5_if_ajson=>ty_opts OPTIONAL
        iv_item_order     TYPE i DEFAULT 0
      RETURNING
        VALUE(rt_nodes)   TYPE z2ui5_if_ajson_types=>ty_nodes_tt
      RAISING
        z2ui5_cx_ajson_error.

    CLASS-METHODS format_date
      IMPORTING
        iv_date       TYPE d
      RETURNING
        VALUE(rv_str) TYPE string.
    CLASS-METHODS format_time
      IMPORTING
        iv_time       TYPE t
      RETURNING
        VALUE(rv_str) TYPE string.
    CLASS-METHODS format_timestamp
      IMPORTING
        iv_ts         TYPE timestamp
      RETURNING
        VALUE(rv_str) TYPE string.

    CLASS-METHODS class_constructor.

  PRIVATE SECTION.

    CLASS-DATA gv_ajson_absolute_type_name TYPE string.
    DATA mi_custom_mapping TYPE REF TO z2ui5_if_ajson_mapping.
    DATA mv_keep_item_order TYPE abap_bool.
    DATA mv_format_datetime TYPE abap_bool.

    METHODS convert_any
      IMPORTING
        iv_data       TYPE any
        io_type       TYPE REF TO cl_abap_typedescr
        is_prefix     TYPE z2ui5_if_ajson_types=>ty_path_name
        iv_index      TYPE i DEFAULT 0
        iv_item_order TYPE i DEFAULT 0
      CHANGING
        ct_nodes      TYPE z2ui5_if_ajson_types=>ty_nodes_tt
      RAISING
        z2ui5_cx_ajson_error.

    METHODS convert_ajson
      IMPORTING
        io_json       TYPE REF TO z2ui5_if_ajson
        is_prefix     TYPE z2ui5_if_ajson_types=>ty_path_name
        iv_index      TYPE i DEFAULT 0
        iv_item_order TYPE i DEFAULT 0
      CHANGING
        ct_nodes      TYPE z2ui5_if_ajson_types=>ty_nodes_tt
      RAISING
        z2ui5_cx_ajson_error.

    METHODS convert_value
      IMPORTING
        iv_data       TYPE any
        io_type       TYPE REF TO cl_abap_typedescr
        is_prefix     TYPE z2ui5_if_ajson_types=>ty_path_name
        iv_index      TYPE i DEFAULT 0
        iv_item_order TYPE i DEFAULT 0
      CHANGING
        ct_nodes      TYPE z2ui5_if_ajson_types=>ty_nodes_tt
      RAISING
        z2ui5_cx_ajson_error.

    METHODS convert_ref
      IMPORTING
        iv_data       TYPE any
        is_prefix     TYPE z2ui5_if_ajson_types=>ty_path_name
        iv_index      TYPE i DEFAULT 0
        iv_item_order TYPE i DEFAULT 0
      CHANGING
        ct_nodes      TYPE z2ui5_if_ajson_types=>ty_nodes_tt
      RAISING
        z2ui5_cx_ajson_error.

    METHODS convert_struc
      IMPORTING
        iv_data       TYPE any
        io_type       TYPE REF TO cl_abap_typedescr
        is_prefix     TYPE z2ui5_if_ajson_types=>ty_path_name
        iv_index      TYPE i DEFAULT 0
        iv_item_order TYPE i DEFAULT 0
      CHANGING
        ct_nodes      TYPE z2ui5_if_ajson_types=>ty_nodes_tt
      RAISING
        z2ui5_cx_ajson_error.

    METHODS convert_table
      IMPORTING
        iv_data       TYPE any
        io_type       TYPE REF TO cl_abap_typedescr
        is_prefix     TYPE z2ui5_if_ajson_types=>ty_path_name
        iv_index      TYPE i DEFAULT 0
        iv_item_order TYPE i DEFAULT 0
      CHANGING
        ct_nodes      TYPE z2ui5_if_ajson_types=>ty_nodes_tt
      RAISING
        z2ui5_cx_ajson_error.

    METHODS insert_value_with_type
      IMPORTING
        iv_data       TYPE any
        iv_type       TYPE z2ui5_if_ajson_types=>ty_node_type
        io_type       TYPE REF TO cl_abap_typedescr
        is_prefix     TYPE z2ui5_if_ajson_types=>ty_path_name
        iv_index      TYPE i DEFAULT 0
        iv_item_order TYPE i DEFAULT 0
      CHANGING
        ct_nodes      TYPE z2ui5_if_ajson_types=>ty_nodes_tt
      RAISING
        z2ui5_cx_ajson_error.

ENDCLASS.

CLASS kHGwlzUrcuWxYGvxpUmmeJqampzabz IMPLEMENTATION.

  METHOD class_constructor.

    DATA lo_dummy TYPE REF TO z2ui5_cl_ajson.
    DATA lo_type TYPE REF TO cl_abap_refdescr.
    lo_type ?= cl_abap_typedescr=>describe_by_data( lo_dummy ).
    gv_ajson_absolute_type_name = lo_type->get_referenced_type( )->absolute_name.

  ENDMETHOD.

  METHOD convert.

    DATA lo_type TYPE REF TO cl_abap_typedescr.
    DATA lo_converter TYPE REF TO kHGwlzUrcuWxYGvxpUmmeJqampzabz.

    lo_type = cl_abap_typedescr=>describe_by_data( iv_data ).

    CREATE OBJECT lo_converter.
    lo_converter->mi_custom_mapping  = ii_custom_mapping.
    lo_converter->mv_keep_item_order = is_opts-keep_item_order.
    lo_converter->mv_format_datetime = is_opts-format_datetime.

    lo_converter->convert_any(
      EXPORTING
        iv_data       = iv_data
        io_type       = lo_type
        is_prefix     = is_prefix
        iv_index      = iv_array_index
        iv_item_order = iv_item_order
      CHANGING
        ct_nodes = rt_nodes ).

  ENDMETHOD.

  METHOD convert_any.

    CASE io_type->kind.
      WHEN cl_abap_typedescr=>kind_elem.
        convert_value(
          EXPORTING
            iv_data   = iv_data
            io_type   = io_type
            is_prefix = is_prefix
            iv_index  = iv_index
            iv_item_order = iv_item_order
          CHANGING
            ct_nodes = ct_nodes ).

      WHEN cl_abap_typedescr=>kind_struct.
        convert_struc(
          EXPORTING
            iv_data   = iv_data
            io_type   = io_type
            is_prefix = is_prefix
            iv_index  = iv_index
            iv_item_order = iv_item_order
          CHANGING
            ct_nodes = ct_nodes ).

      WHEN cl_abap_typedescr=>kind_table.
        convert_table(
          EXPORTING
            iv_data   = iv_data
            io_type   = io_type
            is_prefix = is_prefix
            iv_index  = iv_index
            iv_item_order = iv_item_order
          CHANGING
            ct_nodes = ct_nodes ).

      WHEN OTHERS.

        IF io_type->type_kind = iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>data_ref OR iv_data IS INITIAL.
          " Convert data references and initial references to other types (like ref to class or interface)
          " Initial references will result in "null"
          convert_ref(
            EXPORTING
              iv_data   = iv_data
              is_prefix = is_prefix
              iv_index  = iv_index
              iv_item_order = iv_item_order
            CHANGING
              ct_nodes = ct_nodes ).

        ELSEIF io_type->type_kind = iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>object_ref
          AND cl_abap_typedescr=>describe_by_object_ref( iv_data )->absolute_name = gv_ajson_absolute_type_name.
          convert_ajson(
            EXPORTING
              io_json   = iv_data
              is_prefix = is_prefix
              iv_index  = iv_index
              iv_item_order = iv_item_order
            CHANGING
              ct_nodes = ct_nodes ).
        ELSE.
          z2ui5_cx_ajson_error=>raise( |Unsupported type [{ io_type->type_kind
            }] @{ is_prefix-path && is_prefix-name }| ).
        ENDIF.

    ENDCASE.

  ENDMETHOD.

  METHOD convert_ajson.

    FIELD-SYMBOLS <src> LIKE LINE OF ct_nodes.
    FIELD-SYMBOLS <dst> LIKE LINE OF ct_nodes.

    IF io_json IS NOT BOUND.
      RETURN.
    ENDIF.

    LOOP AT io_json->mt_json_tree ASSIGNING <src>.
      APPEND <src> TO ct_nodes ASSIGNING <dst>.

      IF <dst>-path IS INITIAL AND <dst>-name IS INITIAL. " root node
        <dst>-path  = is_prefix-path.
        <dst>-name  = is_prefix-name.
        <dst>-index = iv_index.
        <dst>-order = iv_item_order.
      ELSE.
        <dst>-path = is_prefix-path && is_prefix-name && <dst>-path.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD format_date.
    IF iv_date IS NOT INITIAL.
      rv_str = iv_date+0(4) && '-' && iv_date+4(2) && '-' && iv_date+6(2).
    ENDIF.
  ENDMETHOD.

  METHOD format_time.
    IF iv_time IS NOT INITIAL.
      rv_str = iv_time+0(2) && ':' && iv_time+2(2) && ':' && iv_time+4(2).
    ENDIF.
  ENDMETHOD.

  METHOD format_timestamp.

    CONSTANTS lc_utc TYPE c LENGTH 6 VALUE 'UTC'.

    DATA lv_date TYPE d.
    DATA lv_time TYPE t.

    CONVERT TIME STAMP iv_ts TIME ZONE lc_utc
      INTO DATE lv_date TIME lv_time.

    rv_str =
      lv_date+0(4) && '-' && lv_date+4(2) && '-' && lv_date+6(2) &&
      'T' &&
      lv_time+0(2) && ':' && lv_time+2(2) && ':' && lv_time+4(2) &&
      'Z'.

  ENDMETHOD.

  METHOD convert_value.

    DATA ls_node LIKE LINE OF ct_nodes.

    ls_node-path  = is_prefix-path.
    ls_node-name  = is_prefix-name.
    ls_node-index = iv_index.
    ls_node-order = iv_item_order.

    IF ls_node-name IS INITIAL.
      ls_node-name  = is_prefix-name.
    ENDIF.

    IF io_type->absolute_name = '\TYPE-POOL=ABAP\TYPE=ABAP_BOOL'
        OR io_type->absolute_name = '\TYPE=ABAP_BOOLEAN'
        OR io_type->absolute_name = '\TYPE=XSDBOOLEAN'
        OR io_type->absolute_name = '\TYPE=FLAG'
        OR io_type->absolute_name = '\TYPE=XFELD'.
      ls_node-type = z2ui5_if_ajson_types=>node_type-boolean.
      IF iv_data IS NOT INITIAL.
        ls_node-value = 'true'.
      ELSE.
        ls_node-value = 'false'.
      ENDIF.
    ELSEIF io_type->absolute_name = '\TYPE=TIMESTAMP'.
      IF mv_format_datetime = abap_true.
        ls_node-type  = z2ui5_if_ajson_types=>node_type-string.
        ls_node-value = format_timestamp( iv_data ).
      ELSE.
        ls_node-type  = z2ui5_if_ajson_types=>node_type-number.
        ls_node-value = |{ iv_data }|.
      ENDIF.
    ELSEIF io_type->type_kind CO iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>texts OR
           io_type->type_kind CO iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>binary OR
           io_type->type_kind CO iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>enum.
      ls_node-type = z2ui5_if_ajson_types=>node_type-string.
      ls_node-value = |{ iv_data }|.
    ELSEIF io_type->type_kind = iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>date.
      ls_node-type = z2ui5_if_ajson_types=>node_type-string.
      IF mv_format_datetime = abap_true.
        ls_node-value = format_date( iv_data ).
      ELSE.
        ls_node-value = |{ iv_data }|.
      ENDIF.
    ELSEIF io_type->type_kind = iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>time.
      ls_node-type = z2ui5_if_ajson_types=>node_type-string.
      IF mv_format_datetime = abap_true.
        ls_node-value = format_time( iv_data ).
      ELSE.
        ls_node-value = |{ iv_data }|.
      ENDIF.
    ELSEIF io_type->type_kind CO iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>numeric.
      ls_node-type = z2ui5_if_ajson_types=>node_type-number.
      ls_node-value = |{ iv_data }|.
    ELSE.
      z2ui5_cx_ajson_error=>raise( |Unexpected elementary type [{
        io_type->type_kind }] @{ is_prefix-path && is_prefix-name }| ).
    ENDIF.

    APPEND ls_node TO ct_nodes.

  ENDMETHOD.

  METHOD convert_ref.

    DATA ls_node LIKE LINE OF ct_nodes.

    ls_node-path  = is_prefix-path.
    ls_node-name  = is_prefix-name.
    ls_node-index = iv_index.
    ls_node-order = iv_item_order.

    IF mi_custom_mapping IS BOUND.
      ls_node-name = mi_custom_mapping->to_json(
        iv_path = is_prefix-path
        iv_name = is_prefix-name ).
    ENDIF.

    IF ls_node-name IS INITIAL.
      ls_node-name  = is_prefix-name.
    ENDIF.

    IF iv_data IS INITIAL.
      ls_node-type  = z2ui5_if_ajson_types=>node_type-null.
      ls_node-value = 'null'.
    ELSE.
      " TODO support data references
      z2ui5_cx_ajson_error=>raise( |Unexpected reference @{ is_prefix-path && is_prefix-name }| ).
    ENDIF.

    APPEND ls_node TO ct_nodes.

  ENDMETHOD.

  METHOD convert_struc.

    DATA lo_struc TYPE REF TO cl_abap_structdescr.
    DATA lt_comps TYPE cl_abap_structdescr=>included_view.
    DATA ls_next_prefix LIKE is_prefix.
    DATA lv_mapping_prefix_name LIKE is_prefix-name.
    DATA lv_item_order TYPE i.
    DATA ls_root LIKE LINE OF ct_nodes.

    FIELD-SYMBOLS <root> LIKE ls_root.
    FIELD-SYMBOLS <c> LIKE LINE OF lt_comps.
    FIELD-SYMBOLS <val> TYPE any.

    " Object root

    ls_root-path  = is_prefix-path.
    ls_root-name  = is_prefix-name.
    ls_root-type  = z2ui5_if_ajson_types=>node_type-object.
    ls_root-index = iv_index.

    IF mi_custom_mapping IS BOUND.
      ls_root-name = mi_custom_mapping->to_json(
        iv_path = is_prefix-path
        iv_name = is_prefix-name ).
    ENDIF.

    IF ls_root-name IS INITIAL.
      ls_root-name  = is_prefix-name.
    ENDIF.

    ls_root-order = iv_item_order.

    APPEND ls_root TO ct_nodes ASSIGNING <root>.

    " Object attributes

    lo_struc ?= io_type.
    lt_comps = lo_struc->get_included_view( ).
    " replaced call to get_components() with get_included_view() to avoid problems with suffixes in includes.
    " get_components is potentially much slower than lo_struc->components
    " but ! we still need it to identify booleans
    " and rtti seems to cache type descriptions really well (https://github.com/sbcgua/benchmarks.git)
    " the structures will be repeated in real life

    ls_next_prefix-path = is_prefix-path && <root>-name && '/'.

    LOOP AT lt_comps ASSIGNING <c>.
      CLEAR lv_mapping_prefix_name.

      <root>-children = <root>-children + 1.
      ls_next_prefix-name = to_lower( <c>-name ).
      ASSIGN COMPONENT <c>-name OF STRUCTURE iv_data TO <val>.
      ASSERT sy-subrc = 0.

      IF mi_custom_mapping IS BOUND AND <c>-type->kind = cl_abap_typedescr=>kind_elem.
        lv_mapping_prefix_name = mi_custom_mapping->to_json( iv_path = ls_next_prefix-path
                                                             iv_name = ls_next_prefix-name ).
      ENDIF.

      IF lv_mapping_prefix_name IS NOT INITIAL.
        ls_next_prefix-name = lv_mapping_prefix_name.
      ENDIF.

      IF mv_keep_item_order = abap_true.
        lv_item_order = <root>-children.
      ENDIF.

      convert_any(
        EXPORTING
          iv_data   = <val>
          io_type   = <c>-type
          is_prefix = ls_next_prefix
          iv_item_order = lv_item_order
        CHANGING
          ct_nodes = ct_nodes ).

    ENDLOOP.

  ENDMETHOD.

  METHOD convert_table.

    DATA lo_table TYPE REF TO cl_abap_tabledescr.
    DATA lo_ltype TYPE REF TO cl_abap_typedescr.
    DATA ls_next_prefix LIKE is_prefix.
    DATA lv_tabix TYPE sy-tabix.
    DATA ls_root LIKE LINE OF ct_nodes.

    FIELD-SYMBOLS <root> LIKE ls_root.
    FIELD-SYMBOLS <tab> TYPE ANY TABLE.
    FIELD-SYMBOLS <val> TYPE any.

    " Array root

    ls_root-path  = is_prefix-path.
    ls_root-name  = is_prefix-name.
    ls_root-type  = z2ui5_if_ajson_types=>node_type-array.
    ls_root-index = iv_index.
    ls_root-order = iv_item_order.

    IF mi_custom_mapping IS BOUND.
      ls_root-name = mi_custom_mapping->to_json(
        iv_path = is_prefix-path
        iv_name = is_prefix-name ).
    ENDIF.

    IF ls_root-name IS INITIAL.
      ls_root-name  = is_prefix-name.
    ENDIF.

    APPEND ls_root TO ct_nodes ASSIGNING <root>.

    " Array items

    lo_table ?= io_type.
    lo_ltype  = lo_table->get_table_line_type( ).

    ls_next_prefix-path = is_prefix-path && <root>-name && '/'.
    ASSIGN iv_data TO <tab>.

    lv_tabix = 1.
    LOOP AT <tab> ASSIGNING <val>.
      ls_next_prefix-name = to_lower( |{ lv_tabix }| ).

      convert_any(
        EXPORTING
          iv_data   = <val>
          io_type   = lo_ltype
          is_prefix = ls_next_prefix
          iv_index  = <root>-children + 1
        CHANGING
          ct_nodes = ct_nodes ).

      <root>-children = <root>-children + 1.
      lv_tabix = lv_tabix + 1.
    ENDLOOP.

  ENDMETHOD.

  METHOD insert_with_type.

    DATA lo_type TYPE REF TO cl_abap_typedescr.
    DATA lo_converter TYPE REF TO kHGwlzUrcuWxYGvxpUmmeJqampzabz.

    lo_type = cl_abap_typedescr=>describe_by_data( iv_data ).

    CREATE OBJECT lo_converter.
    lo_converter->mi_custom_mapping  = ii_custom_mapping.
    lo_converter->mv_keep_item_order = is_opts-keep_item_order.
    lo_converter->mv_format_datetime = is_opts-format_datetime.

    lo_converter->insert_value_with_type(
      EXPORTING
        iv_data       = iv_data
        iv_type       = iv_type
        io_type       = lo_type
        is_prefix     = is_prefix
        iv_index      = iv_array_index
        iv_item_order = iv_item_order
      CHANGING
        ct_nodes = rt_nodes ).

  ENDMETHOD.

  METHOD insert_value_with_type.

    DATA lv_prefix TYPE string.
    DATA ls_node LIKE LINE OF ct_nodes.

    lv_prefix = is_prefix-path && is_prefix-name.
    IF io_type->type_kind CO iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>texts OR
       io_type->type_kind CO iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>date OR
       io_type->type_kind CO iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>time.
      IF iv_type = z2ui5_if_ajson_types=>node_type-boolean AND iv_data <> 'true' AND iv_data <> 'false'.
        z2ui5_cx_ajson_error=>raise( |Unexpected boolean value [{ iv_data }] @{ lv_prefix }| ).
      ELSEIF iv_type = z2ui5_if_ajson_types=>node_type-null AND iv_data IS NOT INITIAL.
        z2ui5_cx_ajson_error=>raise( |Unexpected null value [{ iv_data }] @{ lv_prefix }| ).
      ELSEIF iv_type = z2ui5_if_ajson_types=>node_type-number AND iv_data CN '0123456789. E+-'.
        z2ui5_cx_ajson_error=>raise( |Unexpected numeric value [{ iv_data }] @{ lv_prefix }| ).
      ELSEIF iv_type <> z2ui5_if_ajson_types=>node_type-string AND iv_type <> z2ui5_if_ajson_types=>node_type-boolean
        AND iv_type <> z2ui5_if_ajson_types=>node_type-null AND iv_type <> z2ui5_if_ajson_types=>node_type-number.
        z2ui5_cx_ajson_error=>raise( |Unexpected type for value [{ iv_type },{ iv_data }] @{ lv_prefix }| ).
      ENDIF.
    ELSEIF io_type->type_kind CO iUFTszUrcuWxYGvxpUmmdAMURRqLkF=>numeric.
      IF iv_type <> z2ui5_if_ajson_types=>node_type-number.
        z2ui5_cx_ajson_error=>raise( |Unexpected value for numeric [{ iv_data }] @{ lv_prefix }| ).
      ENDIF.
    ELSE.
      z2ui5_cx_ajson_error=>raise( |Unexpected type [{ io_type->type_kind }] @{ lv_prefix }| ).
    ENDIF.

    ls_node-path  = is_prefix-path.
    ls_node-name  = is_prefix-name.
    ls_node-index = iv_index.
    ls_node-value = iv_data.
    ls_node-type  = iv_type.
    ls_node-order = iv_item_order.

    IF mi_custom_mapping IS BOUND.
      ls_node-name = mi_custom_mapping->to_json(
        iv_path = is_prefix-path
        iv_name = is_prefix-name ).
    ENDIF.

    IF ls_node-name IS INITIAL.
      ls_node-name  = is_prefix-name.
    ENDIF.

    APPEND ls_node TO ct_nodes.

  ENDMETHOD.

ENDCLASS.

**********************************************************************
* MUTATOR INTERFACE
**********************************************************************

* renamed: z2ui5_cl_ajson :: lif_mutator_runner
INTERFACE iUFTszUrcuWxYGvxpUmmtzVIYRIbuu.
  METHODS run
    IMPORTING
      it_source_tree TYPE z2ui5_if_ajson_types=>ty_nodes_ts
    EXPORTING
      et_dest_tree   TYPE z2ui5_if_ajson_types=>ty_nodes_ts
    RAISING
      z2ui5_cx_ajson_error.
ENDINTERFACE.

**********************************************************************
* FILTER RUNNER
**********************************************************************

* renamed: z2ui5_cl_ajson :: lcl_filter_runner
CLASS kHGwlzUrcuWxYGvxpUmmlwblMIpVBS DEFINITION FINAL.
  PUBLIC SECTION.
    INTERFACES iUFTszUrcuWxYGvxpUmmtzVIYRIbuu.
    CLASS-METHODS new
      IMPORTING
        ii_filter          TYPE REF TO z2ui5_if_ajson_filter
      RETURNING
        VALUE(ro_instance) TYPE REF TO kHGwlzUrcuWxYGvxpUmmlwblMIpVBS.
    METHODS constructor
      IMPORTING
        ii_filter TYPE REF TO z2ui5_if_ajson_filter.

  PRIVATE SECTION.
    DATA mi_filter TYPE REF TO z2ui5_if_ajson_filter.
    DATA mr_source_tree TYPE REF TO z2ui5_if_ajson_types=>ty_nodes_ts.
    DATA mr_dest_tree TYPE REF TO z2ui5_if_ajson_types=>ty_nodes_ts.

    METHODS walk
      IMPORTING
        iv_path   TYPE string
      CHANGING
        cs_parent TYPE z2ui5_if_ajson_types=>ty_node OPTIONAL
      RAISING
        z2ui5_cx_ajson_error.

ENDCLASS.

CLASS kHGwlzUrcuWxYGvxpUmmlwblMIpVBS IMPLEMENTATION.

  METHOD new.
    CREATE OBJECT ro_instance EXPORTING ii_filter = ii_filter.
  ENDMETHOD.

  METHOD constructor.
    ASSERT ii_filter IS BOUND.
    mi_filter = ii_filter.
  ENDMETHOD.

  METHOD iUFTszUrcuWxYGvxpUmmtzVIYRIbuu~run.

    CLEAR et_dest_tree.
    GET REFERENCE OF it_source_tree INTO mr_source_tree.
    GET REFERENCE OF et_dest_tree INTO mr_dest_tree.

    walk( iv_path = '' ).

  ENDMETHOD.

  METHOD walk.

    DATA ls_node TYPE z2ui5_if_ajson_types=>ty_node.
    DATA lv_tab_key TYPE string.

    IF cs_parent-type = z2ui5_if_ajson_types=>node_type-array.
      lv_tab_key = 'array_index'. " path + index
    ENDIF.

    LOOP AT mr_source_tree->* INTO ls_node USING KEY (lv_tab_key) WHERE path = iv_path.
      CASE ls_node-type.
        WHEN z2ui5_if_ajson_types=>node_type-boolean OR z2ui5_if_ajson_types=>node_type-null
          OR z2ui5_if_ajson_types=>node_type-number OR z2ui5_if_ajson_types=>node_type-string.

          IF mi_filter->keep_node( ls_node ) = abap_false.
            CONTINUE.
          ENDIF.

        WHEN z2ui5_if_ajson_types=>node_type-array OR z2ui5_if_ajson_types=>node_type-object.

          IF mi_filter->keep_node(
              is_node  = ls_node
              iv_visit = z2ui5_if_ajson_filter=>visit_type-open ) = abap_false.
            CONTINUE.
          ENDIF.

          " Intentionally clear AFTER "open"
          CLEAR ls_node-children.

          walk(
            EXPORTING
              iv_path = iv_path && ls_node-name && `/`
            CHANGING
              cs_parent    = ls_node ).

          IF mi_filter->keep_node(
              is_node  = ls_node
              iv_visit = z2ui5_if_ajson_filter=>visit_type-close ) = abap_false.
            CONTINUE.
          ENDIF.

        WHEN OTHERS.
          z2ui5_cx_ajson_error=>raise( |Unexpected node type { ls_node-type }| ).
      ENDCASE.

      IF cs_parent IS SUPPLIED.
        cs_parent-children = cs_parent-children + 1.
        IF cs_parent-type = z2ui5_if_ajson_types=>node_type-array.
          ls_node-name  = |{ cs_parent-children }|.
          ls_node-index = cs_parent-children.
        ENDIF.
      ENDIF.
      INSERT ls_node INTO TABLE mr_dest_tree->*.

    ENDLOOP.

  ENDMETHOD.

ENDCLASS.

**********************************************************************
* MAPPER RUNNER
**********************************************************************

* renamed: z2ui5_cl_ajson :: lcl_mapper_runner
CLASS kHGwlzUrcuWxYGvxpUmmhFTcRDbOtm DEFINITION FINAL.
  PUBLIC SECTION.
    INTERFACES iUFTszUrcuWxYGvxpUmmtzVIYRIbuu.
    CLASS-METHODS new
      IMPORTING
        ii_mapper          TYPE REF TO z2ui5_if_ajson_mapping
      RETURNING
        VALUE(ro_instance) TYPE REF TO kHGwlzUrcuWxYGvxpUmmhFTcRDbOtm.
    METHODS constructor
      IMPORTING
        ii_mapper TYPE REF TO z2ui5_if_ajson_mapping.

  PRIVATE SECTION.
    DATA mi_mapper TYPE REF TO z2ui5_if_ajson_mapping.
    DATA mr_source_tree TYPE REF TO z2ui5_if_ajson_types=>ty_nodes_ts.
    DATA mr_dest_tree TYPE REF TO z2ui5_if_ajson_types=>ty_nodes_ts.

    METHODS process_deep_node
      IMPORTING
        iv_path         TYPE string
        iv_renamed_path TYPE string
        iv_node_type    TYPE z2ui5_if_ajson_types=>ty_node-type
      RAISING
        z2ui5_cx_ajson_error.

ENDCLASS.

CLASS kHGwlzUrcuWxYGvxpUmmhFTcRDbOtm IMPLEMENTATION.

  METHOD new.
    CREATE OBJECT ro_instance EXPORTING ii_mapper = ii_mapper.
  ENDMETHOD.

  METHOD constructor.
    ASSERT ii_mapper IS BOUND.
    mi_mapper = ii_mapper.
  ENDMETHOD.

  METHOD iUFTszUrcuWxYGvxpUmmtzVIYRIbuu~run.

    FIELD-SYMBOLS <root> LIKE LINE OF it_source_tree.

    READ TABLE it_source_tree WITH KEY path = `` name = `` ASSIGNING <root>.
    IF sy-subrc <> 0
      OR NOT ( <root>-type = z2ui5_if_ajson_types=>node_type-array OR <root>-type = z2ui5_if_ajson_types=>node_type-object ).
      " empty or one-value-only tree
      et_dest_tree = it_source_tree.
      RETURN.
    ENDIF.

    CLEAR et_dest_tree.
    GET REFERENCE OF it_source_tree INTO mr_source_tree.
    GET REFERENCE OF et_dest_tree INTO mr_dest_tree.
    INSERT <root> INTO TABLE et_dest_tree.

    process_deep_node(
      iv_path         = `/`
      iv_renamed_path = `/`
      iv_node_type    = <root>-type ).

  ENDMETHOD.

  METHOD process_deep_node.
    FIELD-SYMBOLS <item> LIKE LINE OF mr_source_tree->*.
    DATA ls_renamed_node LIKE <item>.

    LOOP AT mr_source_tree->* ASSIGNING <item> WHERE path = iv_path.
      ls_renamed_node = <item>.
      IF iv_node_type <> z2ui5_if_ajson_types=>node_type-array.
        " don't rename array item names -> they are numeric index
        mi_mapper->rename_node(
          EXPORTING
            is_node = <item>
          CHANGING
            cv_name = ls_renamed_node-name ).
        IF ls_renamed_node-name IS INITIAL.
          z2ui5_cx_ajson_error=>raise(
            iv_msg  = 'Renamed node name cannot be empty'
            is_node = <item> ).
        ENDIF.
      ENDIF.
      ls_renamed_node-path = iv_renamed_path.

      INSERT ls_renamed_node INTO TABLE mr_dest_tree->*.
      IF sy-subrc <> 0. " = 4 ?
        z2ui5_cx_ajson_error=>raise(
          iv_msg  = 'Renamed node has a duplicate'
          is_node = ls_renamed_node ).
      ENDIF.

      " maybe also catch CX_SY_ITAB_DUPLICATE_KEY but secondary keys are not changed here, so not for now

      IF <item>-type = z2ui5_if_ajson_types=>node_type-array OR <item>-type = z2ui5_if_ajson_types=>node_type-object.
        process_deep_node(
          iv_path         = iv_path && <item>-name && `/`
          iv_renamed_path = iv_renamed_path && ls_renamed_node-name && `/`
          iv_node_type    = <item>-type ).
      ENDIF.

    ENDLOOP.

  ENDMETHOD.

ENDCLASS.

**********************************************************************
* MUTATOR QUEUE
**********************************************************************

* renamed: z2ui5_cl_ajson :: lcl_mutator_queue
CLASS kHGwlzUrcuWxYGvxpUmmucOpllUiAS DEFINITION FINAL.
  PUBLIC SECTION.
    INTERFACES iUFTszUrcuWxYGvxpUmmtzVIYRIbuu.
    CLASS-METHODS new
      RETURNING
        VALUE(ro_instance) TYPE REF TO kHGwlzUrcuWxYGvxpUmmucOpllUiAS.
    METHODS add
      IMPORTING
        ii_mutator     TYPE REF TO iUFTszUrcuWxYGvxpUmmtzVIYRIbuu
      RETURNING
        VALUE(ro_self) TYPE REF TO kHGwlzUrcuWxYGvxpUmmucOpllUiAS.

  PRIVATE SECTION.
    DATA mt_queue TYPE STANDARD TABLE OF REF TO iUFTszUrcuWxYGvxpUmmtzVIYRIbuu.

ENDCLASS.

CLASS kHGwlzUrcuWxYGvxpUmmucOpllUiAS IMPLEMENTATION.

  METHOD add.
    IF ii_mutator IS BOUND.
      APPEND ii_mutator TO mt_queue.
    ENDIF.
    ro_self = me.
  ENDMETHOD.

  METHOD new.
    CREATE OBJECT ro_instance.
  ENDMETHOD.

  METHOD iUFTszUrcuWxYGvxpUmmtzVIYRIbuu~run.

    DATA li_mutator TYPE REF TO iUFTszUrcuWxYGvxpUmmtzVIYRIbuu.
    DATA lv_qsize TYPE i.
    FIELD-SYMBOLS <from> LIKE it_source_tree.
    FIELD-SYMBOLS <to> LIKE it_source_tree.
    DATA lr_buf TYPE REF TO z2ui5_if_ajson_types=>ty_nodes_ts.

    lv_qsize = lines( mt_queue ).

    IF lv_qsize = 0.
      et_dest_tree = it_source_tree.
      RETURN.
    ENDIF.

    LOOP AT mt_queue INTO li_mutator.
      IF sy-tabix = 1.
        ASSIGN it_source_tree TO <from>.
      ELSE.
        ASSIGN lr_buf->* TO <from>.
      ENDIF.

      IF sy-tabix = lv_qsize.
        ASSIGN et_dest_tree TO <to>.
      ELSE.
        CREATE DATA lr_buf.
        ASSIGN lr_buf->* TO <to>.
      ENDIF.

      li_mutator->run(
        EXPORTING
          it_source_tree = <from>
        IMPORTING
          et_dest_tree = <to> ).
    ENDLOOP.

  ENDMETHOD.

ENDCLASS.

CLASS z2ui5_cl_ajson IMPLEMENTATION.
  METHOD constructor.
    ms_opts-keep_item_order = iv_keep_item_order.
    ms_opts-to_abap_corresponding_only = iv_to_abap_corresponding_only.
    format_datetime( iv_format_datetime ).
  ENDMETHOD.
  METHOD create_empty.
    CREATE OBJECT ro_instance
      EXPORTING
        iv_to_abap_corresponding_only = iv_to_abap_corresponding_only
        iv_format_datetime            = iv_format_datetime
        iv_keep_item_order            = iv_keep_item_order.
    ro_instance->mi_custom_mapping = ii_custom_mapping.
  ENDMETHOD.
  METHOD create_from.

    DATA lo_mutator_queue TYPE REF TO kHGwlzUrcuWxYGvxpUmmucOpllUiAS.

    IF ii_source_json IS NOT BOUND.
      z2ui5_cx_ajson_error=>raise( 'Source not bound' ).
    ENDIF.

    CREATE OBJECT ro_instance
      EXPORTING
        iv_to_abap_corresponding_only = ii_source_json->opts( )-to_abap_corresponding_only
        iv_format_datetime            = ii_source_json->opts( )-format_datetime
        iv_keep_item_order            = ii_source_json->opts( )-keep_item_order.

    IF ii_filter IS NOT BOUND AND ii_mapper IS NOT BOUND.
      ro_instance->mt_json_tree = ii_source_json->mt_json_tree.
    ELSE.
      CREATE OBJECT lo_mutator_queue.
      IF ii_mapper IS BOUND.
        " Mapping goes first. But maybe it should be a freely definable queue of processors ?
        lo_mutator_queue->add( kHGwlzUrcuWxYGvxpUmmhFTcRDbOtm=>new( ii_mapper ) ).
      ENDIF.
      IF ii_filter IS BOUND.
        lo_mutator_queue->add( kHGwlzUrcuWxYGvxpUmmlwblMIpVBS=>new( ii_filter ) ).
      ENDIF.
      lo_mutator_queue->iUFTszUrcuWxYGvxpUmmtzVIYRIbuu~run(
        EXPORTING
          it_source_tree = ii_source_json->mt_json_tree
        IMPORTING
          et_dest_tree = ro_instance->mt_json_tree ).
    ENDIF.

  ENDMETHOD.
  METHOD delete_subtree.

    DATA lv_parent_path TYPE string.
    DATA lr_parent LIKE ir_parent.

    READ TABLE mt_json_tree INTO rs_top_node
      WITH KEY
        path = iv_path
        name = iv_name.
    IF sy-subrc <> 0.
      RETURN. " Not found ? nothing to delete !
    ENDIF.

    DELETE mt_json_tree INDEX sy-tabix. " where path = iv_path and name = iv_name.

    IF rs_top_node-children > 0. " only for objects and arrays
      lv_parent_path = iv_path && iv_name && '/*'.
      DELETE mt_json_tree WHERE path CP lv_parent_path.
    ENDIF.

    " decrement parent children
    IF ir_parent IS SUPPLIED.
      ir_parent->children = ir_parent->children - 1.
    ELSE.
      lr_parent = get_item( iv_path ).
      IF lr_parent IS NOT INITIAL.
        lr_parent->children = lr_parent->children - 1.
      ENDIF.
    ENDIF.

  ENDMETHOD.
  METHOD get_item.

    FIELD-SYMBOLS <item> LIKE LINE OF mt_json_tree.
    DATA ls_path_name TYPE z2ui5_if_ajson_types=>ty_path_name.
    ls_path_name = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>split_path( iv_path ).

    READ TABLE mt_json_tree
      ASSIGNING <item>
      WITH KEY
        path = ls_path_name-path
        name = ls_path_name-name.
    IF sy-subrc = 0.
      GET REFERENCE OF <item> INTO rv_item.
    ENDIF.

  ENDMETHOD.
  METHOD new.
    CREATE OBJECT ro_instance
      EXPORTING
        iv_to_abap_corresponding_only = iv_to_abap_corresponding_only
        iv_format_datetime            = iv_format_datetime
        iv_keep_item_order            = iv_keep_item_order.
  ENDMETHOD.
  METHOD parse.

    DATA lo_parser TYPE REF TO kHGwlzUrcuWxYGvxpUmmfipvepHQnc.

    CREATE OBJECT ro_instance.
    CREATE OBJECT lo_parser.
    ro_instance->mt_json_tree = lo_parser->parse(
      iv_json            = iv_json
      iv_keep_item_order = iv_keep_item_order ).
    ro_instance->mi_custom_mapping = ii_custom_mapping.
    ro_instance->ms_opts-keep_item_order = iv_keep_item_order.

    IF iv_freeze = abap_true.
      ro_instance->freeze( ).
    ENDIF.

  ENDMETHOD.
  METHOD prove_path_exists.

    DATA lt_path TYPE string_table.
    DATA lr_node_parent LIKE rr_end_node.
    DATA lv_cur_path TYPE string.
    DATA lv_cur_name TYPE string.
    DATA ls_new_node LIKE LINE OF mt_json_tree.

    SPLIT iv_path AT '/' INTO TABLE lt_path.
    DELETE lt_path WHERE table_line IS INITIAL.

    DO.
      lr_node_parent = rr_end_node.
      READ TABLE mt_json_tree REFERENCE INTO rr_end_node
        WITH KEY
          path = lv_cur_path
          name = lv_cur_name.
      IF sy-subrc <> 0. " New node, assume it is always object as it has a named child, use touch_array to init array
        CLEAR ls_new_node.
        IF lr_node_parent IS NOT INITIAL. " if has parent
          lr_node_parent->children = lr_node_parent->children + 1.
          IF lr_node_parent->type = z2ui5_if_ajson_types=>node_type-array.
            ls_new_node-index = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>validate_array_index(
              iv_path  = lv_cur_path
              iv_index = lv_cur_name ).
          ENDIF.
        ENDIF.
        ls_new_node-path = lv_cur_path.
        ls_new_node-name = lv_cur_name.
        ls_new_node-type = z2ui5_if_ajson_types=>node_type-object.
        INSERT ls_new_node INTO TABLE mt_json_tree REFERENCE INTO rr_end_node.
      ENDIF.
      lv_cur_path = lv_cur_path && lv_cur_name && '/'.
      READ TABLE lt_path INDEX sy-index INTO lv_cur_name.
      IF sy-subrc <> 0.
        EXIT. " no more segments
      ENDIF.
    ENDDO.

  ENDMETHOD.
  METHOD read_only_watchdog.
    IF ms_opts-read_only = abap_true.
      z2ui5_cx_ajson_error=>raise( 'This json instance is read only' ).
    ENDIF.
  ENDMETHOD.
  METHOD z2ui5_if_ajson~array_to_string_table.

    DATA lv_normalized_path TYPE string.
    DATA lr_node TYPE REF TO z2ui5_if_ajson_types=>ty_node.
    FIELD-SYMBOLS <item> LIKE LINE OF mt_json_tree.

    lv_normalized_path = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>normalize_path( iv_path ).
    lr_node = get_item( iv_path ).

    IF lr_node IS INITIAL.
      z2ui5_cx_ajson_error=>raise( |Path not found: { iv_path }| ).
    ENDIF.
    IF lr_node->type <> z2ui5_if_ajson_types=>node_type-array.
      z2ui5_cx_ajson_error=>raise( |Array expected at: { iv_path }| ).
    ENDIF.

    LOOP AT mt_json_tree ASSIGNING <item> WHERE path = lv_normalized_path.
      CASE <item>-type.
        WHEN z2ui5_if_ajson_types=>node_type-number OR z2ui5_if_ajson_types=>node_type-string.
          APPEND <item>-value TO rt_string_table.
        WHEN z2ui5_if_ajson_types=>node_type-null.
          APPEND '' TO rt_string_table.
        WHEN z2ui5_if_ajson_types=>node_type-boolean.
          DATA lv_tmp TYPE string.
          IF <item>-value = 'true'.
            lv_tmp = abap_true.
          ELSE.
            CLEAR lv_tmp.
          ENDIF.
          APPEND lv_tmp TO rt_string_table.
        WHEN OTHERS.
          z2ui5_cx_ajson_error=>raise( |Cannot convert [{ <item>-type
            }] to string at [{ <item>-path }{ <item>-name }]| ).
      ENDCASE.
    ENDLOOP.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~clear.

    read_only_watchdog( ).
    CLEAR mt_json_tree.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~clone.
    ri_json = create_from( me ).
  ENDMETHOD.
  METHOD z2ui5_if_ajson~delete.

    read_only_watchdog( ).

    DATA ls_split_path TYPE z2ui5_if_ajson_types=>ty_path_name.
    ls_split_path = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>split_path( iv_path ).

    delete_subtree(
      iv_path = ls_split_path-path
      iv_name = ls_split_path-name ).

    ri_json = me.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~exists.
    rv_exists = boolc( get_item( iv_path ) IS NOT INITIAL ).
  ENDMETHOD.
  METHOD z2ui5_if_ajson~filter.
    ri_json = create_from(
      ii_source_json = me
      ii_filter      = ii_filter ).
  ENDMETHOD.
  METHOD z2ui5_if_ajson~format_datetime.
    ms_opts-format_datetime = iv_use_iso.
    ri_json = me.
  ENDMETHOD.
  METHOD z2ui5_if_ajson~freeze.
    ms_opts-read_only = abap_true.
  ENDMETHOD.
  METHOD z2ui5_if_ajson~get.

    DATA lr_item TYPE REF TO z2ui5_if_ajson_types=>ty_node.
    lr_item = get_item( iv_path ).
    IF lr_item IS NOT INITIAL.
      rv_value = lr_item->value.
    ENDIF.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~get_boolean.

    DATA lr_item TYPE REF TO z2ui5_if_ajson_types=>ty_node.
    lr_item = get_item( iv_path ).
    IF lr_item IS INITIAL OR lr_item->type = z2ui5_if_ajson_types=>node_type-null.
      RETURN.
    ELSEIF lr_item->type = z2ui5_if_ajson_types=>node_type-boolean.
      rv_value = boolc( lr_item->value = 'true' ).
    ELSEIF lr_item->value IS NOT INITIAL.
      rv_value = abap_true.
    ENDIF.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~get_date.

    DATA lr_item TYPE REF TO z2ui5_if_ajson_types=>ty_node.
    DATA lv_y TYPE c LENGTH 4.
    DATA lv_m TYPE c LENGTH 2.
    DATA lv_d TYPE c LENGTH 2.

    lr_item = get_item( iv_path ).

    IF lr_item IS NOT INITIAL AND lr_item->type = z2ui5_if_ajson_types=>node_type-string.
      FIND FIRST OCCURRENCE OF REGEX '^(\d{4})-(\d{2})-(\d{2})(T|$)'
        IN lr_item->value
        SUBMATCHES lv_y lv_m lv_d.
      CONCATENATE lv_y lv_m lv_d INTO rv_value.
    ENDIF.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~get_integer.

    DATA lr_item TYPE REF TO z2ui5_if_ajson_types=>ty_node.
    lr_item = get_item( iv_path ).
    IF lr_item IS NOT INITIAL AND lr_item->type = z2ui5_if_ajson_types=>node_type-number.
      rv_value = lr_item->value.
    ENDIF.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~get_node_type.

    DATA lr_item TYPE REF TO z2ui5_if_ajson_types=>ty_node.
    lr_item = get_item( iv_path ).
    IF lr_item IS NOT INITIAL.
      rv_node_type = lr_item->type.
    ENDIF.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~get_number.

    DATA lr_item TYPE REF TO z2ui5_if_ajson_types=>ty_node.
    lr_item = get_item( iv_path ).
    IF lr_item IS NOT INITIAL AND lr_item->type = z2ui5_if_ajson_types=>node_type-number.
      rv_value = lr_item->value.
    ENDIF.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~get_string.

    DATA lr_item TYPE REF TO z2ui5_if_ajson_types=>ty_node.
    lr_item = get_item( iv_path ).
    IF lr_item IS NOT INITIAL AND lr_item->type <> z2ui5_if_ajson_types=>node_type-null.
      rv_value = lr_item->value.
    ENDIF.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~get_timestamp.

    DATA lo_to_abap TYPE REF TO kHGwlzUrcuWxYGvxpUmmXxNdxsjJjI.
    DATA lr_item TYPE REF TO z2ui5_if_ajson_types=>ty_node.

    lr_item = get_item( iv_path ).

    IF lr_item IS INITIAL.
      RETURN.
    ENDIF.

    CREATE OBJECT lo_to_abap.

    TRY.
        rv_value = lo_to_abap->to_timestamp( lr_item->value ).
      CATCH z2ui5_cx_ajson_error.
        RETURN.
    ENDTRY.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~is_empty.
    rv_yes = boolc( lines( mt_json_tree ) = 0 ).
  ENDMETHOD.
  METHOD z2ui5_if_ajson~keep_item_order.
    ms_opts-keep_item_order = abap_true.
    ri_json = me.
  ENDMETHOD.
  METHOD z2ui5_if_ajson~map.
    ri_json = create_from(
      ii_source_json = me
      ii_mapper      = ii_mapper ).
  ENDMETHOD.
  METHOD z2ui5_if_ajson~members.

    DATA lv_normalized_path TYPE string.
    FIELD-SYMBOLS <item> LIKE LINE OF mt_json_tree.

    lv_normalized_path = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>normalize_path( iv_path ).

    LOOP AT mt_json_tree ASSIGNING <item> WHERE path = lv_normalized_path.
      APPEND <item>-name TO rt_members.
    ENDLOOP.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~opts.
    rs_opts = ms_opts.
  ENDMETHOD.
  METHOD z2ui5_if_ajson~push.

    DATA lr_parent TYPE REF TO z2ui5_if_ajson_types=>ty_node.
    DATA lr_new_node TYPE REF TO z2ui5_if_ajson_types=>ty_node.

    read_only_watchdog( ).

    lr_parent = get_item( iv_path ).

    IF lr_parent IS INITIAL.
      z2ui5_cx_ajson_error=>raise( |Path [{ iv_path }] does not exist| ).
    ENDIF.

    IF lr_parent->type <> z2ui5_if_ajson_types=>node_type-array.
      z2ui5_cx_ajson_error=>raise( |Path [{ iv_path }] is not array| ).
    ENDIF.

    DATA lt_new_nodes TYPE z2ui5_if_ajson_types=>ty_nodes_tt.
    DATA ls_new_path TYPE z2ui5_if_ajson_types=>ty_path_name.
    DATA lv_new_index TYPE i.

    lv_new_index     = lr_parent->children + 1.
    ls_new_path-path = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>normalize_path( iv_path ).
    ls_new_path-name = |{ lv_new_index }|.

    lt_new_nodes = kHGwlzUrcuWxYGvxpUmmeJqampzabz=>convert(
      is_opts            = ms_opts
      iv_data   = iv_val
      is_prefix = ls_new_path ).
    READ TABLE lt_new_nodes INDEX 1 REFERENCE INTO lr_new_node. " assume first record is the array item - not ideal !
    ASSERT sy-subrc = 0.
    lr_new_node->index = lv_new_index.

    " update data
    lr_parent->children = lv_new_index.
    INSERT LINES OF lt_new_nodes INTO TABLE mt_json_tree.

    ri_json = me.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~set.

    DATA ls_split_path TYPE z2ui5_if_ajson_types=>ty_path_name.
    DATA lr_parent TYPE REF TO z2ui5_if_ajson_types=>ty_node.
    DATA ls_deleted_node TYPE z2ui5_if_ajson_types=>ty_node.
    DATA lv_item_order TYPE z2ui5_if_ajson_types=>ty_node-order.

    read_only_watchdog( ).

    ri_json = me.

    IF iv_val IS INITIAL AND iv_ignore_empty = abap_true AND iv_node_type IS INITIAL.
      RETURN. " nothing to assign
    ENDIF.

    IF iv_node_type IS NOT INITIAL
      AND iv_node_type <> z2ui5_if_ajson_types=>node_type-boolean AND iv_node_type <> z2ui5_if_ajson_types=>node_type-null
      AND iv_node_type <> z2ui5_if_ajson_types=>node_type-number AND iv_node_type <> z2ui5_if_ajson_types=>node_type-string.
      z2ui5_cx_ajson_error=>raise( |Unexpected type { iv_node_type }| ).
    ENDIF.

    ls_split_path = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>split_path( iv_path ).
    IF ls_split_path IS INITIAL. " Assign root, exceptional processing
      IF iv_node_type IS NOT INITIAL.
        mt_json_tree = kHGwlzUrcuWxYGvxpUmmeJqampzabz=>insert_with_type(
          is_opts            = ms_opts
          iv_data            = iv_val
          iv_type            = iv_node_type
          is_prefix          = ls_split_path
          ii_custom_mapping  = mi_custom_mapping ).
      ELSE.
        mt_json_tree = kHGwlzUrcuWxYGvxpUmmeJqampzabz=>convert(
          is_opts            = ms_opts
          iv_data            = iv_val
          is_prefix          = ls_split_path
          ii_custom_mapping  = mi_custom_mapping ).
      ENDIF.
      RETURN.
    ENDIF.

    " Ensure whole path exists
    lr_parent = prove_path_exists( ls_split_path-path ).
    ASSERT lr_parent IS NOT INITIAL.

    " delete if exists with subtree
    ls_deleted_node = delete_subtree(
      ir_parent = lr_parent
      iv_path   = ls_split_path-path
      iv_name   = ls_split_path-name ).
    lv_item_order = ls_deleted_node-order.

    " convert to json
    DATA lt_new_nodes TYPE z2ui5_if_ajson_types=>ty_nodes_tt.
    DATA lv_array_index TYPE i.

    IF lr_parent->type = z2ui5_if_ajson_types=>node_type-array.
      lv_array_index = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>validate_array_index(
        iv_path  = ls_split_path-path
        iv_index = ls_split_path-name ).
    ELSEIF lr_parent->type = z2ui5_if_ajson_types=>node_type-object
      AND lv_item_order = 0 AND ms_opts-keep_item_order = abap_true.
      lv_item_order = lr_parent->children + 1.
    ENDIF.

    IF iv_node_type IS NOT INITIAL.
      lt_new_nodes = kHGwlzUrcuWxYGvxpUmmeJqampzabz=>insert_with_type(
        is_opts            = ms_opts
        iv_item_order      = lv_item_order
        iv_data            = iv_val
        iv_type            = iv_node_type
        iv_array_index     = lv_array_index
        is_prefix          = ls_split_path
        ii_custom_mapping  = mi_custom_mapping ).
    ELSE.
      lt_new_nodes = kHGwlzUrcuWxYGvxpUmmeJqampzabz=>convert(
        is_opts            = ms_opts
        iv_item_order      = lv_item_order
        iv_data            = iv_val
        iv_array_index     = lv_array_index
        is_prefix          = ls_split_path
        ii_custom_mapping  = mi_custom_mapping ).
    ENDIF.

    " update nodes
    IF lines( lt_new_nodes ) > 0.
      lr_parent->children = lr_parent->children + 1.
      INSERT LINES OF lt_new_nodes INTO TABLE mt_json_tree.
    ENDIF.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~setx.

    DATA lv_path TYPE string.
    DATA lv_val TYPE string.
    DATA lv_int TYPE i.
    DATA lv_dec TYPE decfloat34.
    DATA lv_last TYPE i.

    IF iv_param IS INITIAL.
      ri_json = me.
      RETURN.
    ENDIF.

    SPLIT iv_param AT ':' INTO lv_path lv_val.
    CONDENSE lv_path.
    CONDENSE lv_val.

    IF lv_val IS INITIAL.
      ri_json = me.
      RETURN. " Hmm ? or empty string ? or null ?
    ENDIF.

    IF go_float_regex IS NOT BOUND.
      CREATE OBJECT go_float_regex EXPORTING pattern = '^([1-9][0-9]*|0)\.[0-9]+$'.
      " expects fractional, because ints are detected separately
    ENDIF.

    IF lv_val = 'null'.
      z2ui5_if_ajson~set_null( lv_path ).
    ELSEIF lv_val = 'true'.
      z2ui5_if_ajson~set_boolean(
        iv_path = lv_path
        iv_val  = abap_true ).
    ELSEIF lv_val = 'false'.
      z2ui5_if_ajson~set_boolean(
        iv_path = lv_path
        iv_val  = abap_false ).
    ELSEIF lv_val CO '0123456789'.
      lv_int = lv_val.
      z2ui5_if_ajson~set_integer(
        iv_path = lv_path
        iv_val  = lv_int ).
    ELSEIF lv_val CO '0123456789.' AND go_float_regex->create_matcher( text = lv_val )->match( ) = abap_true.
      lv_dec = lv_val.
      z2ui5_if_ajson~set(
        iv_path = lv_path
        iv_val  = lv_dec ).
    ELSEIF lv_val+0(1) = '{' OR lv_val+0(1) = '['.
      "Expect object/array, but no further checks, parser will catch errors
      z2ui5_if_ajson~set(
        iv_path = lv_path
        iv_val  = parse(
          iv_json = lv_val
          iv_keep_item_order = ms_opts-keep_item_order ) ).
    ELSE. " string
      lv_last = strlen( lv_val ) - 1.
      IF lv_val+0(1) = '"' AND lv_val+lv_last(1) = '"'.
        lv_val = substring(
          val = lv_val
          off = 1
          len = lv_last - 1 ).
      ENDIF.
      z2ui5_if_ajson~set_string(
        iv_path = lv_path
        iv_val  = lv_val ).
    ENDIF.

    ri_json = me.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~set_boolean.

    ri_json = me.

    DATA lv_bool TYPE abap_bool.
    lv_bool = boolc( iv_val IS NOT INITIAL ).
    z2ui5_if_ajson~set(
      iv_ignore_empty = abap_false
      iv_path = iv_path
      iv_val  = lv_bool ).

  ENDMETHOD.
  METHOD z2ui5_if_ajson~set_date.

    ri_json = me.

    DATA lv_val TYPE string.
    lv_val = kHGwlzUrcuWxYGvxpUmmeJqampzabz=>format_date( iv_val ).

    z2ui5_if_ajson~set(
      iv_ignore_empty = abap_false
      iv_path = iv_path
      iv_val  = lv_val ).

  ENDMETHOD.
  METHOD z2ui5_if_ajson~set_integer.

    ri_json = me.

    z2ui5_if_ajson~set(
      iv_ignore_empty = abap_false
      iv_path = iv_path
      iv_val  = iv_val ).

  ENDMETHOD.
  METHOD z2ui5_if_ajson~set_null.

    ri_json = me.

    DATA lv_null_ref TYPE REF TO data.
    z2ui5_if_ajson~set(
      iv_ignore_empty = abap_false
      iv_path = iv_path
      iv_val  = lv_null_ref ).

  ENDMETHOD.
  METHOD z2ui5_if_ajson~set_string.

    ri_json = me.

    DATA lv_val TYPE string.
    lv_val = iv_val.
    z2ui5_if_ajson~set(
      iv_ignore_empty = abap_false
      iv_path = iv_path
      iv_val  = lv_val ).

  ENDMETHOD.
  METHOD z2ui5_if_ajson~set_timestamp.

    ri_json = me.

    DATA lv_timestamp_iso TYPE string.
    lv_timestamp_iso = kHGwlzUrcuWxYGvxpUmmeJqampzabz=>format_timestamp( iv_val ).

    z2ui5_if_ajson~set(
      iv_ignore_empty = abap_false
      iv_path = iv_path
      iv_val  = lv_timestamp_iso ).

  ENDMETHOD.
  METHOD z2ui5_if_ajson~slice.

    DATA lo_section         TYPE REF TO z2ui5_cl_ajson.
    DATA ls_item            LIKE LINE OF mt_json_tree.
    DATA lv_normalized_path TYPE string.
    DATA ls_path_parts      TYPE z2ui5_if_ajson_types=>ty_path_name.
    DATA lv_path_len        TYPE i.
    DATA lv_path_pattern    TYPE string.

    CREATE OBJECT lo_section.
    lv_normalized_path = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>normalize_path( iv_path ).
    lv_path_len        = strlen( lv_normalized_path ).
    ls_path_parts      = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>split_path( lv_normalized_path ).

    READ TABLE mt_json_tree INTO ls_item
      WITH KEY path = ls_path_parts-path name = ls_path_parts-name.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    CLEAR: ls_item-path, ls_item-name, ls_item-order. " this becomes a new root
    INSERT ls_item INTO TABLE lo_section->mt_json_tree.

    lv_path_pattern = lv_normalized_path && `*`.

    LOOP AT mt_json_tree INTO ls_item WHERE path CP lv_path_pattern.

      ls_item-path = substring( val = ls_item-path
                                off = lv_path_len - 1 ). " less closing '/'
      INSERT ls_item INTO TABLE lo_section->mt_json_tree.

    ENDLOOP.

    ri_json = lo_section.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~stringify.

    rv_json = kHGwlzUrcuWxYGvxpUmmFgyFungUrS=>stringify(
      it_json_tree       = mt_json_tree
      iv_keep_item_order = ms_opts-keep_item_order
      iv_indent          = iv_indent ).

  ENDMETHOD.
  METHOD z2ui5_if_ajson~touch_array.

    DATA lr_node TYPE REF TO z2ui5_if_ajson_types=>ty_node.
    DATA ls_deleted_node TYPE z2ui5_if_ajson_types=>ty_node.
    DATA ls_new_node LIKE LINE OF mt_json_tree.
    DATA ls_split_path TYPE z2ui5_if_ajson_types=>ty_path_name.

    read_only_watchdog( ).

    ls_split_path = kHGwlzUrcuWxYGvxpUmmzByNvbZmNu=>split_path( iv_path ).
    IF ls_split_path IS INITIAL. " Assign root, exceptional processing
      ls_new_node-path = ls_split_path-path.
      ls_new_node-name = ls_split_path-name.
      ls_new_node-type = z2ui5_if_ajson_types=>node_type-array.
      INSERT ls_new_node INTO TABLE mt_json_tree.
      RETURN.
    ENDIF.

    IF iv_clear = abap_true.
      ls_deleted_node = delete_subtree(
        iv_path = ls_split_path-path
        iv_name = ls_split_path-name ).
    ELSE.
      lr_node = get_item( iv_path ).
    ENDIF.

    IF lr_node IS INITIAL. " Or node was cleared

      DATA lr_parent TYPE REF TO z2ui5_if_ajson_types=>ty_node.
      lr_parent = prove_path_exists( ls_split_path-path ).
      ASSERT lr_parent IS NOT INITIAL.

      lr_parent->children = lr_parent->children + 1.

      ls_new_node-path = ls_split_path-path.
      ls_new_node-name = ls_split_path-name.
      ls_new_node-type = z2ui5_if_ajson_types=>node_type-array.

      IF ms_opts-keep_item_order = abap_true.
        IF ls_deleted_node IS NOT INITIAL.
          ls_new_node-order = ls_deleted_node-order.
        ELSE.
          ls_new_node-order = lr_parent->children.
        ENDIF.
      ENDIF.

      INSERT ls_new_node INTO TABLE mt_json_tree.

    ELSEIF lr_node->type <> z2ui5_if_ajson_types=>node_type-array.
      z2ui5_cx_ajson_error=>raise( |Path [{ iv_path }] already used and is not array| ).
    ENDIF.

    ri_json = me.

  ENDMETHOD.
  METHOD z2ui5_if_ajson~to_abap.

    DATA lo_to_abap TYPE REF TO kHGwlzUrcuWxYGvxpUmmXxNdxsjJjI.

    CLEAR ev_container.
    CREATE OBJECT lo_to_abap
      EXPORTING
        iv_corresponding  = boolc( iv_corresponding = abap_true OR ms_opts-to_abap_corresponding_only = abap_true )
        ii_custom_mapping = mi_custom_mapping.

    lo_to_abap->to_abap(
      EXPORTING
        it_nodes    = z2ui5_if_ajson~mt_json_tree
      CHANGING
        c_container = ev_container ).

  ENDMETHOD.

  METHOD z2ui5_if_ajson~to_abap_corresponding_only.
    ms_opts-to_abap_corresponding_only = iv_enable.
    ri_json = me.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_abap2ui5_standalone DEFINITION FINAL CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES if_http_extension.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_abap2ui5_standalone IMPLEMENTATION.

  METHOD if_http_extension~handle_request.

    z2ui5_cl_http_handler=>factory( server )->main( ).

  ENDMETHOD.

ENDCLASS.


****************************************************
INTERFACE lif_abapmerge_marker.
* abapmerge 0.16.6 - 2025-02-12T14:04:26.932Z
  CONSTANTS c_merge_timestamp TYPE string VALUE `2025-02-12T14:04:26.932Z`.
  CONSTANTS c_abapmerge_version TYPE string VALUE `0.16.6`.
ENDINTERFACE.


CLASS z2ui5_cl_my_standalone_app DEFINITION
  CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES z2ui5_if_app.

    DATA name              TYPE string.
    DATA check_initialized TYPE abap_bool.

  PROTECTED SECTION.

  PRIVATE SECTION.
ENDCLASS.


CLASS z2ui5_cl_my_standalone_app IMPLEMENTATION.

  METHOD z2ui5_if_app~main.

    IF check_initialized = abap_false.
      check_initialized = abap_true.

      client->view_display( z2ui5_cl_xml_view=>factory(
        )->shell(
        )->page( title = 'abap2UI5 - Hello abap2UI5 Standalone World'
        )->simple_form( editable = abap_true
            )->content( ns = `form`
                )->title( 'Make an input here and send it to the server...'
                )->label( 'Name'
                )->input( client->_bind_edit( name )
                )->button( text  = 'post'
                           press = client->_event( 'BUTTON_POST' )
        )->stringify( ) ).

    ENDIF.

    CASE client->get( )-event.
      WHEN 'BUTTON_POST'.
        client->message_box_display( |Your name is { name }| ).
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.

ENDCLASS.
****************************************************
